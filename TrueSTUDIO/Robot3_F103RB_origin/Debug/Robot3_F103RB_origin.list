
Robot3_F103RB_origin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009628  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  08009734  08009734  00019734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009bd0  08009bd0  00019bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009bd4  08009bd4  00019bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  08009bd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000030c  20000074  08009c4c  00020074  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000380  08009c4c  00020380  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_line   00009dbd  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0001849b  00000000  00000000  00029e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000030a0  00000000  00000000  000422f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000e68  00000000  00000000  00045398  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d10  00000000  00000000  00046200  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000042c3  00000000  00000000  00046f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0004b1d3  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00003ce4  00000000  00000000  0004b250  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	0800971c 	.word	0x0800971c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	0800971c 	.word	0x0800971c

0800014c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800014c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800014e:	e003      	b.n	8000158 <LoopCopyDataInit>

08000150 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000150:	4b0b      	ldr	r3, [pc, #44]	; (8000180 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000152:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000154:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000156:	3104      	adds	r1, #4

08000158 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000158:	480a      	ldr	r0, [pc, #40]	; (8000184 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800015a:	4b0b      	ldr	r3, [pc, #44]	; (8000188 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800015c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800015e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000160:	d3f6      	bcc.n	8000150 <CopyDataInit>
  ldr r2, =_sbss
 8000162:	4a0a      	ldr	r2, [pc, #40]	; (800018c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000164:	e002      	b.n	800016c <LoopFillZerobss>

08000166 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000166:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000168:	f842 3b04 	str.w	r3, [r2], #4

0800016c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800016c:	4b08      	ldr	r3, [pc, #32]	; (8000190 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800016e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000170:	d3f9      	bcc.n	8000166 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000172:	f002 fc3f 	bl	80029f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000176:	f008 fe63 	bl	8008e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800017a:	f000 f9f5 	bl	8000568 <main>
  bx lr
 800017e:	4770      	bx	lr
  ldr r3, =_sidata
 8000180:	08009bd8 	.word	0x08009bd8
  ldr r0, =_sdata
 8000184:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000188:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 800018c:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8000190:	20000380 	.word	0x20000380

08000194 <BusFault_Handler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000194:	e7fe      	b.n	8000194 <BusFault_Handler>
	...

08000198 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b08a      	sub	sp, #40	; 0x28
 800019c:	af00      	add	r7, sp, #0
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig;
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 800019e:	4b48      	ldr	r3, [pc, #288]	; (80002c0 <MX_ADC1_Init+0x128>)
 80001a0:	4a48      	ldr	r2, [pc, #288]	; (80002c4 <MX_ADC1_Init+0x12c>)
 80001a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80001a4:	4b46      	ldr	r3, [pc, #280]	; (80002c0 <MX_ADC1_Init+0x128>)
 80001a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80001ac:	4b44      	ldr	r3, [pc, #272]	; (80002c0 <MX_ADC1_Init+0x128>)
 80001ae:	2200      	movs	r2, #0
 80001b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80001b2:	4b43      	ldr	r3, [pc, #268]	; (80002c0 <MX_ADC1_Init+0x128>)
 80001b4:	2200      	movs	r2, #0
 80001b6:	615a      	str	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80001b8:	4b41      	ldr	r3, [pc, #260]	; (80002c0 <MX_ADC1_Init+0x128>)
 80001ba:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80001be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001c0:	4b3f      	ldr	r3, [pc, #252]	; (80002c0 <MX_ADC1_Init+0x128>)
 80001c2:	2200      	movs	r2, #0
 80001c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 5;
 80001c6:	4b3e      	ldr	r3, [pc, #248]	; (80002c0 <MX_ADC1_Init+0x128>)
 80001c8:	2205      	movs	r2, #5
 80001ca:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80001cc:	483c      	ldr	r0, [pc, #240]	; (80002c0 <MX_ADC1_Init+0x128>)
 80001ce:	f002 fcb5 	bl	8002b3c <HAL_ADC_Init>
 80001d2:	4603      	mov	r3, r0
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d003      	beq.n	80001e0 <MX_ADC1_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
 80001d8:	2146      	movs	r1, #70	; 0x46
 80001da:	483b      	ldr	r0, [pc, #236]	; (80002c8 <MX_ADC1_Init+0x130>)
 80001dc:	f001 fff0 	bl	80021c0 <_Error_Handler>
  }

    /**Configure Analog WatchDog 1 
    */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80001e0:	4b3a      	ldr	r3, [pc, #232]	; (80002cc <MX_ADC1_Init+0x134>)
 80001e2:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 4095;
 80001e4:	f640 73ff 	movw	r3, #4095	; 0xfff
 80001e8:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.LowThreshold = 2363;
 80001ea:	f640 133b 	movw	r3, #2363	; 0x93b
 80001ee:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.Channel = ADC_CHANNEL_15;
 80001f0:	230f      	movs	r3, #15
 80001f2:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.ITMode = ENABLE;
 80001f4:	2301      	movs	r3, #1
 80001f6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80001f8:	f107 0310 	add.w	r3, r7, #16
 80001fc:	4619      	mov	r1, r3
 80001fe:	4830      	ldr	r0, [pc, #192]	; (80002c0 <MX_ADC1_Init+0x128>)
 8000200:	f003 fad4 	bl	80037ac <HAL_ADC_AnalogWDGConfig>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d003      	beq.n	8000212 <MX_ADC1_Init+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800020a:	2152      	movs	r1, #82	; 0x52
 800020c:	482e      	ldr	r0, [pc, #184]	; (80002c8 <MX_ADC1_Init+0x130>)
 800020e:	f001 ffd7 	bl	80021c0 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_9;
 8000212:	2309      	movs	r3, #9
 8000214:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000216:	2301      	movs	r3, #1
 8000218:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800021a:	2307      	movs	r3, #7
 800021c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4619      	mov	r1, r3
 8000222:	4827      	ldr	r0, [pc, #156]	; (80002c0 <MX_ADC1_Init+0x128>)
 8000224:	f003 f8fe 	bl	8003424 <HAL_ADC_ConfigChannel>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d003      	beq.n	8000236 <MX_ADC1_Init+0x9e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800022e:	215c      	movs	r1, #92	; 0x5c
 8000230:	4825      	ldr	r0, [pc, #148]	; (80002c8 <MX_ADC1_Init+0x130>)
 8000232:	f001 ffc5 	bl	80021c0 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_12;
 8000236:	230c      	movs	r3, #12
 8000238:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800023a:	2302      	movs	r3, #2
 800023c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4619      	mov	r1, r3
 8000242:	481f      	ldr	r0, [pc, #124]	; (80002c0 <MX_ADC1_Init+0x128>)
 8000244:	f003 f8ee 	bl	8003424 <HAL_ADC_ConfigChannel>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d003      	beq.n	8000256 <MX_ADC1_Init+0xbe>
  {
    _Error_Handler(__FILE__, __LINE__);
 800024e:	2165      	movs	r1, #101	; 0x65
 8000250:	481d      	ldr	r0, [pc, #116]	; (80002c8 <MX_ADC1_Init+0x130>)
 8000252:	f001 ffb5 	bl	80021c0 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_13;
 8000256:	230d      	movs	r3, #13
 8000258:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800025a:	2303      	movs	r3, #3
 800025c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	4619      	mov	r1, r3
 8000262:	4817      	ldr	r0, [pc, #92]	; (80002c0 <MX_ADC1_Init+0x128>)
 8000264:	f003 f8de 	bl	8003424 <HAL_ADC_ConfigChannel>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d003      	beq.n	8000276 <MX_ADC1_Init+0xde>
  {
    _Error_Handler(__FILE__, __LINE__);
 800026e:	216e      	movs	r1, #110	; 0x6e
 8000270:	4815      	ldr	r0, [pc, #84]	; (80002c8 <MX_ADC1_Init+0x130>)
 8000272:	f001 ffa5 	bl	80021c0 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_14;
 8000276:	230e      	movs	r3, #14
 8000278:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800027a:	2304      	movs	r3, #4
 800027c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	4619      	mov	r1, r3
 8000282:	480f      	ldr	r0, [pc, #60]	; (80002c0 <MX_ADC1_Init+0x128>)
 8000284:	f003 f8ce 	bl	8003424 <HAL_ADC_ConfigChannel>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d003      	beq.n	8000296 <MX_ADC1_Init+0xfe>
  {
    _Error_Handler(__FILE__, __LINE__);
 800028e:	2177      	movs	r1, #119	; 0x77
 8000290:	480d      	ldr	r0, [pc, #52]	; (80002c8 <MX_ADC1_Init+0x130>)
 8000292:	f001 ff95 	bl	80021c0 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_15;
 8000296:	230f      	movs	r3, #15
 8000298:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800029a:	2305      	movs	r3, #5
 800029c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	4619      	mov	r1, r3
 80002a2:	4807      	ldr	r0, [pc, #28]	; (80002c0 <MX_ADC1_Init+0x128>)
 80002a4:	f003 f8be 	bl	8003424 <HAL_ADC_ConfigChannel>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d003      	beq.n	80002b6 <MX_ADC1_Init+0x11e>
  {
    _Error_Handler(__FILE__, __LINE__);
 80002ae:	2180      	movs	r1, #128	; 0x80
 80002b0:	4805      	ldr	r0, [pc, #20]	; (80002c8 <MX_ADC1_Init+0x130>)
 80002b2:	f001 ff85 	bl	80021c0 <_Error_Handler>
  }

}
 80002b6:	bf00      	nop
 80002b8:	3728      	adds	r7, #40	; 0x28
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	200000f0 	.word	0x200000f0
 80002c4:	40012400 	.word	0x40012400
 80002c8:	08009734 	.word	0x08009734
 80002cc:	00800200 	.word	0x00800200

080002d0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b088      	sub	sp, #32
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a2c      	ldr	r2, [pc, #176]	; (8000390 <HAL_ADC_MspInit+0xc0>)
 80002de:	4293      	cmp	r3, r2
 80002e0:	d151      	bne.n	8000386 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002e2:	4a2c      	ldr	r2, [pc, #176]	; (8000394 <HAL_ADC_MspInit+0xc4>)
 80002e4:	4b2b      	ldr	r3, [pc, #172]	; (8000394 <HAL_ADC_MspInit+0xc4>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002ec:	6193      	str	r3, [r2, #24]
 80002ee:	4b29      	ldr	r3, [pc, #164]	; (8000394 <HAL_ADC_MspInit+0xc4>)
 80002f0:	699b      	ldr	r3, [r3, #24]
 80002f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002f6:	60fb      	str	r3, [r7, #12]
 80002f8:	68fb      	ldr	r3, [r7, #12]
    PC3     ------> ADC1_IN13
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = IR1_in_Pin|IR2_in_Pin|IR4_in_Pin|GPIO_PIN_5;
 80002fa:	233c      	movs	r3, #60	; 0x3c
 80002fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002fe:	2303      	movs	r3, #3
 8000300:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000302:	f107 0310 	add.w	r3, r7, #16
 8000306:	4619      	mov	r1, r3
 8000308:	4823      	ldr	r0, [pc, #140]	; (8000398 <HAL_ADC_MspInit+0xc8>)
 800030a:	f004 f91f 	bl	800454c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IR3_in_Pin;
 800030e:	2302      	movs	r3, #2
 8000310:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000312:	2303      	movs	r3, #3
 8000314:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(IR3_in_GPIO_Port, &GPIO_InitStruct);
 8000316:	f107 0310 	add.w	r3, r7, #16
 800031a:	4619      	mov	r1, r3
 800031c:	481f      	ldr	r0, [pc, #124]	; (800039c <HAL_ADC_MspInit+0xcc>)
 800031e:	f004 f915 	bl	800454c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000322:	4b1f      	ldr	r3, [pc, #124]	; (80003a0 <HAL_ADC_MspInit+0xd0>)
 8000324:	4a1f      	ldr	r2, [pc, #124]	; (80003a4 <HAL_ADC_MspInit+0xd4>)
 8000326:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000328:	4b1d      	ldr	r3, [pc, #116]	; (80003a0 <HAL_ADC_MspInit+0xd0>)
 800032a:	2200      	movs	r2, #0
 800032c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800032e:	4b1c      	ldr	r3, [pc, #112]	; (80003a0 <HAL_ADC_MspInit+0xd0>)
 8000330:	2200      	movs	r2, #0
 8000332:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000334:	4b1a      	ldr	r3, [pc, #104]	; (80003a0 <HAL_ADC_MspInit+0xd0>)
 8000336:	2280      	movs	r2, #128	; 0x80
 8000338:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800033a:	4b19      	ldr	r3, [pc, #100]	; (80003a0 <HAL_ADC_MspInit+0xd0>)
 800033c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000340:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000342:	4b17      	ldr	r3, [pc, #92]	; (80003a0 <HAL_ADC_MspInit+0xd0>)
 8000344:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000348:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800034a:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <HAL_ADC_MspInit+0xd0>)
 800034c:	2220      	movs	r2, #32
 800034e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000350:	4b13      	ldr	r3, [pc, #76]	; (80003a0 <HAL_ADC_MspInit+0xd0>)
 8000352:	2200      	movs	r2, #0
 8000354:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000356:	4812      	ldr	r0, [pc, #72]	; (80003a0 <HAL_ADC_MspInit+0xd0>)
 8000358:	f003 fd96 	bl	8003e88 <HAL_DMA_Init>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d003      	beq.n	800036a <HAL_ADC_MspInit+0x9a>
    {
      _Error_Handler(__FILE__, __LINE__);
 8000362:	21ac      	movs	r1, #172	; 0xac
 8000364:	4810      	ldr	r0, [pc, #64]	; (80003a8 <HAL_ADC_MspInit+0xd8>)
 8000366:	f001 ff2b 	bl	80021c0 <_Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4a0c      	ldr	r2, [pc, #48]	; (80003a0 <HAL_ADC_MspInit+0xd0>)
 800036e:	621a      	str	r2, [r3, #32]
 8000370:	4a0b      	ldr	r2, [pc, #44]	; (80003a0 <HAL_ADC_MspInit+0xd0>)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000376:	2200      	movs	r2, #0
 8000378:	2100      	movs	r1, #0
 800037a:	2012      	movs	r0, #18
 800037c:	f003 fd00 	bl	8003d80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000380:	2012      	movs	r0, #18
 8000382:	f003 fd29 	bl	8003dd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000386:	bf00      	nop
 8000388:	3720      	adds	r7, #32
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	40012400 	.word	0x40012400
 8000394:	40021000 	.word	0x40021000
 8000398:	40011000 	.word	0x40011000
 800039c:	40010c00 	.word	0x40010c00
 80003a0:	20000120 	.word	0x20000120
 80003a4:	40020008 	.word	0x40020008
 80003a8:	08009734 	.word	0x08009734

080003ac <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003b2:	4a0c      	ldr	r2, [pc, #48]	; (80003e4 <MX_DMA_Init+0x38>)
 80003b4:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <MX_DMA_Init+0x38>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	f043 0301 	orr.w	r3, r3, #1
 80003bc:	6153      	str	r3, [r2, #20]
 80003be:	4b09      	ldr	r3, [pc, #36]	; (80003e4 <MX_DMA_Init+0x38>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	f003 0301 	and.w	r3, r3, #1
 80003c6:	607b      	str	r3, [r7, #4]
 80003c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80003ca:	2200      	movs	r2, #0
 80003cc:	2100      	movs	r1, #0
 80003ce:	200b      	movs	r0, #11
 80003d0:	f003 fcd6 	bl	8003d80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80003d4:	200b      	movs	r0, #11
 80003d6:	f003 fcff 	bl	8003dd8 <HAL_NVIC_EnableIRQ>

}
 80003da:	bf00      	nop
 80003dc:	3708      	adds	r7, #8
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40021000 	.word	0x40021000

080003e8 <MX_GPIO_Init>:
        * the Code Generation settings)
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b088      	sub	sp, #32
 80003ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ee:	4a58      	ldr	r2, [pc, #352]	; (8000550 <MX_GPIO_Init+0x168>)
 80003f0:	4b57      	ldr	r3, [pc, #348]	; (8000550 <MX_GPIO_Init+0x168>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	f043 0310 	orr.w	r3, r3, #16
 80003f8:	6193      	str	r3, [r2, #24]
 80003fa:	4b55      	ldr	r3, [pc, #340]	; (8000550 <MX_GPIO_Init+0x168>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	f003 0310 	and.w	r3, r3, #16
 8000402:	60fb      	str	r3, [r7, #12]
 8000404:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000406:	4a52      	ldr	r2, [pc, #328]	; (8000550 <MX_GPIO_Init+0x168>)
 8000408:	4b51      	ldr	r3, [pc, #324]	; (8000550 <MX_GPIO_Init+0x168>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f043 0320 	orr.w	r3, r3, #32
 8000410:	6193      	str	r3, [r2, #24]
 8000412:	4b4f      	ldr	r3, [pc, #316]	; (8000550 <MX_GPIO_Init+0x168>)
 8000414:	699b      	ldr	r3, [r3, #24]
 8000416:	f003 0320 	and.w	r3, r3, #32
 800041a:	60bb      	str	r3, [r7, #8]
 800041c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041e:	4a4c      	ldr	r2, [pc, #304]	; (8000550 <MX_GPIO_Init+0x168>)
 8000420:	4b4b      	ldr	r3, [pc, #300]	; (8000550 <MX_GPIO_Init+0x168>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	f043 0304 	orr.w	r3, r3, #4
 8000428:	6193      	str	r3, [r2, #24]
 800042a:	4b49      	ldr	r3, [pc, #292]	; (8000550 <MX_GPIO_Init+0x168>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	f003 0304 	and.w	r3, r3, #4
 8000432:	607b      	str	r3, [r7, #4]
 8000434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000436:	4a46      	ldr	r2, [pc, #280]	; (8000550 <MX_GPIO_Init+0x168>)
 8000438:	4b45      	ldr	r3, [pc, #276]	; (8000550 <MX_GPIO_Init+0x168>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f043 0308 	orr.w	r3, r3, #8
 8000440:	6193      	str	r3, [r2, #24]
 8000442:	4b43      	ldr	r3, [pc, #268]	; (8000550 <MX_GPIO_Init+0x168>)
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	f003 0308 	and.w	r3, r3, #8
 800044a:	603b      	str	r3, [r7, #0]
 800044c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|IR3_out_Pin, GPIO_PIN_RESET);
 800044e:	2200      	movs	r2, #0
 8000450:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8000454:	483f      	ldr	r0, [pc, #252]	; (8000554 <MX_GPIO_Init+0x16c>)
 8000456:	f004 faad 	bl	80049b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR2_Pin|GPIO_TRIG_SONAR_Pin|IR1_out_Pin|IR4_out_Pin 
 800045a:	2200      	movs	r2, #0
 800045c:	f24d 4104 	movw	r1, #54276	; 0xd404
 8000460:	483d      	ldr	r0, [pc, #244]	; (8000558 <MX_GPIO_Init+0x170>)
 8000462:	f004 faa7 	bl	80049b4 <HAL_GPIO_WritePin>
                          |IR2_out_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_RESET);
 8000466:	2200      	movs	r2, #0
 8000468:	f44f 7180 	mov.w	r1, #256	; 0x100
 800046c:	483b      	ldr	r0, [pc, #236]	; (800055c <MX_GPIO_Init+0x174>)
 800046e:	f004 faa1 	bl	80049b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000472:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000476:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000478:	4b39      	ldr	r3, [pc, #228]	; (8000560 <MX_GPIO_Init+0x178>)
 800047a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047c:	2300      	movs	r3, #0
 800047e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000480:	f107 0310 	add.w	r3, r7, #16
 8000484:	4619      	mov	r1, r3
 8000486:	4835      	ldr	r0, [pc, #212]	; (800055c <MX_GPIO_Init+0x174>)
 8000488:	f004 f860 	bl	800454c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC6 PC7 
                           PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7 
 800048c:	f241 23c3 	movw	r3, #4803	; 0x12c3
 8000490:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_9|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000492:	2303      	movs	r3, #3
 8000494:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000496:	f107 0310 	add.w	r3, r7, #16
 800049a:	4619      	mov	r1, r3
 800049c:	482f      	ldr	r0, [pc, #188]	; (800055c <MX_GPIO_Init+0x174>)
 800049e:	f004 f855 	bl	800454c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6 
                           PA7 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6 
 80004a2:	f240 63d3 	movw	r3, #1747	; 0x6d3
 80004a6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004a8:	2303      	movs	r3, #3
 80004aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ac:	f107 0310 	add.w	r3, r7, #16
 80004b0:	4619      	mov	r1, r3
 80004b2:	4828      	ldr	r0, [pc, #160]	; (8000554 <MX_GPIO_Init+0x16c>)
 80004b4:	f004 f84a 	bl	800454c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80004b8:	230c      	movs	r3, #12
 80004ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004bc:	2302      	movs	r3, #2
 80004be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c0:	2302      	movs	r3, #2
 80004c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c4:	f107 0310 	add.w	r3, r7, #16
 80004c8:	4619      	mov	r1, r3
 80004ca:	4822      	ldr	r0, [pc, #136]	; (8000554 <MX_GPIO_Init+0x16c>)
 80004cc:	f004 f83e 	bl	800454c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|IR3_out_Pin;
 80004d0:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80004d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d6:	2301      	movs	r3, #1
 80004d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004da:	2302      	movs	r3, #2
 80004dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004de:	f107 0310 	add.w	r3, r7, #16
 80004e2:	4619      	mov	r1, r3
 80004e4:	481b      	ldr	r0, [pc, #108]	; (8000554 <MX_GPIO_Init+0x16c>)
 80004e6:	f004 f831 	bl	800454c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB13 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9;
 80004ea:	f242 3301 	movw	r3, #8961	; 0x2301
 80004ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004f0:	2303      	movs	r3, #3
 80004f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004f4:	f107 0310 	add.w	r3, r7, #16
 80004f8:	4619      	mov	r1, r3
 80004fa:	4817      	ldr	r0, [pc, #92]	; (8000558 <MX_GPIO_Init+0x170>)
 80004fc:	f004 f826 	bl	800454c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = DIR2_Pin|GPIO_TRIG_SONAR_Pin|IR1_out_Pin|IR4_out_Pin 
 8000500:	f24d 4304 	movw	r3, #54276	; 0xd404
 8000504:	613b      	str	r3, [r7, #16]
                          |IR2_out_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000506:	2301      	movs	r3, #1
 8000508:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050a:	2302      	movs	r3, #2
 800050c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800050e:	f107 0310 	add.w	r3, r7, #16
 8000512:	4619      	mov	r1, r3
 8000514:	4810      	ldr	r0, [pc, #64]	; (8000558 <MX_GPIO_Init+0x170>)
 8000516:	f004 f819 	bl	800454c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR1_Pin;
 800051a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800051e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000520:	2301      	movs	r3, #1
 8000522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000524:	2302      	movs	r3, #2
 8000526:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIR1_GPIO_Port, &GPIO_InitStruct);
 8000528:	f107 0310 	add.w	r3, r7, #16
 800052c:	4619      	mov	r1, r3
 800052e:	480b      	ldr	r0, [pc, #44]	; (800055c <MX_GPIO_Init+0x174>)
 8000530:	f004 f80c 	bl	800454c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000534:	2304      	movs	r3, #4
 8000536:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000538:	2303      	movs	r3, #3
 800053a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800053c:	f107 0310 	add.w	r3, r7, #16
 8000540:	4619      	mov	r1, r3
 8000542:	4808      	ldr	r0, [pc, #32]	; (8000564 <MX_GPIO_Init+0x17c>)
 8000544:	f004 f802 	bl	800454c <HAL_GPIO_Init>

}
 8000548:	bf00      	nop
 800054a:	3720      	adds	r7, #32
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40021000 	.word	0x40021000
 8000554:	40010800 	.word	0x40010800
 8000558:	40010c00 	.word	0x40010c00
 800055c:	40011000 	.word	0x40011000
 8000560:	10210000 	.word	0x10210000
 8000564:	40011400 	.word	0x40011400

08000568 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f002 fa76 	bl	8002a5c <HAL_Init>

  /* USER CODE BEGIN Init */
  Dist_Obst = 0;
 8000570:	4b2f      	ldr	r3, [pc, #188]	; (8000630 <main+0xc8>)
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000576:	f000 f871 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057a:	f7ff ff35 	bl	80003e8 <MX_GPIO_Init>
  MX_DMA_Init();
 800057e:	f7ff ff15 	bl	80003ac <MX_DMA_Init>
  MX_ADC1_Init();
 8000582:	f7ff fe09 	bl	8000198 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000586:	f001 ff9b 	bl	80024c0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800058a:	f002 f813 	bl	80025b4 <MX_TIM3_Init>
  MX_TIM4_Init();
 800058e:	f002 f861 	bl	8002654 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8000592:	f002 f9b3 	bl	80028fc <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000596:	f001 feb7 	bl	8002308 <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800059a:	f000 f8c1 	bl	8000720 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  	HAL_SuspendTick(); // suppresion des Tick interrupt pour le mode sleep.
 800059e:	f002 fabf 	bl	8002b20 <HAL_SuspendTick>

  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);  // Start PWM motor
 80005a2:	210c      	movs	r1, #12
 80005a4:	4823      	ldr	r0, [pc, #140]	; (8000634 <main+0xcc>)
 80005a6:	f005 fa7d 	bl	8005aa4 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80005aa:	2100      	movs	r1, #0
 80005ac:	4821      	ldr	r0, [pc, #132]	; (8000634 <main+0xcc>)
 80005ae:	f005 fa79 	bl	8005aa4 <HAL_TIM_PWM_Start>
  	CMDE = STOP;
 80005b2:	4b21      	ldr	r3, [pc, #132]	; (8000638 <main+0xd0>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
  	New_CMDE = 1;
 80005b8:	4b20      	ldr	r3, [pc, #128]	; (800063c <main+0xd4>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	701a      	strb	r2, [r3, #0]
  	HAL_TIM_Base_Start_IT(&htim2);  // Start IT sur font montant PWM
 80005be:	481d      	ldr	r0, [pc, #116]	; (8000634 <main+0xcc>)
 80005c0:	f005 f9a6 	bl	8005910 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80005c4:	2118      	movs	r1, #24
 80005c6:	481e      	ldr	r0, [pc, #120]	; (8000640 <main+0xd8>)
 80005c8:	f005 fe3c 	bl	8006244 <HAL_TIM_Encoder_Start>
  	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80005cc:	2118      	movs	r1, #24
 80005ce:	481d      	ldr	r0, [pc, #116]	; (8000644 <main+0xdc>)
 80005d0:	f005 fe38 	bl	8006244 <HAL_TIM_Encoder_Start>
  	HAL_UART_Receive_IT(&huart3, &BLUE_RX, 1);
 80005d4:	2201      	movs	r2, #1
 80005d6:	491c      	ldr	r1, [pc, #112]	; (8000648 <main+0xe0>)
 80005d8:	481c      	ldr	r0, [pc, #112]	; (800064c <main+0xe4>)
 80005da:	f008 f811 	bl	8008600 <HAL_UART_Receive_IT>

  	HAL_ADC_Start_IT(&hadc1);
 80005de:	481c      	ldr	r0, [pc, #112]	; (8000650 <main+0xe8>)
 80005e0:	f002 fc16 	bl	8002e10 <HAL_ADC_Start_IT>
  	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1); // start interrupt TIM1 sur channel 1
 80005e4:	2100      	movs	r1, #0
 80005e6:	481b      	ldr	r0, [pc, #108]	; (8000654 <main+0xec>)
 80005e8:	f005 fc00 	bl	8005dec <HAL_TIM_IC_Start_IT>
  	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2); // start interrupt TIM1 sur channel 2 - sonar
 80005ec:	2104      	movs	r1, #4
 80005ee:	4819      	ldr	r0, [pc, #100]	; (8000654 <main+0xec>)
 80005f0:	f005 fbfc 	bl	8005dec <HAL_TIM_IC_Start_IT>
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);  //mettre trig_sonar en marchant
 80005f4:	2201      	movs	r2, #1
 80005f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005fa:	4817      	ldr	r0, [pc, #92]	; (8000658 <main+0xf0>)
 80005fc:	f004 f9da 	bl	80049b4 <HAL_GPIO_WritePin>
  	HAL_TIM_Base_Start_IT(&htim1);
 8000600:	4814      	ldr	r0, [pc, #80]	; (8000654 <main+0xec>)
 8000602:	f005 f985 	bl	8005910 <HAL_TIM_Base_Start_IT>

  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); //lancement de PWM servo moteur
 8000606:	210c      	movs	r1, #12
 8000608:	4812      	ldr	r0, [pc, #72]	; (8000654 <main+0xec>)
 800060a:	f005 fa4b 	bl	8005aa4 <HAL_TIM_PWM_Start>

  	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 2300);
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <main+0xec>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	3334      	adds	r3, #52	; 0x34
 8000614:	330c      	adds	r3, #12
 8000616:	f640 02fc 	movw	r2, #2300	; 0x8fc
 800061a:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	HAL_MOV_SERVO();
 800061c:	f001 fd98 	bl	8002150 <HAL_MOV_SERVO>


  while (1)
  {
	  Gestion_Commandes();
 8000620:	f000 f892 	bl	8000748 <Gestion_Commandes>
	  controle();
 8000624:	f000 fdaa 	bl	800117c <controle>
	  addon();
 8000628:	f001 fb64 	bl	8001cf4 <addon>
	  Gestion_Commandes();
 800062c:	e7f8      	b.n	8000620 <main+0xb8>
 800062e:	bf00      	nop
 8000630:	2000016c 	.word	0x2000016c
 8000634:	200002f8 	.word	0x200002f8
 8000638:	20000164 	.word	0x20000164
 800063c:	20000090 	.word	0x20000090
 8000640:	20000278 	.word	0x20000278
 8000644:	20000238 	.word	0x20000238
 8000648:	2000022c 	.word	0x2000022c
 800064c:	20000338 	.word	0x20000338
 8000650:	200000f0 	.word	0x200000f0
 8000654:	200002b8 	.word	0x200002b8
 8000658:	40010c00 	.word	0x40010c00

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	; 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000662:	2302      	movs	r3, #2
 8000664:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000666:	2301      	movs	r3, #1
 8000668:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800066a:	2310      	movs	r3, #16
 800066c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000672:	2300      	movs	r3, #0
 8000674:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000676:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800067a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000680:	4618      	mov	r0, r3
 8000682:	f004 fa09 	bl	8004a98 <HAL_RCC_OscConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d003      	beq.n	8000694 <SystemClock_Config+0x38>
  {
    _Error_Handler(__FILE__, __LINE__);
 800068c:	21fd      	movs	r1, #253	; 0xfd
 800068e:	4822      	ldr	r0, [pc, #136]	; (8000718 <SystemClock_Config+0xbc>)
 8000690:	f001 fd96 	bl	80021c0 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000698:	2302      	movs	r3, #2
 800069a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006a4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	2102      	movs	r1, #2
 80006b0:	4618      	mov	r0, r3
 80006b2:	f004 fd4d 	bl	8005150 <HAL_RCC_ClockConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d004      	beq.n	80006c6 <SystemClock_Config+0x6a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80006bc:	f240 110b 	movw	r1, #267	; 0x10b
 80006c0:	4815      	ldr	r0, [pc, #84]	; (8000718 <SystemClock_Config+0xbc>)
 80006c2:	f001 fd7d 	bl	80021c0 <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006c6:	2302      	movs	r3, #2
 80006c8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80006ca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80006ce:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	4618      	mov	r0, r3
 80006d4:	f004 ff90 	bl	80055f8 <HAL_RCCEx_PeriphCLKConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d004      	beq.n	80006e8 <SystemClock_Config+0x8c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80006de:	f44f 7189 	mov.w	r1, #274	; 0x112
 80006e2:	480d      	ldr	r0, [pc, #52]	; (8000718 <SystemClock_Config+0xbc>)
 80006e4:	f001 fd6c 	bl	80021c0 <_Error_Handler>
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80006e8:	f004 ff36 	bl	8005558 <HAL_RCC_GetHCLKFreq>
 80006ec:	4602      	mov	r2, r0
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <SystemClock_Config+0xc0>)
 80006f0:	fba3 2302 	umull	r2, r3, r3, r2
 80006f4:	099b      	lsrs	r3, r3, #6
 80006f6:	4618      	mov	r0, r3
 80006f8:	f003 fb86 	bl	8003e08 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80006fc:	2004      	movs	r0, #4
 80006fe:	f003 fb8f 	bl	8003e20 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	2100      	movs	r1, #0
 8000706:	f04f 30ff 	mov.w	r0, #4294967295
 800070a:	f003 fb39 	bl	8003d80 <HAL_NVIC_SetPriority>
}
 800070e:	bf00      	nop
 8000710:	3750      	adds	r7, #80	; 0x50
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	08009748 	.word	0x08009748
 800071c:	10624dd3 	.word	0x10624dd3

08000720 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000724:	2200      	movs	r2, #0
 8000726:	2100      	movs	r1, #0
 8000728:	2028      	movs	r0, #40	; 0x28
 800072a:	f003 fb29 	bl	8003d80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800072e:	2028      	movs	r0, #40	; 0x28
 8000730:	f003 fb52 	bl	8003dd8 <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000734:	2200      	movs	r2, #0
 8000736:	2100      	movs	r1, #0
 8000738:	2027      	movs	r0, #39	; 0x27
 800073a:	f003 fb21 	bl	8003d80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 800073e:	2027      	movs	r0, #39	; 0x27
 8000740:	f003 fb4a 	bl	8003dd8 <HAL_NVIC_EnableIRQ>
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}

08000748 <Gestion_Commandes>:

/* USER CODE BEGIN 4 */
void Gestion_Commandes(void) {
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
		GV2,
		GV3
	};
	static enum ETAT Etat = VEILLE;

if (New_CMDE) {
 800074c:	4ba4      	ldr	r3, [pc, #656]	; (80009e0 <Gestion_Commandes+0x298>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	b2db      	uxtb	r3, r3
 8000752:	2b00      	cmp	r3, #0
 8000754:	f000 8501 	beq.w	800115a <Gestion_Commandes+0xa12>
		New_CMDE = 0;
 8000758:	4ba1      	ldr	r3, [pc, #644]	; (80009e0 <Gestion_Commandes+0x298>)
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]
	switch (CMDE) {
 800075e:	4ba1      	ldr	r3, [pc, #644]	; (80009e4 <Gestion_Commandes+0x29c>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	b2db      	uxtb	r3, r3
 8000764:	2b07      	cmp	r3, #7
 8000766:	f200 84f8 	bhi.w	800115a <Gestion_Commandes+0xa12>
 800076a:	a201      	add	r2, pc, #4	; (adr r2, 8000770 <Gestion_Commandes+0x28>)
 800076c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000770:	080007af 	.word	0x080007af
 8000774:	08000791 	.word	0x08000791
 8000778:	080007bf 	.word	0x080007bf
 800077c:	08000a29 	.word	0x08000a29
 8000780:	08000c89 	.word	0x08000c89
 8000784:	08000ecf 	.word	0x08000ecf
 8000788:	08001131 	.word	0x08001131
 800078c:	0800113f 	.word	0x0800113f
		case STOP: {
			_CVitD = _CVitG = 0;
 8000790:	4b95      	ldr	r3, [pc, #596]	; (80009e8 <Gestion_Commandes+0x2a0>)
 8000792:	2200      	movs	r2, #0
 8000794:	801a      	strh	r2, [r3, #0]
 8000796:	4b94      	ldr	r3, [pc, #592]	; (80009e8 <Gestion_Commandes+0x2a0>)
 8000798:	881a      	ldrh	r2, [r3, #0]
 800079a:	4b94      	ldr	r3, [pc, #592]	; (80009ec <Gestion_Commandes+0x2a4>)
 800079c:	801a      	strh	r2, [r3, #0]
			// Mise en sommeil: STOP mode , r�veil via IT BP1
			Etat = VEILLE;
 800079e:	4b94      	ldr	r3, [pc, #592]	; (80009f0 <Gestion_Commandes+0x2a8>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]
			Mode = SLEEP;
 80007a4:	4b93      	ldr	r3, [pc, #588]	; (80009f4 <Gestion_Commandes+0x2ac>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	701a      	strb	r2, [r3, #0]

			break;
 80007aa:	f000 bcd6 	b.w	800115a <Gestion_Commandes+0xa12>
		}
		case START: {
			// r�veil syt�me grace � l'IT BP1
			Etat = ARRET;
 80007ae:	4b90      	ldr	r3, [pc, #576]	; (80009f0 <Gestion_Commandes+0x2a8>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	701a      	strb	r2, [r3, #0]
			Mode = SLEEP;
 80007b4:	4b8f      	ldr	r3, [pc, #572]	; (80009f4 <Gestion_Commandes+0x2ac>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	701a      	strb	r2, [r3, #0]

			break;
 80007ba:	f000 bcce 	b.w	800115a <Gestion_Commandes+0xa12>
		}
		case AVANT: {
			switch (Etat) {
 80007be:	4b8c      	ldr	r3, [pc, #560]	; (80009f0 <Gestion_Commandes+0x2a8>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b0d      	cmp	r3, #13
 80007c4:	f200 84c2 	bhi.w	800114c <Gestion_Commandes+0xa04>
 80007c8:	a201      	add	r2, pc, #4	; (adr r2, 80007d0 <Gestion_Commandes+0x88>)
 80007ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ce:	bf00      	nop
 80007d0:	08000809 	.word	0x08000809
 80007d4:	08000817 	.word	0x08000817
 80007d8:	0800083d 	.word	0x0800083d
 80007dc:	08000863 	.word	0x08000863
 80007e0:	08000889 	.word	0x08000889
 80007e4:	080008af 	.word	0x080008af
 80007e8:	080008d5 	.word	0x080008d5
 80007ec:	080008fb 	.word	0x080008fb
 80007f0:	08000921 	.word	0x08000921
 80007f4:	08000947 	.word	0x08000947
 80007f8:	0800096d 	.word	0x0800096d
 80007fc:	08000993 	.word	0x08000993
 8000800:	080009b9 	.word	0x080009b9
 8000804:	08000a01 	.word	0x08000a01
			case VEILLE: {
				Etat = VEILLE;
 8000808:	4b79      	ldr	r3, [pc, #484]	; (80009f0 <Gestion_Commandes+0x2a8>)
 800080a:	2200      	movs	r2, #0
 800080c:	701a      	strb	r2, [r3, #0]
				Mode = SLEEP;
 800080e:	4b79      	ldr	r3, [pc, #484]	; (80009f4 <Gestion_Commandes+0x2ac>)
 8000810:	2200      	movs	r2, #0
 8000812:	701a      	strb	r2, [r3, #0]
				break;
 8000814:	e107      	b.n	8000a26 <Gestion_Commandes+0x2de>
			}
			case ARRET: {
				_DirG = AVANCE;
 8000816:	4b78      	ldr	r3, [pc, #480]	; (80009f8 <Gestion_Commandes+0x2b0>)
 8000818:	2201      	movs	r2, #1
 800081a:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 800081c:	4b77      	ldr	r3, [pc, #476]	; (80009fc <Gestion_Commandes+0x2b4>)
 800081e:	2201      	movs	r2, #1
 8000820:	801a      	strh	r2, [r3, #0]
				_CVitG = V1;
 8000822:	4b71      	ldr	r3, [pc, #452]	; (80009e8 <Gestion_Commandes+0x2a0>)
 8000824:	2226      	movs	r2, #38	; 0x26
 8000826:	801a      	strh	r2, [r3, #0]
				_CVitD = V1;
 8000828:	4b70      	ldr	r3, [pc, #448]	; (80009ec <Gestion_Commandes+0x2a4>)
 800082a:	2226      	movs	r2, #38	; 0x26
 800082c:	801a      	strh	r2, [r3, #0]
				Etat = AV1;
 800082e:	4b70      	ldr	r3, [pc, #448]	; (80009f0 <Gestion_Commandes+0x2a8>)
 8000830:	2202      	movs	r2, #2
 8000832:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000834:	4b6f      	ldr	r3, [pc, #444]	; (80009f4 <Gestion_Commandes+0x2ac>)
 8000836:	2201      	movs	r2, #1
 8000838:	701a      	strb	r2, [r3, #0]
				break;
 800083a:	e0f4      	b.n	8000a26 <Gestion_Commandes+0x2de>
			}
			case AV1: {
				_DirG = AVANCE;
 800083c:	4b6e      	ldr	r3, [pc, #440]	; (80009f8 <Gestion_Commandes+0x2b0>)
 800083e:	2201      	movs	r2, #1
 8000840:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 8000842:	4b6e      	ldr	r3, [pc, #440]	; (80009fc <Gestion_Commandes+0x2b4>)
 8000844:	2201      	movs	r2, #1
 8000846:	801a      	strh	r2, [r3, #0]
				_CVitG = V2;
 8000848:	4b67      	ldr	r3, [pc, #412]	; (80009e8 <Gestion_Commandes+0x2a0>)
 800084a:	2238      	movs	r2, #56	; 0x38
 800084c:	801a      	strh	r2, [r3, #0]
				_CVitD = V2;
 800084e:	4b67      	ldr	r3, [pc, #412]	; (80009ec <Gestion_Commandes+0x2a4>)
 8000850:	2238      	movs	r2, #56	; 0x38
 8000852:	801a      	strh	r2, [r3, #0]
				Etat = AV2;
 8000854:	4b66      	ldr	r3, [pc, #408]	; (80009f0 <Gestion_Commandes+0x2a8>)
 8000856:	2203      	movs	r2, #3
 8000858:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 800085a:	4b66      	ldr	r3, [pc, #408]	; (80009f4 <Gestion_Commandes+0x2ac>)
 800085c:	2201      	movs	r2, #1
 800085e:	701a      	strb	r2, [r3, #0]
				break;
 8000860:	e0e1      	b.n	8000a26 <Gestion_Commandes+0x2de>
			}
			case AV2: {
				_DirG = AVANCE;
 8000862:	4b65      	ldr	r3, [pc, #404]	; (80009f8 <Gestion_Commandes+0x2b0>)
 8000864:	2201      	movs	r2, #1
 8000866:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 8000868:	4b64      	ldr	r3, [pc, #400]	; (80009fc <Gestion_Commandes+0x2b4>)
 800086a:	2201      	movs	r2, #1
 800086c:	801a      	strh	r2, [r3, #0]
				_CVitG = V3;
 800086e:	4b5e      	ldr	r3, [pc, #376]	; (80009e8 <Gestion_Commandes+0x2a0>)
 8000870:	224c      	movs	r2, #76	; 0x4c
 8000872:	801a      	strh	r2, [r3, #0]
				_CVitD = V3 ;
 8000874:	4b5d      	ldr	r3, [pc, #372]	; (80009ec <Gestion_Commandes+0x2a4>)
 8000876:	224c      	movs	r2, #76	; 0x4c
 8000878:	801a      	strh	r2, [r3, #0]
				Etat = AV3;
 800087a:	4b5d      	ldr	r3, [pc, #372]	; (80009f0 <Gestion_Commandes+0x2a8>)
 800087c:	2204      	movs	r2, #4
 800087e:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000880:	4b5c      	ldr	r3, [pc, #368]	; (80009f4 <Gestion_Commandes+0x2ac>)
 8000882:	2201      	movs	r2, #1
 8000884:	701a      	strb	r2, [r3, #0]
				break;
 8000886:	e0ce      	b.n	8000a26 <Gestion_Commandes+0x2de>
			}
			case AV3: {
				_DirG = AVANCE;
 8000888:	4b5b      	ldr	r3, [pc, #364]	; (80009f8 <Gestion_Commandes+0x2b0>)
 800088a:	2201      	movs	r2, #1
 800088c:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 800088e:	4b5b      	ldr	r3, [pc, #364]	; (80009fc <Gestion_Commandes+0x2b4>)
 8000890:	2201      	movs	r2, #1
 8000892:	801a      	strh	r2, [r3, #0]
				_CVitG = V3;
 8000894:	4b54      	ldr	r3, [pc, #336]	; (80009e8 <Gestion_Commandes+0x2a0>)
 8000896:	224c      	movs	r2, #76	; 0x4c
 8000898:	801a      	strh	r2, [r3, #0]
				_CVitD = V3 ;
 800089a:	4b54      	ldr	r3, [pc, #336]	; (80009ec <Gestion_Commandes+0x2a4>)
 800089c:	224c      	movs	r2, #76	; 0x4c
 800089e:	801a      	strh	r2, [r3, #0]
				Etat = AV3;
 80008a0:	4b53      	ldr	r3, [pc, #332]	; (80009f0 <Gestion_Commandes+0x2a8>)
 80008a2:	2204      	movs	r2, #4
 80008a4:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 80008a6:	4b53      	ldr	r3, [pc, #332]	; (80009f4 <Gestion_Commandes+0x2ac>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	701a      	strb	r2, [r3, #0]
				break;
 80008ac:	e0bb      	b.n	8000a26 <Gestion_Commandes+0x2de>
			}
			case RV1: {
				_DirG = RECULE;
 80008ae:	4b52      	ldr	r3, [pc, #328]	; (80009f8 <Gestion_Commandes+0x2b0>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 80008b4:	4b51      	ldr	r3, [pc, #324]	; (80009fc <Gestion_Commandes+0x2b4>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	801a      	strh	r2, [r3, #0]
				_CVitG = 0;
 80008ba:	4b4b      	ldr	r3, [pc, #300]	; (80009e8 <Gestion_Commandes+0x2a0>)
 80008bc:	2200      	movs	r2, #0
 80008be:	801a      	strh	r2, [r3, #0]
				_CVitD = 0;
 80008c0:	4b4a      	ldr	r3, [pc, #296]	; (80009ec <Gestion_Commandes+0x2a4>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	801a      	strh	r2, [r3, #0]
				Etat = ARRET;
 80008c6:	4b4a      	ldr	r3, [pc, #296]	; (80009f0 <Gestion_Commandes+0x2a8>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	701a      	strb	r2, [r3, #0]
				Mode = SLEEP;
 80008cc:	4b49      	ldr	r3, [pc, #292]	; (80009f4 <Gestion_Commandes+0x2ac>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	701a      	strb	r2, [r3, #0]

				break;
 80008d2:	e0a8      	b.n	8000a26 <Gestion_Commandes+0x2de>
			}
			case RV2: {
				_DirG = RECULE;
 80008d4:	4b48      	ldr	r3, [pc, #288]	; (80009f8 <Gestion_Commandes+0x2b0>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 80008da:	4b48      	ldr	r3, [pc, #288]	; (80009fc <Gestion_Commandes+0x2b4>)
 80008dc:	2200      	movs	r2, #0
 80008de:	801a      	strh	r2, [r3, #0]
				_CVitG = V1;
 80008e0:	4b41      	ldr	r3, [pc, #260]	; (80009e8 <Gestion_Commandes+0x2a0>)
 80008e2:	2226      	movs	r2, #38	; 0x26
 80008e4:	801a      	strh	r2, [r3, #0]
				_CVitD = V1;
 80008e6:	4b41      	ldr	r3, [pc, #260]	; (80009ec <Gestion_Commandes+0x2a4>)
 80008e8:	2226      	movs	r2, #38	; 0x26
 80008ea:	801a      	strh	r2, [r3, #0]
				Etat = RV1;
 80008ec:	4b40      	ldr	r3, [pc, #256]	; (80009f0 <Gestion_Commandes+0x2a8>)
 80008ee:	2205      	movs	r2, #5
 80008f0:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 80008f2:	4b40      	ldr	r3, [pc, #256]	; (80009f4 <Gestion_Commandes+0x2ac>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	701a      	strb	r2, [r3, #0]
				break;
 80008f8:	e095      	b.n	8000a26 <Gestion_Commandes+0x2de>
			}
			case RV3: {
				_DirG = RECULE;
 80008fa:	4b3f      	ldr	r3, [pc, #252]	; (80009f8 <Gestion_Commandes+0x2b0>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000900:	4b3e      	ldr	r3, [pc, #248]	; (80009fc <Gestion_Commandes+0x2b4>)
 8000902:	2200      	movs	r2, #0
 8000904:	801a      	strh	r2, [r3, #0]
				_CVitG = V2;
 8000906:	4b38      	ldr	r3, [pc, #224]	; (80009e8 <Gestion_Commandes+0x2a0>)
 8000908:	2238      	movs	r2, #56	; 0x38
 800090a:	801a      	strh	r2, [r3, #0]
				_CVitD = V2;
 800090c:	4b37      	ldr	r3, [pc, #220]	; (80009ec <Gestion_Commandes+0x2a4>)
 800090e:	2238      	movs	r2, #56	; 0x38
 8000910:	801a      	strh	r2, [r3, #0]
				Etat = RV2;
 8000912:	4b37      	ldr	r3, [pc, #220]	; (80009f0 <Gestion_Commandes+0x2a8>)
 8000914:	2206      	movs	r2, #6
 8000916:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000918:	4b36      	ldr	r3, [pc, #216]	; (80009f4 <Gestion_Commandes+0x2ac>)
 800091a:	2201      	movs	r2, #1
 800091c:	701a      	strb	r2, [r3, #0]
				break;
 800091e:	e082      	b.n	8000a26 <Gestion_Commandes+0x2de>
			}
			case DV1: {
				_DirG = AVANCE;
 8000920:	4b35      	ldr	r3, [pc, #212]	; (80009f8 <Gestion_Commandes+0x2b0>)
 8000922:	2201      	movs	r2, #1
 8000924:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 8000926:	4b35      	ldr	r3, [pc, #212]	; (80009fc <Gestion_Commandes+0x2b4>)
 8000928:	2201      	movs	r2, #1
 800092a:	801a      	strh	r2, [r3, #0]
				_CVitG = V1;
 800092c:	4b2e      	ldr	r3, [pc, #184]	; (80009e8 <Gestion_Commandes+0x2a0>)
 800092e:	2226      	movs	r2, #38	; 0x26
 8000930:	801a      	strh	r2, [r3, #0]
				_CVitD = V1;
 8000932:	4b2e      	ldr	r3, [pc, #184]	; (80009ec <Gestion_Commandes+0x2a4>)
 8000934:	2226      	movs	r2, #38	; 0x26
 8000936:	801a      	strh	r2, [r3, #0]
				Etat = AV1;
 8000938:	4b2d      	ldr	r3, [pc, #180]	; (80009f0 <Gestion_Commandes+0x2a8>)
 800093a:	2202      	movs	r2, #2
 800093c:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 800093e:	4b2d      	ldr	r3, [pc, #180]	; (80009f4 <Gestion_Commandes+0x2ac>)
 8000940:	2201      	movs	r2, #1
 8000942:	701a      	strb	r2, [r3, #0]
				break;
 8000944:	e06f      	b.n	8000a26 <Gestion_Commandes+0x2de>
			}
			case DV2: {
				_DirG = AVANCE;
 8000946:	4b2c      	ldr	r3, [pc, #176]	; (80009f8 <Gestion_Commandes+0x2b0>)
 8000948:	2201      	movs	r2, #1
 800094a:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 800094c:	4b2b      	ldr	r3, [pc, #172]	; (80009fc <Gestion_Commandes+0x2b4>)
 800094e:	2201      	movs	r2, #1
 8000950:	801a      	strh	r2, [r3, #0]
				_CVitG = V2;
 8000952:	4b25      	ldr	r3, [pc, #148]	; (80009e8 <Gestion_Commandes+0x2a0>)
 8000954:	2238      	movs	r2, #56	; 0x38
 8000956:	801a      	strh	r2, [r3, #0]
				_CVitD = V2;
 8000958:	4b24      	ldr	r3, [pc, #144]	; (80009ec <Gestion_Commandes+0x2a4>)
 800095a:	2238      	movs	r2, #56	; 0x38
 800095c:	801a      	strh	r2, [r3, #0]
				Etat = AV2;
 800095e:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <Gestion_Commandes+0x2a8>)
 8000960:	2203      	movs	r2, #3
 8000962:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000964:	4b23      	ldr	r3, [pc, #140]	; (80009f4 <Gestion_Commandes+0x2ac>)
 8000966:	2201      	movs	r2, #1
 8000968:	701a      	strb	r2, [r3, #0]
				break;
 800096a:	e05c      	b.n	8000a26 <Gestion_Commandes+0x2de>
			}
			case DV3: {
				_DirG = AVANCE;
 800096c:	4b22      	ldr	r3, [pc, #136]	; (80009f8 <Gestion_Commandes+0x2b0>)
 800096e:	2201      	movs	r2, #1
 8000970:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 8000972:	4b22      	ldr	r3, [pc, #136]	; (80009fc <Gestion_Commandes+0x2b4>)
 8000974:	2201      	movs	r2, #1
 8000976:	801a      	strh	r2, [r3, #0]
				_CVitG = V3;
 8000978:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <Gestion_Commandes+0x2a0>)
 800097a:	224c      	movs	r2, #76	; 0x4c
 800097c:	801a      	strh	r2, [r3, #0]
				_CVitD = V3;
 800097e:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <Gestion_Commandes+0x2a4>)
 8000980:	224c      	movs	r2, #76	; 0x4c
 8000982:	801a      	strh	r2, [r3, #0]
				Etat = AV3;
 8000984:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <Gestion_Commandes+0x2a8>)
 8000986:	2204      	movs	r2, #4
 8000988:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 800098a:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <Gestion_Commandes+0x2ac>)
 800098c:	2201      	movs	r2, #1
 800098e:	701a      	strb	r2, [r3, #0]
				break;
 8000990:	e049      	b.n	8000a26 <Gestion_Commandes+0x2de>
			}
			case GV1: {
				_DirG = AVANCE;
 8000992:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <Gestion_Commandes+0x2b0>)
 8000994:	2201      	movs	r2, #1
 8000996:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 8000998:	4b18      	ldr	r3, [pc, #96]	; (80009fc <Gestion_Commandes+0x2b4>)
 800099a:	2201      	movs	r2, #1
 800099c:	801a      	strh	r2, [r3, #0]
				_CVitG = V1;
 800099e:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <Gestion_Commandes+0x2a0>)
 80009a0:	2226      	movs	r2, #38	; 0x26
 80009a2:	801a      	strh	r2, [r3, #0]
				_CVitD = V1;
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <Gestion_Commandes+0x2a4>)
 80009a6:	2226      	movs	r2, #38	; 0x26
 80009a8:	801a      	strh	r2, [r3, #0]
				Etat = AV2;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <Gestion_Commandes+0x2a8>)
 80009ac:	2203      	movs	r2, #3
 80009ae:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 80009b0:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <Gestion_Commandes+0x2ac>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	701a      	strb	r2, [r3, #0]
				break;
 80009b6:	e036      	b.n	8000a26 <Gestion_Commandes+0x2de>
			}
			case GV2: {
				_DirG = AVANCE;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <Gestion_Commandes+0x2b0>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <Gestion_Commandes+0x2b4>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	801a      	strh	r2, [r3, #0]
				_CVitG = V2;
 80009c4:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <Gestion_Commandes+0x2a0>)
 80009c6:	2238      	movs	r2, #56	; 0x38
 80009c8:	801a      	strh	r2, [r3, #0]
				_CVitD = V2;
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <Gestion_Commandes+0x2a4>)
 80009cc:	2238      	movs	r2, #56	; 0x38
 80009ce:	801a      	strh	r2, [r3, #0]
				Etat = AV2;
 80009d0:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <Gestion_Commandes+0x2a8>)
 80009d2:	2203      	movs	r2, #3
 80009d4:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 80009d6:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <Gestion_Commandes+0x2ac>)
 80009d8:	2201      	movs	r2, #1
 80009da:	701a      	strb	r2, [r3, #0]
				break;
 80009dc:	e023      	b.n	8000a26 <Gestion_Commandes+0x2de>
 80009de:	bf00      	nop
 80009e0:	20000090 	.word	0x20000090
 80009e4:	20000164 	.word	0x20000164
 80009e8:	200001f2 	.word	0x200001f2
 80009ec:	20000168 	.word	0x20000168
 80009f0:	200000bc 	.word	0x200000bc
 80009f4:	200001f0 	.word	0x200001f0
 80009f8:	20000200 	.word	0x20000200
 80009fc:	20000170 	.word	0x20000170
			}
			case GV3: {
				_DirG = AVANCE;
 8000a00:	4b9b      	ldr	r3, [pc, #620]	; (8000c70 <Gestion_Commandes+0x528>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 8000a06:	4b9b      	ldr	r3, [pc, #620]	; (8000c74 <Gestion_Commandes+0x52c>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	801a      	strh	r2, [r3, #0]
				_CVitG = V3;
 8000a0c:	4b9a      	ldr	r3, [pc, #616]	; (8000c78 <Gestion_Commandes+0x530>)
 8000a0e:	224c      	movs	r2, #76	; 0x4c
 8000a10:	801a      	strh	r2, [r3, #0]
				_CVitD = V3;
 8000a12:	4b9a      	ldr	r3, [pc, #616]	; (8000c7c <Gestion_Commandes+0x534>)
 8000a14:	224c      	movs	r2, #76	; 0x4c
 8000a16:	801a      	strh	r2, [r3, #0]
				Etat = AV3;
 8000a18:	4b99      	ldr	r3, [pc, #612]	; (8000c80 <Gestion_Commandes+0x538>)
 8000a1a:	2204      	movs	r2, #4
 8000a1c:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000a1e:	4b99      	ldr	r3, [pc, #612]	; (8000c84 <Gestion_Commandes+0x53c>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	701a      	strb	r2, [r3, #0]
				break;
 8000a24:	bf00      	nop
			}
			}
			break;
 8000a26:	e391      	b.n	800114c <Gestion_Commandes+0xa04>
		}
		case ARRIERE: {
			switch (Etat) {
 8000a28:	4b95      	ldr	r3, [pc, #596]	; (8000c80 <Gestion_Commandes+0x538>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b0d      	cmp	r3, #13
 8000a2e:	f200 838f 	bhi.w	8001150 <Gestion_Commandes+0xa08>
 8000a32:	a201      	add	r2, pc, #4	; (adr r2, 8000a38 <Gestion_Commandes+0x2f0>)
 8000a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a38:	08000a71 	.word	0x08000a71
 8000a3c:	08000a7f 	.word	0x08000a7f
 8000a40:	08000aa5 	.word	0x08000aa5
 8000a44:	08000acb 	.word	0x08000acb
 8000a48:	08000af1 	.word	0x08000af1
 8000a4c:	08000b17 	.word	0x08000b17
 8000a50:	08000b3d 	.word	0x08000b3d
 8000a54:	08000b63 	.word	0x08000b63
 8000a58:	08000b89 	.word	0x08000b89
 8000a5c:	08000baf 	.word	0x08000baf
 8000a60:	08000bd5 	.word	0x08000bd5
 8000a64:	08000bfb 	.word	0x08000bfb
 8000a68:	08000c21 	.word	0x08000c21
 8000a6c:	08000c47 	.word	0x08000c47
			case VEILLE: {
				Etat = VEILLE;
 8000a70:	4b83      	ldr	r3, [pc, #524]	; (8000c80 <Gestion_Commandes+0x538>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	701a      	strb	r2, [r3, #0]
				Mode = SLEEP;
 8000a76:	4b83      	ldr	r3, [pc, #524]	; (8000c84 <Gestion_Commandes+0x53c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
				break;
 8000a7c:	e0f6      	b.n	8000c6c <Gestion_Commandes+0x524>
			}
			case ARRET: {
				_DirG = RECULE;
 8000a7e:	4b7c      	ldr	r3, [pc, #496]	; (8000c70 <Gestion_Commandes+0x528>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000a84:	4b7b      	ldr	r3, [pc, #492]	; (8000c74 <Gestion_Commandes+0x52c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	801a      	strh	r2, [r3, #0]
				_CVitG = V1;
 8000a8a:	4b7b      	ldr	r3, [pc, #492]	; (8000c78 <Gestion_Commandes+0x530>)
 8000a8c:	2226      	movs	r2, #38	; 0x26
 8000a8e:	801a      	strh	r2, [r3, #0]
				_CVitD = V1;
 8000a90:	4b7a      	ldr	r3, [pc, #488]	; (8000c7c <Gestion_Commandes+0x534>)
 8000a92:	2226      	movs	r2, #38	; 0x26
 8000a94:	801a      	strh	r2, [r3, #0]
				Etat = RV1;
 8000a96:	4b7a      	ldr	r3, [pc, #488]	; (8000c80 <Gestion_Commandes+0x538>)
 8000a98:	2205      	movs	r2, #5
 8000a9a:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000a9c:	4b79      	ldr	r3, [pc, #484]	; (8000c84 <Gestion_Commandes+0x53c>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	701a      	strb	r2, [r3, #0]
				break;
 8000aa2:	e0e3      	b.n	8000c6c <Gestion_Commandes+0x524>
			}
			case AV1: {
				_DirG = AVANCE;
 8000aa4:	4b72      	ldr	r3, [pc, #456]	; (8000c70 <Gestion_Commandes+0x528>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 8000aaa:	4b72      	ldr	r3, [pc, #456]	; (8000c74 <Gestion_Commandes+0x52c>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	801a      	strh	r2, [r3, #0]
				_CVitG = 0;
 8000ab0:	4b71      	ldr	r3, [pc, #452]	; (8000c78 <Gestion_Commandes+0x530>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	801a      	strh	r2, [r3, #0]
				_CVitD = 0;
 8000ab6:	4b71      	ldr	r3, [pc, #452]	; (8000c7c <Gestion_Commandes+0x534>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	801a      	strh	r2, [r3, #0]
				Etat = ARRET;
 8000abc:	4b70      	ldr	r3, [pc, #448]	; (8000c80 <Gestion_Commandes+0x538>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	701a      	strb	r2, [r3, #0]
				Mode = SLEEP;
 8000ac2:	4b70      	ldr	r3, [pc, #448]	; (8000c84 <Gestion_Commandes+0x53c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	701a      	strb	r2, [r3, #0]

				break;
 8000ac8:	e0d0      	b.n	8000c6c <Gestion_Commandes+0x524>
			}
			case AV2: {
				_DirG = AVANCE;
 8000aca:	4b69      	ldr	r3, [pc, #420]	; (8000c70 <Gestion_Commandes+0x528>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 8000ad0:	4b68      	ldr	r3, [pc, #416]	; (8000c74 <Gestion_Commandes+0x52c>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	801a      	strh	r2, [r3, #0]
				_CVitG = V1;
 8000ad6:	4b68      	ldr	r3, [pc, #416]	; (8000c78 <Gestion_Commandes+0x530>)
 8000ad8:	2226      	movs	r2, #38	; 0x26
 8000ada:	801a      	strh	r2, [r3, #0]
				_CVitD = V1;
 8000adc:	4b67      	ldr	r3, [pc, #412]	; (8000c7c <Gestion_Commandes+0x534>)
 8000ade:	2226      	movs	r2, #38	; 0x26
 8000ae0:	801a      	strh	r2, [r3, #0]
				Etat = AV1;
 8000ae2:	4b67      	ldr	r3, [pc, #412]	; (8000c80 <Gestion_Commandes+0x538>)
 8000ae4:	2202      	movs	r2, #2
 8000ae6:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000ae8:	4b66      	ldr	r3, [pc, #408]	; (8000c84 <Gestion_Commandes+0x53c>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	701a      	strb	r2, [r3, #0]
				break;
 8000aee:	e0bd      	b.n	8000c6c <Gestion_Commandes+0x524>
			}
			case AV3: {
				_DirG = AVANCE;
 8000af0:	4b5f      	ldr	r3, [pc, #380]	; (8000c70 <Gestion_Commandes+0x528>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 8000af6:	4b5f      	ldr	r3, [pc, #380]	; (8000c74 <Gestion_Commandes+0x52c>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	801a      	strh	r2, [r3, #0]
				_CVitG = V2;
 8000afc:	4b5e      	ldr	r3, [pc, #376]	; (8000c78 <Gestion_Commandes+0x530>)
 8000afe:	2238      	movs	r2, #56	; 0x38
 8000b00:	801a      	strh	r2, [r3, #0]
				_CVitD = V2;
 8000b02:	4b5e      	ldr	r3, [pc, #376]	; (8000c7c <Gestion_Commandes+0x534>)
 8000b04:	2238      	movs	r2, #56	; 0x38
 8000b06:	801a      	strh	r2, [r3, #0]
				Etat = AV2;
 8000b08:	4b5d      	ldr	r3, [pc, #372]	; (8000c80 <Gestion_Commandes+0x538>)
 8000b0a:	2203      	movs	r2, #3
 8000b0c:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000b0e:	4b5d      	ldr	r3, [pc, #372]	; (8000c84 <Gestion_Commandes+0x53c>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	701a      	strb	r2, [r3, #0]
				break;
 8000b14:	e0aa      	b.n	8000c6c <Gestion_Commandes+0x524>
			}
			case RV1: {
				_DirG = RECULE;
 8000b16:	4b56      	ldr	r3, [pc, #344]	; (8000c70 <Gestion_Commandes+0x528>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000b1c:	4b55      	ldr	r3, [pc, #340]	; (8000c74 <Gestion_Commandes+0x52c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	801a      	strh	r2, [r3, #0]
				_CVitG = V2;
 8000b22:	4b55      	ldr	r3, [pc, #340]	; (8000c78 <Gestion_Commandes+0x530>)
 8000b24:	2238      	movs	r2, #56	; 0x38
 8000b26:	801a      	strh	r2, [r3, #0]
				_CVitD = V2;
 8000b28:	4b54      	ldr	r3, [pc, #336]	; (8000c7c <Gestion_Commandes+0x534>)
 8000b2a:	2238      	movs	r2, #56	; 0x38
 8000b2c:	801a      	strh	r2, [r3, #0]
				Etat = RV2;
 8000b2e:	4b54      	ldr	r3, [pc, #336]	; (8000c80 <Gestion_Commandes+0x538>)
 8000b30:	2206      	movs	r2, #6
 8000b32:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000b34:	4b53      	ldr	r3, [pc, #332]	; (8000c84 <Gestion_Commandes+0x53c>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	701a      	strb	r2, [r3, #0]
				break;
 8000b3a:	e097      	b.n	8000c6c <Gestion_Commandes+0x524>
			}
			case RV2: {
				_DirG = RECULE;
 8000b3c:	4b4c      	ldr	r3, [pc, #304]	; (8000c70 <Gestion_Commandes+0x528>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000b42:	4b4c      	ldr	r3, [pc, #304]	; (8000c74 <Gestion_Commandes+0x52c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	801a      	strh	r2, [r3, #0]
				_CVitG = V3;
 8000b48:	4b4b      	ldr	r3, [pc, #300]	; (8000c78 <Gestion_Commandes+0x530>)
 8000b4a:	224c      	movs	r2, #76	; 0x4c
 8000b4c:	801a      	strh	r2, [r3, #0]
				_CVitD = V3;
 8000b4e:	4b4b      	ldr	r3, [pc, #300]	; (8000c7c <Gestion_Commandes+0x534>)
 8000b50:	224c      	movs	r2, #76	; 0x4c
 8000b52:	801a      	strh	r2, [r3, #0]
				Etat = RV3;
 8000b54:	4b4a      	ldr	r3, [pc, #296]	; (8000c80 <Gestion_Commandes+0x538>)
 8000b56:	2207      	movs	r2, #7
 8000b58:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000b5a:	4b4a      	ldr	r3, [pc, #296]	; (8000c84 <Gestion_Commandes+0x53c>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	701a      	strb	r2, [r3, #0]
				break;
 8000b60:	e084      	b.n	8000c6c <Gestion_Commandes+0x524>
			}
			case RV3: {
				_DirG = RECULE;
 8000b62:	4b43      	ldr	r3, [pc, #268]	; (8000c70 <Gestion_Commandes+0x528>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000b68:	4b42      	ldr	r3, [pc, #264]	; (8000c74 <Gestion_Commandes+0x52c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	801a      	strh	r2, [r3, #0]
				_CVitG = V3;
 8000b6e:	4b42      	ldr	r3, [pc, #264]	; (8000c78 <Gestion_Commandes+0x530>)
 8000b70:	224c      	movs	r2, #76	; 0x4c
 8000b72:	801a      	strh	r2, [r3, #0]
				_CVitD = V3;
 8000b74:	4b41      	ldr	r3, [pc, #260]	; (8000c7c <Gestion_Commandes+0x534>)
 8000b76:	224c      	movs	r2, #76	; 0x4c
 8000b78:	801a      	strh	r2, [r3, #0]
				Etat = RV3;
 8000b7a:	4b41      	ldr	r3, [pc, #260]	; (8000c80 <Gestion_Commandes+0x538>)
 8000b7c:	2207      	movs	r2, #7
 8000b7e:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000b80:	4b40      	ldr	r3, [pc, #256]	; (8000c84 <Gestion_Commandes+0x53c>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	701a      	strb	r2, [r3, #0]
				break;
 8000b86:	e071      	b.n	8000c6c <Gestion_Commandes+0x524>
			}
			case DV1: {
				_DirG = RECULE;
 8000b88:	4b39      	ldr	r3, [pc, #228]	; (8000c70 <Gestion_Commandes+0x528>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000b8e:	4b39      	ldr	r3, [pc, #228]	; (8000c74 <Gestion_Commandes+0x52c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	801a      	strh	r2, [r3, #0]
				_CVitG = V1;
 8000b94:	4b38      	ldr	r3, [pc, #224]	; (8000c78 <Gestion_Commandes+0x530>)
 8000b96:	2226      	movs	r2, #38	; 0x26
 8000b98:	801a      	strh	r2, [r3, #0]
				_CVitD = V1;
 8000b9a:	4b38      	ldr	r3, [pc, #224]	; (8000c7c <Gestion_Commandes+0x534>)
 8000b9c:	2226      	movs	r2, #38	; 0x26
 8000b9e:	801a      	strh	r2, [r3, #0]
				Etat = RV1;
 8000ba0:	4b37      	ldr	r3, [pc, #220]	; (8000c80 <Gestion_Commandes+0x538>)
 8000ba2:	2205      	movs	r2, #5
 8000ba4:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000ba6:	4b37      	ldr	r3, [pc, #220]	; (8000c84 <Gestion_Commandes+0x53c>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	701a      	strb	r2, [r3, #0]
				break;
 8000bac:	e05e      	b.n	8000c6c <Gestion_Commandes+0x524>
			}
			case DV2: {
				_DirG = RECULE;
 8000bae:	4b30      	ldr	r3, [pc, #192]	; (8000c70 <Gestion_Commandes+0x528>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000bb4:	4b2f      	ldr	r3, [pc, #188]	; (8000c74 <Gestion_Commandes+0x52c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	801a      	strh	r2, [r3, #0]
				_CVitG = V2;
 8000bba:	4b2f      	ldr	r3, [pc, #188]	; (8000c78 <Gestion_Commandes+0x530>)
 8000bbc:	2238      	movs	r2, #56	; 0x38
 8000bbe:	801a      	strh	r2, [r3, #0]
				_CVitD = V2;
 8000bc0:	4b2e      	ldr	r3, [pc, #184]	; (8000c7c <Gestion_Commandes+0x534>)
 8000bc2:	2238      	movs	r2, #56	; 0x38
 8000bc4:	801a      	strh	r2, [r3, #0]
				Etat = RV2;
 8000bc6:	4b2e      	ldr	r3, [pc, #184]	; (8000c80 <Gestion_Commandes+0x538>)
 8000bc8:	2206      	movs	r2, #6
 8000bca:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000bcc:	4b2d      	ldr	r3, [pc, #180]	; (8000c84 <Gestion_Commandes+0x53c>)
 8000bce:	2201      	movs	r2, #1
 8000bd0:	701a      	strb	r2, [r3, #0]
				break;
 8000bd2:	e04b      	b.n	8000c6c <Gestion_Commandes+0x524>
			}
			case DV3: {
				_DirG = RECULE;
 8000bd4:	4b26      	ldr	r3, [pc, #152]	; (8000c70 <Gestion_Commandes+0x528>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000bda:	4b26      	ldr	r3, [pc, #152]	; (8000c74 <Gestion_Commandes+0x52c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	801a      	strh	r2, [r3, #0]
				_CVitG = V3;
 8000be0:	4b25      	ldr	r3, [pc, #148]	; (8000c78 <Gestion_Commandes+0x530>)
 8000be2:	224c      	movs	r2, #76	; 0x4c
 8000be4:	801a      	strh	r2, [r3, #0]
				_CVitD = V3;
 8000be6:	4b25      	ldr	r3, [pc, #148]	; (8000c7c <Gestion_Commandes+0x534>)
 8000be8:	224c      	movs	r2, #76	; 0x4c
 8000bea:	801a      	strh	r2, [r3, #0]
				Etat = RV3;
 8000bec:	4b24      	ldr	r3, [pc, #144]	; (8000c80 <Gestion_Commandes+0x538>)
 8000bee:	2207      	movs	r2, #7
 8000bf0:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000bf2:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <Gestion_Commandes+0x53c>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	701a      	strb	r2, [r3, #0]
				break;
 8000bf8:	e038      	b.n	8000c6c <Gestion_Commandes+0x524>
			}
			case GV1: {
				_DirG = RECULE;
 8000bfa:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <Gestion_Commandes+0x528>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000c00:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <Gestion_Commandes+0x52c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	801a      	strh	r2, [r3, #0]
				_CVitG = V1;
 8000c06:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <Gestion_Commandes+0x530>)
 8000c08:	2226      	movs	r2, #38	; 0x26
 8000c0a:	801a      	strh	r2, [r3, #0]
				_CVitD = V1;
 8000c0c:	4b1b      	ldr	r3, [pc, #108]	; (8000c7c <Gestion_Commandes+0x534>)
 8000c0e:	2226      	movs	r2, #38	; 0x26
 8000c10:	801a      	strh	r2, [r3, #0]
				Etat = RV1;
 8000c12:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <Gestion_Commandes+0x538>)
 8000c14:	2205      	movs	r2, #5
 8000c16:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <Gestion_Commandes+0x53c>)
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	701a      	strb	r2, [r3, #0]
				break;
 8000c1e:	e025      	b.n	8000c6c <Gestion_Commandes+0x524>
			}
			case GV2: {
				_DirG = RECULE;
 8000c20:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <Gestion_Commandes+0x528>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <Gestion_Commandes+0x52c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	801a      	strh	r2, [r3, #0]
				_CVitG = V2;
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <Gestion_Commandes+0x530>)
 8000c2e:	2238      	movs	r2, #56	; 0x38
 8000c30:	801a      	strh	r2, [r3, #0]
				_CVitD = V2;
 8000c32:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <Gestion_Commandes+0x534>)
 8000c34:	2238      	movs	r2, #56	; 0x38
 8000c36:	801a      	strh	r2, [r3, #0]
				Etat = RV2;
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <Gestion_Commandes+0x538>)
 8000c3a:	2206      	movs	r2, #6
 8000c3c:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <Gestion_Commandes+0x53c>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	701a      	strb	r2, [r3, #0]
				break;
 8000c44:	e012      	b.n	8000c6c <Gestion_Commandes+0x524>
			}
			case GV3: {
				_DirG = RECULE;
 8000c46:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <Gestion_Commandes+0x528>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000c4c:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <Gestion_Commandes+0x52c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	801a      	strh	r2, [r3, #0]
				_CVitG = V3;
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <Gestion_Commandes+0x530>)
 8000c54:	224c      	movs	r2, #76	; 0x4c
 8000c56:	801a      	strh	r2, [r3, #0]
				_CVitD = V3;
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <Gestion_Commandes+0x534>)
 8000c5a:	224c      	movs	r2, #76	; 0x4c
 8000c5c:	801a      	strh	r2, [r3, #0]
				Etat = RV3;
 8000c5e:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <Gestion_Commandes+0x538>)
 8000c60:	2207      	movs	r2, #7
 8000c62:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <Gestion_Commandes+0x53c>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	701a      	strb	r2, [r3, #0]
				break;
 8000c6a:	bf00      	nop
			}
			}
			break;
 8000c6c:	e270      	b.n	8001150 <Gestion_Commandes+0xa08>
 8000c6e:	bf00      	nop
 8000c70:	20000200 	.word	0x20000200
 8000c74:	20000170 	.word	0x20000170
 8000c78:	200001f2 	.word	0x200001f2
 8000c7c:	20000168 	.word	0x20000168
 8000c80:	200000bc 	.word	0x200000bc
 8000c84:	200001f0 	.word	0x200001f0
		}
		case DROITE: {
			switch (Etat) {
 8000c88:	4ba7      	ldr	r3, [pc, #668]	; (8000f28 <Gestion_Commandes+0x7e0>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b0d      	cmp	r3, #13
 8000c8e:	f200 8261 	bhi.w	8001154 <Gestion_Commandes+0xa0c>
 8000c92:	a201      	add	r2, pc, #4	; (adr r2, 8000c98 <Gestion_Commandes+0x550>)
 8000c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c98:	08000cd1 	.word	0x08000cd1
 8000c9c:	08000cdf 	.word	0x08000cdf
 8000ca0:	08000d05 	.word	0x08000d05
 8000ca4:	08000d2b 	.word	0x08000d2b
 8000ca8:	08000d51 	.word	0x08000d51
 8000cac:	08000d77 	.word	0x08000d77
 8000cb0:	08000d9d 	.word	0x08000d9d
 8000cb4:	08000dc3 	.word	0x08000dc3
 8000cb8:	08000de9 	.word	0x08000de9
 8000cbc:	08000e0f 	.word	0x08000e0f
 8000cc0:	08000e35 	.word	0x08000e35
 8000cc4:	08000e5b 	.word	0x08000e5b
 8000cc8:	08000e81 	.word	0x08000e81
 8000ccc:	08000ea7 	.word	0x08000ea7
			case VEILLE: {
				Etat = VEILLE;
 8000cd0:	4b95      	ldr	r3, [pc, #596]	; (8000f28 <Gestion_Commandes+0x7e0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
				Mode = SLEEP;
 8000cd6:	4b95      	ldr	r3, [pc, #596]	; (8000f2c <Gestion_Commandes+0x7e4>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	701a      	strb	r2, [r3, #0]
				break;
 8000cdc:	e0f6      	b.n	8000ecc <Gestion_Commandes+0x784>
			}
			case ARRET: {
				_DirG = AVANCE;
 8000cde:	4b94      	ldr	r3, [pc, #592]	; (8000f30 <Gestion_Commandes+0x7e8>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000ce4:	4b93      	ldr	r3, [pc, #588]	; (8000f34 <Gestion_Commandes+0x7ec>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	801a      	strh	r2, [r3, #0]
				_CVitG = V1;
 8000cea:	4b93      	ldr	r3, [pc, #588]	; (8000f38 <Gestion_Commandes+0x7f0>)
 8000cec:	2226      	movs	r2, #38	; 0x26
 8000cee:	801a      	strh	r2, [r3, #0]
				_CVitD = V1;
 8000cf0:	4b92      	ldr	r3, [pc, #584]	; (8000f3c <Gestion_Commandes+0x7f4>)
 8000cf2:	2226      	movs	r2, #38	; 0x26
 8000cf4:	801a      	strh	r2, [r3, #0]
				Etat = DV1;
 8000cf6:	4b8c      	ldr	r3, [pc, #560]	; (8000f28 <Gestion_Commandes+0x7e0>)
 8000cf8:	2208      	movs	r2, #8
 8000cfa:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000cfc:	4b8b      	ldr	r3, [pc, #556]	; (8000f2c <Gestion_Commandes+0x7e4>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	701a      	strb	r2, [r3, #0]
				break;
 8000d02:	e0e3      	b.n	8000ecc <Gestion_Commandes+0x784>
			}
			case AV1: {
				_DirG = AVANCE;
 8000d04:	4b8a      	ldr	r3, [pc, #552]	; (8000f30 <Gestion_Commandes+0x7e8>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000d0a:	4b8a      	ldr	r3, [pc, #552]	; (8000f34 <Gestion_Commandes+0x7ec>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	801a      	strh	r2, [r3, #0]
				_CVitG = V1;
 8000d10:	4b89      	ldr	r3, [pc, #548]	; (8000f38 <Gestion_Commandes+0x7f0>)
 8000d12:	2226      	movs	r2, #38	; 0x26
 8000d14:	801a      	strh	r2, [r3, #0]
				_CVitD = V1;
 8000d16:	4b89      	ldr	r3, [pc, #548]	; (8000f3c <Gestion_Commandes+0x7f4>)
 8000d18:	2226      	movs	r2, #38	; 0x26
 8000d1a:	801a      	strh	r2, [r3, #0]
				Etat = DV1;
 8000d1c:	4b82      	ldr	r3, [pc, #520]	; (8000f28 <Gestion_Commandes+0x7e0>)
 8000d1e:	2208      	movs	r2, #8
 8000d20:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000d22:	4b82      	ldr	r3, [pc, #520]	; (8000f2c <Gestion_Commandes+0x7e4>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	701a      	strb	r2, [r3, #0]
				break;
 8000d28:	e0d0      	b.n	8000ecc <Gestion_Commandes+0x784>
			}
			case AV2: {
				_DirG = AVANCE;
 8000d2a:	4b81      	ldr	r3, [pc, #516]	; (8000f30 <Gestion_Commandes+0x7e8>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000d30:	4b80      	ldr	r3, [pc, #512]	; (8000f34 <Gestion_Commandes+0x7ec>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	801a      	strh	r2, [r3, #0]
				_CVitG = V2;
 8000d36:	4b80      	ldr	r3, [pc, #512]	; (8000f38 <Gestion_Commandes+0x7f0>)
 8000d38:	2238      	movs	r2, #56	; 0x38
 8000d3a:	801a      	strh	r2, [r3, #0]
				_CVitD = V2;
 8000d3c:	4b7f      	ldr	r3, [pc, #508]	; (8000f3c <Gestion_Commandes+0x7f4>)
 8000d3e:	2238      	movs	r2, #56	; 0x38
 8000d40:	801a      	strh	r2, [r3, #0]
				Etat = DV2;
 8000d42:	4b79      	ldr	r3, [pc, #484]	; (8000f28 <Gestion_Commandes+0x7e0>)
 8000d44:	2209      	movs	r2, #9
 8000d46:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000d48:	4b78      	ldr	r3, [pc, #480]	; (8000f2c <Gestion_Commandes+0x7e4>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	701a      	strb	r2, [r3, #0]
				break;
 8000d4e:	e0bd      	b.n	8000ecc <Gestion_Commandes+0x784>
			}
			case AV3: {
				_DirG = AVANCE;
 8000d50:	4b77      	ldr	r3, [pc, #476]	; (8000f30 <Gestion_Commandes+0x7e8>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000d56:	4b77      	ldr	r3, [pc, #476]	; (8000f34 <Gestion_Commandes+0x7ec>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	801a      	strh	r2, [r3, #0]
				_CVitG = V3;
 8000d5c:	4b76      	ldr	r3, [pc, #472]	; (8000f38 <Gestion_Commandes+0x7f0>)
 8000d5e:	224c      	movs	r2, #76	; 0x4c
 8000d60:	801a      	strh	r2, [r3, #0]
				_CVitD = V3;
 8000d62:	4b76      	ldr	r3, [pc, #472]	; (8000f3c <Gestion_Commandes+0x7f4>)
 8000d64:	224c      	movs	r2, #76	; 0x4c
 8000d66:	801a      	strh	r2, [r3, #0]
				Etat = DV3;
 8000d68:	4b6f      	ldr	r3, [pc, #444]	; (8000f28 <Gestion_Commandes+0x7e0>)
 8000d6a:	220a      	movs	r2, #10
 8000d6c:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000d6e:	4b6f      	ldr	r3, [pc, #444]	; (8000f2c <Gestion_Commandes+0x7e4>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	701a      	strb	r2, [r3, #0]
				break;
 8000d74:	e0aa      	b.n	8000ecc <Gestion_Commandes+0x784>
			}
			case RV1: {
				_DirG = AVANCE;
 8000d76:	4b6e      	ldr	r3, [pc, #440]	; (8000f30 <Gestion_Commandes+0x7e8>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000d7c:	4b6d      	ldr	r3, [pc, #436]	; (8000f34 <Gestion_Commandes+0x7ec>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	801a      	strh	r2, [r3, #0]
				_CVitG = V1;
 8000d82:	4b6d      	ldr	r3, [pc, #436]	; (8000f38 <Gestion_Commandes+0x7f0>)
 8000d84:	2226      	movs	r2, #38	; 0x26
 8000d86:	801a      	strh	r2, [r3, #0]
				_CVitD = V1;
 8000d88:	4b6c      	ldr	r3, [pc, #432]	; (8000f3c <Gestion_Commandes+0x7f4>)
 8000d8a:	2226      	movs	r2, #38	; 0x26
 8000d8c:	801a      	strh	r2, [r3, #0]
				Etat = DV1;
 8000d8e:	4b66      	ldr	r3, [pc, #408]	; (8000f28 <Gestion_Commandes+0x7e0>)
 8000d90:	2208      	movs	r2, #8
 8000d92:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000d94:	4b65      	ldr	r3, [pc, #404]	; (8000f2c <Gestion_Commandes+0x7e4>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	701a      	strb	r2, [r3, #0]
				break;
 8000d9a:	e097      	b.n	8000ecc <Gestion_Commandes+0x784>
			}
			case RV2: {
				_DirG = AVANCE;
 8000d9c:	4b64      	ldr	r3, [pc, #400]	; (8000f30 <Gestion_Commandes+0x7e8>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000da2:	4b64      	ldr	r3, [pc, #400]	; (8000f34 <Gestion_Commandes+0x7ec>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	801a      	strh	r2, [r3, #0]
				_CVitG = V2;
 8000da8:	4b63      	ldr	r3, [pc, #396]	; (8000f38 <Gestion_Commandes+0x7f0>)
 8000daa:	2238      	movs	r2, #56	; 0x38
 8000dac:	801a      	strh	r2, [r3, #0]
				_CVitD = V2;
 8000dae:	4b63      	ldr	r3, [pc, #396]	; (8000f3c <Gestion_Commandes+0x7f4>)
 8000db0:	2238      	movs	r2, #56	; 0x38
 8000db2:	801a      	strh	r2, [r3, #0]
				Etat = DV2;
 8000db4:	4b5c      	ldr	r3, [pc, #368]	; (8000f28 <Gestion_Commandes+0x7e0>)
 8000db6:	2209      	movs	r2, #9
 8000db8:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000dba:	4b5c      	ldr	r3, [pc, #368]	; (8000f2c <Gestion_Commandes+0x7e4>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	701a      	strb	r2, [r3, #0]
				break;
 8000dc0:	e084      	b.n	8000ecc <Gestion_Commandes+0x784>
			}
			case RV3: {
				_DirG = AVANCE;
 8000dc2:	4b5b      	ldr	r3, [pc, #364]	; (8000f30 <Gestion_Commandes+0x7e8>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000dc8:	4b5a      	ldr	r3, [pc, #360]	; (8000f34 <Gestion_Commandes+0x7ec>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	801a      	strh	r2, [r3, #0]
				_CVitG = V3;
 8000dce:	4b5a      	ldr	r3, [pc, #360]	; (8000f38 <Gestion_Commandes+0x7f0>)
 8000dd0:	224c      	movs	r2, #76	; 0x4c
 8000dd2:	801a      	strh	r2, [r3, #0]
				_CVitD = V3;
 8000dd4:	4b59      	ldr	r3, [pc, #356]	; (8000f3c <Gestion_Commandes+0x7f4>)
 8000dd6:	224c      	movs	r2, #76	; 0x4c
 8000dd8:	801a      	strh	r2, [r3, #0]
				Etat = DV3;
 8000dda:	4b53      	ldr	r3, [pc, #332]	; (8000f28 <Gestion_Commandes+0x7e0>)
 8000ddc:	220a      	movs	r2, #10
 8000dde:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000de0:	4b52      	ldr	r3, [pc, #328]	; (8000f2c <Gestion_Commandes+0x7e4>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	701a      	strb	r2, [r3, #0]
				break;
 8000de6:	e071      	b.n	8000ecc <Gestion_Commandes+0x784>
			}
			case DV1: {
				_DirG = AVANCE;
 8000de8:	4b51      	ldr	r3, [pc, #324]	; (8000f30 <Gestion_Commandes+0x7e8>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000dee:	4b51      	ldr	r3, [pc, #324]	; (8000f34 <Gestion_Commandes+0x7ec>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	801a      	strh	r2, [r3, #0]
				_CVitG = V2;
 8000df4:	4b50      	ldr	r3, [pc, #320]	; (8000f38 <Gestion_Commandes+0x7f0>)
 8000df6:	2238      	movs	r2, #56	; 0x38
 8000df8:	801a      	strh	r2, [r3, #0]
				_CVitD = V2;
 8000dfa:	4b50      	ldr	r3, [pc, #320]	; (8000f3c <Gestion_Commandes+0x7f4>)
 8000dfc:	2238      	movs	r2, #56	; 0x38
 8000dfe:	801a      	strh	r2, [r3, #0]
				Etat = DV2;
 8000e00:	4b49      	ldr	r3, [pc, #292]	; (8000f28 <Gestion_Commandes+0x7e0>)
 8000e02:	2209      	movs	r2, #9
 8000e04:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000e06:	4b49      	ldr	r3, [pc, #292]	; (8000f2c <Gestion_Commandes+0x7e4>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	701a      	strb	r2, [r3, #0]
				break;
 8000e0c:	e05e      	b.n	8000ecc <Gestion_Commandes+0x784>
			}
			case DV2: {
				_DirG = AVANCE;
 8000e0e:	4b48      	ldr	r3, [pc, #288]	; (8000f30 <Gestion_Commandes+0x7e8>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000e14:	4b47      	ldr	r3, [pc, #284]	; (8000f34 <Gestion_Commandes+0x7ec>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	801a      	strh	r2, [r3, #0]
				_CVitG = V3;
 8000e1a:	4b47      	ldr	r3, [pc, #284]	; (8000f38 <Gestion_Commandes+0x7f0>)
 8000e1c:	224c      	movs	r2, #76	; 0x4c
 8000e1e:	801a      	strh	r2, [r3, #0]
				_CVitD = V3;
 8000e20:	4b46      	ldr	r3, [pc, #280]	; (8000f3c <Gestion_Commandes+0x7f4>)
 8000e22:	224c      	movs	r2, #76	; 0x4c
 8000e24:	801a      	strh	r2, [r3, #0]
				Etat = DV3;
 8000e26:	4b40      	ldr	r3, [pc, #256]	; (8000f28 <Gestion_Commandes+0x7e0>)
 8000e28:	220a      	movs	r2, #10
 8000e2a:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000e2c:	4b3f      	ldr	r3, [pc, #252]	; (8000f2c <Gestion_Commandes+0x7e4>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	701a      	strb	r2, [r3, #0]
				break;
 8000e32:	e04b      	b.n	8000ecc <Gestion_Commandes+0x784>
			}
			case DV3: {
				_DirG = AVANCE;
 8000e34:	4b3e      	ldr	r3, [pc, #248]	; (8000f30 <Gestion_Commandes+0x7e8>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000e3a:	4b3e      	ldr	r3, [pc, #248]	; (8000f34 <Gestion_Commandes+0x7ec>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	801a      	strh	r2, [r3, #0]
				_CVitG = V3;
 8000e40:	4b3d      	ldr	r3, [pc, #244]	; (8000f38 <Gestion_Commandes+0x7f0>)
 8000e42:	224c      	movs	r2, #76	; 0x4c
 8000e44:	801a      	strh	r2, [r3, #0]
				_CVitD = V3;
 8000e46:	4b3d      	ldr	r3, [pc, #244]	; (8000f3c <Gestion_Commandes+0x7f4>)
 8000e48:	224c      	movs	r2, #76	; 0x4c
 8000e4a:	801a      	strh	r2, [r3, #0]
				Etat = DV3;
 8000e4c:	4b36      	ldr	r3, [pc, #216]	; (8000f28 <Gestion_Commandes+0x7e0>)
 8000e4e:	220a      	movs	r2, #10
 8000e50:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000e52:	4b36      	ldr	r3, [pc, #216]	; (8000f2c <Gestion_Commandes+0x7e4>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	701a      	strb	r2, [r3, #0]
				break;
 8000e58:	e038      	b.n	8000ecc <Gestion_Commandes+0x784>
			}
			case GV1: {
				_DirG = RECULE;
 8000e5a:	4b35      	ldr	r3, [pc, #212]	; (8000f30 <Gestion_Commandes+0x7e8>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000e60:	4b34      	ldr	r3, [pc, #208]	; (8000f34 <Gestion_Commandes+0x7ec>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	801a      	strh	r2, [r3, #0]
				_CVitG = 0;
 8000e66:	4b34      	ldr	r3, [pc, #208]	; (8000f38 <Gestion_Commandes+0x7f0>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	801a      	strh	r2, [r3, #0]
				_CVitD = 0;
 8000e6c:	4b33      	ldr	r3, [pc, #204]	; (8000f3c <Gestion_Commandes+0x7f4>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	801a      	strh	r2, [r3, #0]
				Etat = ARRET;
 8000e72:	4b2d      	ldr	r3, [pc, #180]	; (8000f28 <Gestion_Commandes+0x7e0>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	701a      	strb	r2, [r3, #0]
				Mode = SLEEP;
 8000e78:	4b2c      	ldr	r3, [pc, #176]	; (8000f2c <Gestion_Commandes+0x7e4>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	701a      	strb	r2, [r3, #0]

				break;
 8000e7e:	e025      	b.n	8000ecc <Gestion_Commandes+0x784>
			}
			case GV2: {
				_DirG = RECULE;
 8000e80:	4b2b      	ldr	r3, [pc, #172]	; (8000f30 <Gestion_Commandes+0x7e8>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 8000e86:	4b2b      	ldr	r3, [pc, #172]	; (8000f34 <Gestion_Commandes+0x7ec>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	801a      	strh	r2, [r3, #0]
				_CVitG = V1;
 8000e8c:	4b2a      	ldr	r3, [pc, #168]	; (8000f38 <Gestion_Commandes+0x7f0>)
 8000e8e:	2226      	movs	r2, #38	; 0x26
 8000e90:	801a      	strh	r2, [r3, #0]
				_CVitD = V1;
 8000e92:	4b2a      	ldr	r3, [pc, #168]	; (8000f3c <Gestion_Commandes+0x7f4>)
 8000e94:	2226      	movs	r2, #38	; 0x26
 8000e96:	801a      	strh	r2, [r3, #0]
				Etat = GV1;
 8000e98:	4b23      	ldr	r3, [pc, #140]	; (8000f28 <Gestion_Commandes+0x7e0>)
 8000e9a:	220b      	movs	r2, #11
 8000e9c:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000e9e:	4b23      	ldr	r3, [pc, #140]	; (8000f2c <Gestion_Commandes+0x7e4>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	701a      	strb	r2, [r3, #0]
				break;
 8000ea4:	e012      	b.n	8000ecc <Gestion_Commandes+0x784>
			}
			case GV3: {
				_DirG = RECULE;
 8000ea6:	4b22      	ldr	r3, [pc, #136]	; (8000f30 <Gestion_Commandes+0x7e8>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 8000eac:	4b21      	ldr	r3, [pc, #132]	; (8000f34 <Gestion_Commandes+0x7ec>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	801a      	strh	r2, [r3, #0]
				_CVitG = V2;
 8000eb2:	4b21      	ldr	r3, [pc, #132]	; (8000f38 <Gestion_Commandes+0x7f0>)
 8000eb4:	2238      	movs	r2, #56	; 0x38
 8000eb6:	801a      	strh	r2, [r3, #0]
				_CVitD = V2;
 8000eb8:	4b20      	ldr	r3, [pc, #128]	; (8000f3c <Gestion_Commandes+0x7f4>)
 8000eba:	2238      	movs	r2, #56	; 0x38
 8000ebc:	801a      	strh	r2, [r3, #0]
				Etat = GV2;
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <Gestion_Commandes+0x7e0>)
 8000ec0:	220c      	movs	r2, #12
 8000ec2:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000ec4:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <Gestion_Commandes+0x7e4>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	701a      	strb	r2, [r3, #0]
				break;
 8000eca:	bf00      	nop
			}
			}
			break;
 8000ecc:	e142      	b.n	8001154 <Gestion_Commandes+0xa0c>
		}
		case GAUCHE: {
			switch (Etat) {
 8000ece:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <Gestion_Commandes+0x7e0>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b0d      	cmp	r3, #13
 8000ed4:	f200 8140 	bhi.w	8001158 <Gestion_Commandes+0xa10>
 8000ed8:	a201      	add	r2, pc, #4	; (adr r2, 8000ee0 <Gestion_Commandes+0x798>)
 8000eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ede:	bf00      	nop
 8000ee0:	08000f19 	.word	0x08000f19
 8000ee4:	08000f41 	.word	0x08000f41
 8000ee8:	08000f67 	.word	0x08000f67
 8000eec:	08000f8d 	.word	0x08000f8d
 8000ef0:	08000fb3 	.word	0x08000fb3
 8000ef4:	08000fd9 	.word	0x08000fd9
 8000ef8:	08000fff 	.word	0x08000fff
 8000efc:	08001025 	.word	0x08001025
 8000f00:	0800104b 	.word	0x0800104b
 8000f04:	08001071 	.word	0x08001071
 8000f08:	08001097 	.word	0x08001097
 8000f0c:	080010bd 	.word	0x080010bd
 8000f10:	080010e3 	.word	0x080010e3
 8000f14:	08001109 	.word	0x08001109
			case VEILLE: {
				Etat = VEILLE;
 8000f18:	4b03      	ldr	r3, [pc, #12]	; (8000f28 <Gestion_Commandes+0x7e0>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
				Mode = SLEEP;
 8000f1e:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <Gestion_Commandes+0x7e4>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
				break;
 8000f24:	e103      	b.n	800112e <Gestion_Commandes+0x9e6>
 8000f26:	bf00      	nop
 8000f28:	200000bc 	.word	0x200000bc
 8000f2c:	200001f0 	.word	0x200001f0
 8000f30:	20000200 	.word	0x20000200
 8000f34:	20000170 	.word	0x20000170
 8000f38:	200001f2 	.word	0x200001f2
 8000f3c:	20000168 	.word	0x20000168
			}
			case ARRET: {
				_DirG = RECULE;
 8000f40:	4b88      	ldr	r3, [pc, #544]	; (8001164 <Gestion_Commandes+0xa1c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 8000f46:	4b88      	ldr	r3, [pc, #544]	; (8001168 <Gestion_Commandes+0xa20>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	801a      	strh	r2, [r3, #0]
				_CVitG = V1;
 8000f4c:	4b87      	ldr	r3, [pc, #540]	; (800116c <Gestion_Commandes+0xa24>)
 8000f4e:	2226      	movs	r2, #38	; 0x26
 8000f50:	801a      	strh	r2, [r3, #0]
				_CVitD = V1;
 8000f52:	4b87      	ldr	r3, [pc, #540]	; (8001170 <Gestion_Commandes+0xa28>)
 8000f54:	2226      	movs	r2, #38	; 0x26
 8000f56:	801a      	strh	r2, [r3, #0]
				Etat = GV1;
 8000f58:	4b86      	ldr	r3, [pc, #536]	; (8001174 <Gestion_Commandes+0xa2c>)
 8000f5a:	220b      	movs	r2, #11
 8000f5c:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000f5e:	4b86      	ldr	r3, [pc, #536]	; (8001178 <Gestion_Commandes+0xa30>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	701a      	strb	r2, [r3, #0]
				break;
 8000f64:	e0e3      	b.n	800112e <Gestion_Commandes+0x9e6>
			}
			case AV1: {
				_DirG = RECULE;
 8000f66:	4b7f      	ldr	r3, [pc, #508]	; (8001164 <Gestion_Commandes+0xa1c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 8000f6c:	4b7e      	ldr	r3, [pc, #504]	; (8001168 <Gestion_Commandes+0xa20>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	801a      	strh	r2, [r3, #0]
				_CVitG = V1;
 8000f72:	4b7e      	ldr	r3, [pc, #504]	; (800116c <Gestion_Commandes+0xa24>)
 8000f74:	2226      	movs	r2, #38	; 0x26
 8000f76:	801a      	strh	r2, [r3, #0]
				_CVitD = V1;
 8000f78:	4b7d      	ldr	r3, [pc, #500]	; (8001170 <Gestion_Commandes+0xa28>)
 8000f7a:	2226      	movs	r2, #38	; 0x26
 8000f7c:	801a      	strh	r2, [r3, #0]
				Etat = GV1;
 8000f7e:	4b7d      	ldr	r3, [pc, #500]	; (8001174 <Gestion_Commandes+0xa2c>)
 8000f80:	220b      	movs	r2, #11
 8000f82:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000f84:	4b7c      	ldr	r3, [pc, #496]	; (8001178 <Gestion_Commandes+0xa30>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	701a      	strb	r2, [r3, #0]
				break;
 8000f8a:	e0d0      	b.n	800112e <Gestion_Commandes+0x9e6>
			}
			case AV2: {
				_DirG = RECULE;
 8000f8c:	4b75      	ldr	r3, [pc, #468]	; (8001164 <Gestion_Commandes+0xa1c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 8000f92:	4b75      	ldr	r3, [pc, #468]	; (8001168 <Gestion_Commandes+0xa20>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	801a      	strh	r2, [r3, #0]
				_CVitG = V2;
 8000f98:	4b74      	ldr	r3, [pc, #464]	; (800116c <Gestion_Commandes+0xa24>)
 8000f9a:	2238      	movs	r2, #56	; 0x38
 8000f9c:	801a      	strh	r2, [r3, #0]
				_CVitD = V2;
 8000f9e:	4b74      	ldr	r3, [pc, #464]	; (8001170 <Gestion_Commandes+0xa28>)
 8000fa0:	2238      	movs	r2, #56	; 0x38
 8000fa2:	801a      	strh	r2, [r3, #0]
				Etat = GV2;
 8000fa4:	4b73      	ldr	r3, [pc, #460]	; (8001174 <Gestion_Commandes+0xa2c>)
 8000fa6:	220c      	movs	r2, #12
 8000fa8:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000faa:	4b73      	ldr	r3, [pc, #460]	; (8001178 <Gestion_Commandes+0xa30>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	701a      	strb	r2, [r3, #0]
				break;
 8000fb0:	e0bd      	b.n	800112e <Gestion_Commandes+0x9e6>
			}
			case AV3: {
				_DirG = RECULE;
 8000fb2:	4b6c      	ldr	r3, [pc, #432]	; (8001164 <Gestion_Commandes+0xa1c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 8000fb8:	4b6b      	ldr	r3, [pc, #428]	; (8001168 <Gestion_Commandes+0xa20>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	801a      	strh	r2, [r3, #0]
				_CVitG = V3;
 8000fbe:	4b6b      	ldr	r3, [pc, #428]	; (800116c <Gestion_Commandes+0xa24>)
 8000fc0:	224c      	movs	r2, #76	; 0x4c
 8000fc2:	801a      	strh	r2, [r3, #0]
				_CVitD = V3;
 8000fc4:	4b6a      	ldr	r3, [pc, #424]	; (8001170 <Gestion_Commandes+0xa28>)
 8000fc6:	224c      	movs	r2, #76	; 0x4c
 8000fc8:	801a      	strh	r2, [r3, #0]
				Etat = GV3;
 8000fca:	4b6a      	ldr	r3, [pc, #424]	; (8001174 <Gestion_Commandes+0xa2c>)
 8000fcc:	220d      	movs	r2, #13
 8000fce:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000fd0:	4b69      	ldr	r3, [pc, #420]	; (8001178 <Gestion_Commandes+0xa30>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	701a      	strb	r2, [r3, #0]
				break;
 8000fd6:	e0aa      	b.n	800112e <Gestion_Commandes+0x9e6>
			}
			case RV1: {
				_DirG = RECULE;
 8000fd8:	4b62      	ldr	r3, [pc, #392]	; (8001164 <Gestion_Commandes+0xa1c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 8000fde:	4b62      	ldr	r3, [pc, #392]	; (8001168 <Gestion_Commandes+0xa20>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	801a      	strh	r2, [r3, #0]
				_CVitG = V1;
 8000fe4:	4b61      	ldr	r3, [pc, #388]	; (800116c <Gestion_Commandes+0xa24>)
 8000fe6:	2226      	movs	r2, #38	; 0x26
 8000fe8:	801a      	strh	r2, [r3, #0]
				_CVitD = V1;
 8000fea:	4b61      	ldr	r3, [pc, #388]	; (8001170 <Gestion_Commandes+0xa28>)
 8000fec:	2226      	movs	r2, #38	; 0x26
 8000fee:	801a      	strh	r2, [r3, #0]
				Etat = GV1;
 8000ff0:	4b60      	ldr	r3, [pc, #384]	; (8001174 <Gestion_Commandes+0xa2c>)
 8000ff2:	220b      	movs	r2, #11
 8000ff4:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000ff6:	4b60      	ldr	r3, [pc, #384]	; (8001178 <Gestion_Commandes+0xa30>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	701a      	strb	r2, [r3, #0]
				break;
 8000ffc:	e097      	b.n	800112e <Gestion_Commandes+0x9e6>
			}
			case RV2: {
				_DirG = RECULE;
 8000ffe:	4b59      	ldr	r3, [pc, #356]	; (8001164 <Gestion_Commandes+0xa1c>)
 8001000:	2200      	movs	r2, #0
 8001002:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 8001004:	4b58      	ldr	r3, [pc, #352]	; (8001168 <Gestion_Commandes+0xa20>)
 8001006:	2201      	movs	r2, #1
 8001008:	801a      	strh	r2, [r3, #0]
				_CVitG = V2;
 800100a:	4b58      	ldr	r3, [pc, #352]	; (800116c <Gestion_Commandes+0xa24>)
 800100c:	2238      	movs	r2, #56	; 0x38
 800100e:	801a      	strh	r2, [r3, #0]
				_CVitD = V2;
 8001010:	4b57      	ldr	r3, [pc, #348]	; (8001170 <Gestion_Commandes+0xa28>)
 8001012:	2238      	movs	r2, #56	; 0x38
 8001014:	801a      	strh	r2, [r3, #0]
				Etat = GV2;
 8001016:	4b57      	ldr	r3, [pc, #348]	; (8001174 <Gestion_Commandes+0xa2c>)
 8001018:	220c      	movs	r2, #12
 800101a:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 800101c:	4b56      	ldr	r3, [pc, #344]	; (8001178 <Gestion_Commandes+0xa30>)
 800101e:	2201      	movs	r2, #1
 8001020:	701a      	strb	r2, [r3, #0]
				break;
 8001022:	e084      	b.n	800112e <Gestion_Commandes+0x9e6>
			}
			case RV3: {
				_DirG = RECULE;
 8001024:	4b4f      	ldr	r3, [pc, #316]	; (8001164 <Gestion_Commandes+0xa1c>)
 8001026:	2200      	movs	r2, #0
 8001028:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 800102a:	4b4f      	ldr	r3, [pc, #316]	; (8001168 <Gestion_Commandes+0xa20>)
 800102c:	2201      	movs	r2, #1
 800102e:	801a      	strh	r2, [r3, #0]
				_CVitG = V3;
 8001030:	4b4e      	ldr	r3, [pc, #312]	; (800116c <Gestion_Commandes+0xa24>)
 8001032:	224c      	movs	r2, #76	; 0x4c
 8001034:	801a      	strh	r2, [r3, #0]
				_CVitD = V3;
 8001036:	4b4e      	ldr	r3, [pc, #312]	; (8001170 <Gestion_Commandes+0xa28>)
 8001038:	224c      	movs	r2, #76	; 0x4c
 800103a:	801a      	strh	r2, [r3, #0]
				Etat = GV3;
 800103c:	4b4d      	ldr	r3, [pc, #308]	; (8001174 <Gestion_Commandes+0xa2c>)
 800103e:	220d      	movs	r2, #13
 8001040:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8001042:	4b4d      	ldr	r3, [pc, #308]	; (8001178 <Gestion_Commandes+0xa30>)
 8001044:	2201      	movs	r2, #1
 8001046:	701a      	strb	r2, [r3, #0]
				break;
 8001048:	e071      	b.n	800112e <Gestion_Commandes+0x9e6>
			}
			case DV1: {
				_DirG = RECULE;
 800104a:	4b46      	ldr	r3, [pc, #280]	; (8001164 <Gestion_Commandes+0xa1c>)
 800104c:	2200      	movs	r2, #0
 800104e:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8001050:	4b45      	ldr	r3, [pc, #276]	; (8001168 <Gestion_Commandes+0xa20>)
 8001052:	2200      	movs	r2, #0
 8001054:	801a      	strh	r2, [r3, #0]
				_CVitG = 0;
 8001056:	4b45      	ldr	r3, [pc, #276]	; (800116c <Gestion_Commandes+0xa24>)
 8001058:	2200      	movs	r2, #0
 800105a:	801a      	strh	r2, [r3, #0]
				_CVitD = 0;
 800105c:	4b44      	ldr	r3, [pc, #272]	; (8001170 <Gestion_Commandes+0xa28>)
 800105e:	2200      	movs	r2, #0
 8001060:	801a      	strh	r2, [r3, #0]
				Etat = ARRET;
 8001062:	4b44      	ldr	r3, [pc, #272]	; (8001174 <Gestion_Commandes+0xa2c>)
 8001064:	2201      	movs	r2, #1
 8001066:	701a      	strb	r2, [r3, #0]
				Mode = SLEEP;
 8001068:	4b43      	ldr	r3, [pc, #268]	; (8001178 <Gestion_Commandes+0xa30>)
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]

				break;
 800106e:	e05e      	b.n	800112e <Gestion_Commandes+0x9e6>
			}
			case DV2: {
				_DirG = AVANCE;
 8001070:	4b3c      	ldr	r3, [pc, #240]	; (8001164 <Gestion_Commandes+0xa1c>)
 8001072:	2201      	movs	r2, #1
 8001074:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8001076:	4b3c      	ldr	r3, [pc, #240]	; (8001168 <Gestion_Commandes+0xa20>)
 8001078:	2200      	movs	r2, #0
 800107a:	801a      	strh	r2, [r3, #0]
				_CVitG = V1;
 800107c:	4b3b      	ldr	r3, [pc, #236]	; (800116c <Gestion_Commandes+0xa24>)
 800107e:	2226      	movs	r2, #38	; 0x26
 8001080:	801a      	strh	r2, [r3, #0]
				_CVitD = V1;
 8001082:	4b3b      	ldr	r3, [pc, #236]	; (8001170 <Gestion_Commandes+0xa28>)
 8001084:	2226      	movs	r2, #38	; 0x26
 8001086:	801a      	strh	r2, [r3, #0]
				Etat = DV1;
 8001088:	4b3a      	ldr	r3, [pc, #232]	; (8001174 <Gestion_Commandes+0xa2c>)
 800108a:	2208      	movs	r2, #8
 800108c:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 800108e:	4b3a      	ldr	r3, [pc, #232]	; (8001178 <Gestion_Commandes+0xa30>)
 8001090:	2201      	movs	r2, #1
 8001092:	701a      	strb	r2, [r3, #0]
				break;
 8001094:	e04b      	b.n	800112e <Gestion_Commandes+0x9e6>
			}
			case DV3: {
				_DirG = AVANCE;
 8001096:	4b33      	ldr	r3, [pc, #204]	; (8001164 <Gestion_Commandes+0xa1c>)
 8001098:	2201      	movs	r2, #1
 800109a:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 800109c:	4b32      	ldr	r3, [pc, #200]	; (8001168 <Gestion_Commandes+0xa20>)
 800109e:	2200      	movs	r2, #0
 80010a0:	801a      	strh	r2, [r3, #0]
				_CVitG = V2;
 80010a2:	4b32      	ldr	r3, [pc, #200]	; (800116c <Gestion_Commandes+0xa24>)
 80010a4:	2238      	movs	r2, #56	; 0x38
 80010a6:	801a      	strh	r2, [r3, #0]
				_CVitD = V2;
 80010a8:	4b31      	ldr	r3, [pc, #196]	; (8001170 <Gestion_Commandes+0xa28>)
 80010aa:	2238      	movs	r2, #56	; 0x38
 80010ac:	801a      	strh	r2, [r3, #0]
				Etat = DV2;
 80010ae:	4b31      	ldr	r3, [pc, #196]	; (8001174 <Gestion_Commandes+0xa2c>)
 80010b0:	2209      	movs	r2, #9
 80010b2:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 80010b4:	4b30      	ldr	r3, [pc, #192]	; (8001178 <Gestion_Commandes+0xa30>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	701a      	strb	r2, [r3, #0]
				break;
 80010ba:	e038      	b.n	800112e <Gestion_Commandes+0x9e6>
			}
			case GV1: {
				_DirG = RECULE;
 80010bc:	4b29      	ldr	r3, [pc, #164]	; (8001164 <Gestion_Commandes+0xa1c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 80010c2:	4b29      	ldr	r3, [pc, #164]	; (8001168 <Gestion_Commandes+0xa20>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	801a      	strh	r2, [r3, #0]
				_CVitG = V2;
 80010c8:	4b28      	ldr	r3, [pc, #160]	; (800116c <Gestion_Commandes+0xa24>)
 80010ca:	2238      	movs	r2, #56	; 0x38
 80010cc:	801a      	strh	r2, [r3, #0]
				_CVitD = V2;
 80010ce:	4b28      	ldr	r3, [pc, #160]	; (8001170 <Gestion_Commandes+0xa28>)
 80010d0:	2238      	movs	r2, #56	; 0x38
 80010d2:	801a      	strh	r2, [r3, #0]
				Etat = GV2;
 80010d4:	4b27      	ldr	r3, [pc, #156]	; (8001174 <Gestion_Commandes+0xa2c>)
 80010d6:	220c      	movs	r2, #12
 80010d8:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 80010da:	4b27      	ldr	r3, [pc, #156]	; (8001178 <Gestion_Commandes+0xa30>)
 80010dc:	2201      	movs	r2, #1
 80010de:	701a      	strb	r2, [r3, #0]
				break;
 80010e0:	e025      	b.n	800112e <Gestion_Commandes+0x9e6>
			}
			case GV2: {
				_DirG = RECULE;
 80010e2:	4b20      	ldr	r3, [pc, #128]	; (8001164 <Gestion_Commandes+0xa1c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 80010e8:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <Gestion_Commandes+0xa20>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	801a      	strh	r2, [r3, #0]
				_CVitG = V3;
 80010ee:	4b1f      	ldr	r3, [pc, #124]	; (800116c <Gestion_Commandes+0xa24>)
 80010f0:	224c      	movs	r2, #76	; 0x4c
 80010f2:	801a      	strh	r2, [r3, #0]
				_CVitD = V3;
 80010f4:	4b1e      	ldr	r3, [pc, #120]	; (8001170 <Gestion_Commandes+0xa28>)
 80010f6:	224c      	movs	r2, #76	; 0x4c
 80010f8:	801a      	strh	r2, [r3, #0]
				Etat = GV3;
 80010fa:	4b1e      	ldr	r3, [pc, #120]	; (8001174 <Gestion_Commandes+0xa2c>)
 80010fc:	220d      	movs	r2, #13
 80010fe:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8001100:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <Gestion_Commandes+0xa30>)
 8001102:	2201      	movs	r2, #1
 8001104:	701a      	strb	r2, [r3, #0]
				break;
 8001106:	e012      	b.n	800112e <Gestion_Commandes+0x9e6>
			}
			case GV3: {
				_DirG = RECULE;
 8001108:	4b16      	ldr	r3, [pc, #88]	; (8001164 <Gestion_Commandes+0xa1c>)
 800110a:	2200      	movs	r2, #0
 800110c:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 800110e:	4b16      	ldr	r3, [pc, #88]	; (8001168 <Gestion_Commandes+0xa20>)
 8001110:	2201      	movs	r2, #1
 8001112:	801a      	strh	r2, [r3, #0]
				_CVitG = V3;
 8001114:	4b15      	ldr	r3, [pc, #84]	; (800116c <Gestion_Commandes+0xa24>)
 8001116:	224c      	movs	r2, #76	; 0x4c
 8001118:	801a      	strh	r2, [r3, #0]
				_CVitD = V3;
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <Gestion_Commandes+0xa28>)
 800111c:	224c      	movs	r2, #76	; 0x4c
 800111e:	801a      	strh	r2, [r3, #0]
				Etat = GV3;
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <Gestion_Commandes+0xa2c>)
 8001122:	220d      	movs	r2, #13
 8001124:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8001126:	4b14      	ldr	r3, [pc, #80]	; (8001178 <Gestion_Commandes+0xa30>)
 8001128:	2201      	movs	r2, #1
 800112a:	701a      	strb	r2, [r3, #0]
				break;
 800112c:	bf00      	nop
			}
			}
			break;
 800112e:	e013      	b.n	8001158 <Gestion_Commandes+0xa10>

		}
		case PARK: {
			Etat = ARRET;
 8001130:	4b10      	ldr	r3, [pc, #64]	; (8001174 <Gestion_Commandes+0xa2c>)
 8001132:	2201      	movs	r2, #1
 8001134:	701a      	strb	r2, [r3, #0]
			Mode = PARKMODE;
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <Gestion_Commandes+0xa30>)
 8001138:	2202      	movs	r2, #2
 800113a:	701a      	strb	r2, [r3, #0]
			break;
 800113c:	e00d      	b.n	800115a <Gestion_Commandes+0xa12>

		}
		case MOVPARK : {
			Etat = ARRET;
 800113e:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <Gestion_Commandes+0xa2c>)
 8001140:	2201      	movs	r2, #1
 8001142:	701a      	strb	r2, [r3, #0]
			Mode = GOPARK;
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <Gestion_Commandes+0xa30>)
 8001146:	2203      	movs	r2, #3
 8001148:	701a      	strb	r2, [r3, #0]
			break;
 800114a:	e006      	b.n	800115a <Gestion_Commandes+0xa12>
			break;
 800114c:	bf00      	nop
 800114e:	e004      	b.n	800115a <Gestion_Commandes+0xa12>
			break;
 8001150:	bf00      	nop
 8001152:	e002      	b.n	800115a <Gestion_Commandes+0xa12>
			break;
 8001154:	bf00      	nop
 8001156:	e000      	b.n	800115a <Gestion_Commandes+0xa12>
			break;
 8001158:	bf00      	nop
		}
	}
}
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	20000200 	.word	0x20000200
 8001168:	20000170 	.word	0x20000170
 800116c:	200001f2 	.word	0x200001f2
 8001170:	20000168 	.word	0x20000168
 8001174:	200000bc 	.word	0x200000bc
 8001178:	200001f0 	.word	0x200001f0

0800117c <controle>:
void controle(void) {
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0

	if (Tech >= T_200_MS) {
 8001180:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <controle+0x24>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b63      	cmp	r3, #99	; 0x63
 8001186:	d908      	bls.n	800119a <controle+0x1e>
		Tech = 0;
 8001188:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <controle+0x24>)
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
		ACS();
 800118e:	f000 f809 	bl	80011a4 <ACS>
		Calcul_Vit();
 8001192:	f000 f9a3 	bl	80014dc <Calcul_Vit>
		regulateur();
 8001196:	f000 fa25 	bl	80015e4 <regulateur>
	}

}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000098 	.word	0x20000098

080011a4 <ACS>:


void ACS(void) {
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
	static uint16_t Delta1 = 0;
	static uint16_t Delta2 = 0;
	static uint16_t Delta3 = 0;
	static uint16_t Delta4 = 0;

	switch (Etat) {
 80011a8:	4b95      	ldr	r3, [pc, #596]	; (8001400 <ACS+0x25c>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d002      	beq.n	80011b6 <ACS+0x12>
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d01a      	beq.n	80011ea <ACS+0x46>
			DirG = _DirG;
		}
		break;
	}
	}
}
 80011b4:	e179      	b.n	80014aa <ACS+0x306>
		if (Mode == ACTIF )
 80011b6:	4b93      	ldr	r3, [pc, #588]	; (8001404 <ACS+0x260>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d103      	bne.n	80011c8 <ACS+0x24>
			Etat = ACTIFE;
 80011c0:	4b8f      	ldr	r3, [pc, #572]	; (8001400 <ACS+0x25c>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	701a      	strb	r2, [r3, #0]
		break;
 80011c6:	e170      	b.n	80014aa <ACS+0x306>
			CVitD = _CVitD;
 80011c8:	4b8f      	ldr	r3, [pc, #572]	; (8001408 <ACS+0x264>)
 80011ca:	881a      	ldrh	r2, [r3, #0]
 80011cc:	4b8f      	ldr	r3, [pc, #572]	; (800140c <ACS+0x268>)
 80011ce:	801a      	strh	r2, [r3, #0]
			CVitG = _CVitG;
 80011d0:	4b8f      	ldr	r3, [pc, #572]	; (8001410 <ACS+0x26c>)
 80011d2:	881a      	ldrh	r2, [r3, #0]
 80011d4:	4b8f      	ldr	r3, [pc, #572]	; (8001414 <ACS+0x270>)
 80011d6:	801a      	strh	r2, [r3, #0]
			DirD = _DirD;
 80011d8:	4b8f      	ldr	r3, [pc, #572]	; (8001418 <ACS+0x274>)
 80011da:	881a      	ldrh	r2, [r3, #0]
 80011dc:	4b8f      	ldr	r3, [pc, #572]	; (800141c <ACS+0x278>)
 80011de:	801a      	strh	r2, [r3, #0]
			DirG = _DirG;
 80011e0:	4b8f      	ldr	r3, [pc, #572]	; (8001420 <ACS+0x27c>)
 80011e2:	881a      	ldrh	r2, [r3, #0]
 80011e4:	4b8f      	ldr	r3, [pc, #572]	; (8001424 <ACS+0x280>)
 80011e6:	801a      	strh	r2, [r3, #0]
		break;
 80011e8:	e15f      	b.n	80014aa <ACS+0x306>
		if (Mode == SLEEP)
 80011ea:	4b86      	ldr	r3, [pc, #536]	; (8001404 <ACS+0x260>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d102      	bne.n	80011fa <ACS+0x56>
			Etat = ARRET;
 80011f4:	4b82      	ldr	r3, [pc, #520]	; (8001400 <ACS+0x25c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]
		if (_DirD == AVANCE && _DirG == AVANCE) {
 80011fa:	4b87      	ldr	r3, [pc, #540]	; (8001418 <ACS+0x274>)
 80011fc:	881b      	ldrh	r3, [r3, #0]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	f040 808b 	bne.w	800131a <ACS+0x176>
 8001204:	4b86      	ldr	r3, [pc, #536]	; (8001420 <ACS+0x27c>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	2b01      	cmp	r3, #1
 800120a:	f040 8086 	bne.w	800131a <ACS+0x176>
			if ((Dist_ACS_1 < Seuil_Dist_1 - Delta1)
 800120e:	4b86      	ldr	r3, [pc, #536]	; (8001428 <ACS+0x284>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	b29b      	uxth	r3, r3
 8001214:	461a      	mov	r2, r3
 8001216:	4b85      	ldr	r3, [pc, #532]	; (800142c <ACS+0x288>)
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800121e:	3303      	adds	r3, #3
 8001220:	429a      	cmp	r2, r3
 8001222:	da22      	bge.n	800126a <ACS+0xc6>
					&& (Dist_ACS_2 < Seuil_Dist_2 - Delta2)) {
 8001224:	4b82      	ldr	r3, [pc, #520]	; (8001430 <ACS+0x28c>)
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	b29b      	uxth	r3, r3
 800122a:	461a      	mov	r2, r3
 800122c:	4b81      	ldr	r3, [pc, #516]	; (8001434 <ACS+0x290>)
 800122e:	881b      	ldrh	r3, [r3, #0]
 8001230:	f5c3 638e 	rsb	r3, r3, #1136	; 0x470
 8001234:	3306      	adds	r3, #6
 8001236:	429a      	cmp	r2, r3
 8001238:	da17      	bge.n	800126a <ACS+0xc6>
				CVitD = _CVitD;
 800123a:	4b73      	ldr	r3, [pc, #460]	; (8001408 <ACS+0x264>)
 800123c:	881a      	ldrh	r2, [r3, #0]
 800123e:	4b73      	ldr	r3, [pc, #460]	; (800140c <ACS+0x268>)
 8001240:	801a      	strh	r2, [r3, #0]
				CVitG = _CVitG;
 8001242:	4b73      	ldr	r3, [pc, #460]	; (8001410 <ACS+0x26c>)
 8001244:	881a      	ldrh	r2, [r3, #0]
 8001246:	4b73      	ldr	r3, [pc, #460]	; (8001414 <ACS+0x270>)
 8001248:	801a      	strh	r2, [r3, #0]
				DirD = _DirD;
 800124a:	4b73      	ldr	r3, [pc, #460]	; (8001418 <ACS+0x274>)
 800124c:	881a      	ldrh	r2, [r3, #0]
 800124e:	4b73      	ldr	r3, [pc, #460]	; (800141c <ACS+0x278>)
 8001250:	801a      	strh	r2, [r3, #0]
				DirG = _DirG;
 8001252:	4b73      	ldr	r3, [pc, #460]	; (8001420 <ACS+0x27c>)
 8001254:	881a      	ldrh	r2, [r3, #0]
 8001256:	4b73      	ldr	r3, [pc, #460]	; (8001424 <ACS+0x280>)
 8001258:	801a      	strh	r2, [r3, #0]
				Delta1 = Delta2 = 0;
 800125a:	4b76      	ldr	r3, [pc, #472]	; (8001434 <ACS+0x290>)
 800125c:	2200      	movs	r2, #0
 800125e:	801a      	strh	r2, [r3, #0]
 8001260:	4b74      	ldr	r3, [pc, #464]	; (8001434 <ACS+0x290>)
 8001262:	881a      	ldrh	r2, [r3, #0]
 8001264:	4b71      	ldr	r3, [pc, #452]	; (800142c <ACS+0x288>)
 8001266:	801a      	strh	r2, [r3, #0]
 8001268:	e056      	b.n	8001318 <ACS+0x174>
			} else if ((Dist_ACS_1 < Seuil_Dist_1)
 800126a:	4b6f      	ldr	r3, [pc, #444]	; (8001428 <ACS+0x284>)
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	b29b      	uxth	r3, r3
 8001270:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8001274:	4293      	cmp	r3, r2
 8001276:	d816      	bhi.n	80012a6 <ACS+0x102>
					&& (Dist_ACS_2 > Seuil_Dist_2)) {
 8001278:	4b6d      	ldr	r3, [pc, #436]	; (8001430 <ACS+0x28c>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	b29b      	uxth	r3, r3
 800127e:	f240 4276 	movw	r2, #1142	; 0x476
 8001282:	4293      	cmp	r3, r2
 8001284:	d90f      	bls.n	80012a6 <ACS+0x102>
				CVitD = V1;
 8001286:	4b61      	ldr	r3, [pc, #388]	; (800140c <ACS+0x268>)
 8001288:	2226      	movs	r2, #38	; 0x26
 800128a:	801a      	strh	r2, [r3, #0]
				CVitG = V1;
 800128c:	4b61      	ldr	r3, [pc, #388]	; (8001414 <ACS+0x270>)
 800128e:	2226      	movs	r2, #38	; 0x26
 8001290:	801a      	strh	r2, [r3, #0]
				DirG = AVANCE;
 8001292:	4b64      	ldr	r3, [pc, #400]	; (8001424 <ACS+0x280>)
 8001294:	2201      	movs	r2, #1
 8001296:	801a      	strh	r2, [r3, #0]
				DirD = RECULE;
 8001298:	4b60      	ldr	r3, [pc, #384]	; (800141c <ACS+0x278>)
 800129a:	2200      	movs	r2, #0
 800129c:	801a      	strh	r2, [r3, #0]
				Delta2 = DELTA;
 800129e:	4b65      	ldr	r3, [pc, #404]	; (8001434 <ACS+0x290>)
 80012a0:	2250      	movs	r2, #80	; 0x50
 80012a2:	801a      	strh	r2, [r3, #0]
 80012a4:	e038      	b.n	8001318 <ACS+0x174>
			} else if ((Dist_ACS_1 > Seuil_Dist_1)
 80012a6:	4b60      	ldr	r3, [pc, #384]	; (8001428 <ACS+0x284>)
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	f5b3 7f7b 	cmp.w	r3, #1004	; 0x3ec
 80012b0:	d316      	bcc.n	80012e0 <ACS+0x13c>
					&& (Dist_ACS_2 < Seuil_Dist_2)) {
 80012b2:	4b5f      	ldr	r3, [pc, #380]	; (8001430 <ACS+0x28c>)
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	f240 4275 	movw	r2, #1141	; 0x475
 80012bc:	4293      	cmp	r3, r2
 80012be:	d80f      	bhi.n	80012e0 <ACS+0x13c>
				CVitD = V1;
 80012c0:	4b52      	ldr	r3, [pc, #328]	; (800140c <ACS+0x268>)
 80012c2:	2226      	movs	r2, #38	; 0x26
 80012c4:	801a      	strh	r2, [r3, #0]
				CVitG = V1;
 80012c6:	4b53      	ldr	r3, [pc, #332]	; (8001414 <ACS+0x270>)
 80012c8:	2226      	movs	r2, #38	; 0x26
 80012ca:	801a      	strh	r2, [r3, #0]
				DirD = AVANCE;
 80012cc:	4b53      	ldr	r3, [pc, #332]	; (800141c <ACS+0x278>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	801a      	strh	r2, [r3, #0]
				DirG = RECULE;
 80012d2:	4b54      	ldr	r3, [pc, #336]	; (8001424 <ACS+0x280>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	801a      	strh	r2, [r3, #0]
				Delta1 = DELTA;
 80012d8:	4b54      	ldr	r3, [pc, #336]	; (800142c <ACS+0x288>)
 80012da:	2250      	movs	r2, #80	; 0x50
 80012dc:	801a      	strh	r2, [r3, #0]
 80012de:	e01b      	b.n	8001318 <ACS+0x174>
			} else if ((Dist_ACS_1 > Seuil_Dist_1)
 80012e0:	4b51      	ldr	r3, [pc, #324]	; (8001428 <ACS+0x284>)
 80012e2:	881b      	ldrh	r3, [r3, #0]
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	f5b3 7f7b 	cmp.w	r3, #1004	; 0x3ec
 80012ea:	f0c0 80da 	bcc.w	80014a2 <ACS+0x2fe>
					&& (Dist_ACS_2 > Seuil_Dist_2)) {
 80012ee:	4b50      	ldr	r3, [pc, #320]	; (8001430 <ACS+0x28c>)
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	f240 4276 	movw	r2, #1142	; 0x476
 80012f8:	4293      	cmp	r3, r2
 80012fa:	f240 80d2 	bls.w	80014a2 <ACS+0x2fe>
				CVitD = 0;
 80012fe:	4b43      	ldr	r3, [pc, #268]	; (800140c <ACS+0x268>)
 8001300:	2200      	movs	r2, #0
 8001302:	801a      	strh	r2, [r3, #0]
				CVitG = 0;
 8001304:	4b43      	ldr	r3, [pc, #268]	; (8001414 <ACS+0x270>)
 8001306:	2200      	movs	r2, #0
 8001308:	801a      	strh	r2, [r3, #0]
				DirD = RECULE;
 800130a:	4b44      	ldr	r3, [pc, #272]	; (800141c <ACS+0x278>)
 800130c:	2200      	movs	r2, #0
 800130e:	801a      	strh	r2, [r3, #0]
				DirG = RECULE;
 8001310:	4b44      	ldr	r3, [pc, #272]	; (8001424 <ACS+0x280>)
 8001312:	2200      	movs	r2, #0
 8001314:	801a      	strh	r2, [r3, #0]
			if ((Dist_ACS_1 < Seuil_Dist_1 - Delta1)
 8001316:	e0c4      	b.n	80014a2 <ACS+0x2fe>
 8001318:	e0c3      	b.n	80014a2 <ACS+0x2fe>
		} else if (_DirD == RECULE && _DirG == RECULE) {
 800131a:	4b3f      	ldr	r3, [pc, #252]	; (8001418 <ACS+0x274>)
 800131c:	881b      	ldrh	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	f040 80ae 	bne.w	8001480 <ACS+0x2dc>
 8001324:	4b3e      	ldr	r3, [pc, #248]	; (8001420 <ACS+0x27c>)
 8001326:	881b      	ldrh	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	f040 80a9 	bne.w	8001480 <ACS+0x2dc>
			if ((Dist_ACS_3 < Seuil_Dist_3 - Delta3)
 800132e:	4b42      	ldr	r3, [pc, #264]	; (8001438 <ACS+0x294>)
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	b29b      	uxth	r3, r3
 8001334:	461a      	mov	r2, r3
 8001336:	4b41      	ldr	r3, [pc, #260]	; (800143c <ACS+0x298>)
 8001338:	881b      	ldrh	r3, [r3, #0]
 800133a:	f5c3 6388 	rsb	r3, r3, #1088	; 0x440
 800133e:	3305      	adds	r3, #5
 8001340:	429a      	cmp	r2, r3
 8001342:	da22      	bge.n	800138a <ACS+0x1e6>
					&& (Dist_ACS_4 < Seuil_Dist_4 - Delta4)) {
 8001344:	4b3e      	ldr	r3, [pc, #248]	; (8001440 <ACS+0x29c>)
 8001346:	881b      	ldrh	r3, [r3, #0]
 8001348:	b29b      	uxth	r3, r3
 800134a:	461a      	mov	r2, r3
 800134c:	4b3d      	ldr	r3, [pc, #244]	; (8001444 <ACS+0x2a0>)
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	f5c3 63a1 	rsb	r3, r3, #1288	; 0x508
 8001354:	3301      	adds	r3, #1
 8001356:	429a      	cmp	r2, r3
 8001358:	da17      	bge.n	800138a <ACS+0x1e6>
				CVitD = _CVitD;
 800135a:	4b2b      	ldr	r3, [pc, #172]	; (8001408 <ACS+0x264>)
 800135c:	881a      	ldrh	r2, [r3, #0]
 800135e:	4b2b      	ldr	r3, [pc, #172]	; (800140c <ACS+0x268>)
 8001360:	801a      	strh	r2, [r3, #0]
				CVitG = _CVitG;
 8001362:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <ACS+0x26c>)
 8001364:	881a      	ldrh	r2, [r3, #0]
 8001366:	4b2b      	ldr	r3, [pc, #172]	; (8001414 <ACS+0x270>)
 8001368:	801a      	strh	r2, [r3, #0]
				DirD = _DirD;
 800136a:	4b2b      	ldr	r3, [pc, #172]	; (8001418 <ACS+0x274>)
 800136c:	881a      	ldrh	r2, [r3, #0]
 800136e:	4b2b      	ldr	r3, [pc, #172]	; (800141c <ACS+0x278>)
 8001370:	801a      	strh	r2, [r3, #0]
				DirG = _DirG;
 8001372:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <ACS+0x27c>)
 8001374:	881a      	ldrh	r2, [r3, #0]
 8001376:	4b2b      	ldr	r3, [pc, #172]	; (8001424 <ACS+0x280>)
 8001378:	801a      	strh	r2, [r3, #0]
				Delta3 = Delta4 = 0;
 800137a:	4b32      	ldr	r3, [pc, #200]	; (8001444 <ACS+0x2a0>)
 800137c:	2200      	movs	r2, #0
 800137e:	801a      	strh	r2, [r3, #0]
 8001380:	4b30      	ldr	r3, [pc, #192]	; (8001444 <ACS+0x2a0>)
 8001382:	881a      	ldrh	r2, [r3, #0]
 8001384:	4b2d      	ldr	r3, [pc, #180]	; (800143c <ACS+0x298>)
 8001386:	801a      	strh	r2, [r3, #0]
 8001388:	e079      	b.n	800147e <ACS+0x2da>
			} else if ((Dist_ACS_3 > Seuil_Dist_3)
 800138a:	4b2b      	ldr	r3, [pc, #172]	; (8001438 <ACS+0x294>)
 800138c:	881b      	ldrh	r3, [r3, #0]
 800138e:	b29b      	uxth	r3, r3
 8001390:	f240 4245 	movw	r2, #1093	; 0x445
 8001394:	4293      	cmp	r3, r2
 8001396:	d915      	bls.n	80013c4 <ACS+0x220>
					&& (Dist_ACS_4 < Seuil_Dist_4)) {
 8001398:	4b29      	ldr	r3, [pc, #164]	; (8001440 <ACS+0x29c>)
 800139a:	881b      	ldrh	r3, [r3, #0]
 800139c:	b29b      	uxth	r3, r3
 800139e:	f5b3 6fa1 	cmp.w	r3, #1288	; 0x508
 80013a2:	d80f      	bhi.n	80013c4 <ACS+0x220>
				CVitD = V1;
 80013a4:	4b19      	ldr	r3, [pc, #100]	; (800140c <ACS+0x268>)
 80013a6:	2226      	movs	r2, #38	; 0x26
 80013a8:	801a      	strh	r2, [r3, #0]
				CVitG = V1;
 80013aa:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <ACS+0x270>)
 80013ac:	2226      	movs	r2, #38	; 0x26
 80013ae:	801a      	strh	r2, [r3, #0]
				DirD = AVANCE;
 80013b0:	4b1a      	ldr	r3, [pc, #104]	; (800141c <ACS+0x278>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	801a      	strh	r2, [r3, #0]
				DirG = RECULE;
 80013b6:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <ACS+0x280>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	801a      	strh	r2, [r3, #0]
				Delta3 = DELTA;
 80013bc:	4b1f      	ldr	r3, [pc, #124]	; (800143c <ACS+0x298>)
 80013be:	2250      	movs	r2, #80	; 0x50
 80013c0:	801a      	strh	r2, [r3, #0]
 80013c2:	e05c      	b.n	800147e <ACS+0x2da>
			} else if ((Dist_ACS_3 < Seuil_Dist_3)
 80013c4:	4b1c      	ldr	r3, [pc, #112]	; (8001438 <ACS+0x294>)
 80013c6:	881b      	ldrh	r3, [r3, #0]
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	f240 4244 	movw	r2, #1092	; 0x444
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d83a      	bhi.n	8001448 <ACS+0x2a4>
					&& (Dist_ACS_4 > Seuil_Dist_4)) {
 80013d2:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <ACS+0x29c>)
 80013d4:	881b      	ldrh	r3, [r3, #0]
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	f240 5209 	movw	r2, #1289	; 0x509
 80013dc:	4293      	cmp	r3, r2
 80013de:	d933      	bls.n	8001448 <ACS+0x2a4>
				CVitD = V1;
 80013e0:	4b0a      	ldr	r3, [pc, #40]	; (800140c <ACS+0x268>)
 80013e2:	2226      	movs	r2, #38	; 0x26
 80013e4:	801a      	strh	r2, [r3, #0]
				CVitG = V1;
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <ACS+0x270>)
 80013e8:	2226      	movs	r2, #38	; 0x26
 80013ea:	801a      	strh	r2, [r3, #0]
				DirG = AVANCE;
 80013ec:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <ACS+0x280>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	801a      	strh	r2, [r3, #0]
				DirD = RECULE;
 80013f2:	4b0a      	ldr	r3, [pc, #40]	; (800141c <ACS+0x278>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	801a      	strh	r2, [r3, #0]
				Delta4 = DELTA;
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <ACS+0x2a0>)
 80013fa:	2250      	movs	r2, #80	; 0x50
 80013fc:	801a      	strh	r2, [r3, #0]
 80013fe:	e03e      	b.n	800147e <ACS+0x2da>
 8001400:	200000bd 	.word	0x200000bd
 8001404:	200001f0 	.word	0x200001f0
 8001408:	20000168 	.word	0x20000168
 800140c:	200000a4 	.word	0x200000a4
 8001410:	200001f2 	.word	0x200001f2
 8001414:	200000a6 	.word	0x200000a6
 8001418:	20000170 	.word	0x20000170
 800141c:	20000166 	.word	0x20000166
 8001420:	20000200 	.word	0x20000200
 8001424:	2000022a 	.word	0x2000022a
 8001428:	20000234 	.word	0x20000234
 800142c:	200000be 	.word	0x200000be
 8001430:	20000184 	.word	0x20000184
 8001434:	200000c0 	.word	0x200000c0
 8001438:	20000180 	.word	0x20000180
 800143c:	200000c2 	.word	0x200000c2
 8001440:	2000022e 	.word	0x2000022e
 8001444:	200000c4 	.word	0x200000c4
			} else if ((Dist_ACS_3 > Seuil_Dist_3)
 8001448:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <ACS+0x310>)
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	b29b      	uxth	r3, r3
 800144e:	f240 4245 	movw	r2, #1093	; 0x445
 8001452:	4293      	cmp	r3, r2
 8001454:	d927      	bls.n	80014a6 <ACS+0x302>
					&& (Dist_ACS_4 > Seuil_Dist_4)) {
 8001456:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <ACS+0x314>)
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	b29b      	uxth	r3, r3
 800145c:	f240 5209 	movw	r2, #1289	; 0x509
 8001460:	4293      	cmp	r3, r2
 8001462:	d920      	bls.n	80014a6 <ACS+0x302>
				CVitD = 0;
 8001464:	4b15      	ldr	r3, [pc, #84]	; (80014bc <ACS+0x318>)
 8001466:	2200      	movs	r2, #0
 8001468:	801a      	strh	r2, [r3, #0]
				CVitG = 0;
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <ACS+0x31c>)
 800146c:	2200      	movs	r2, #0
 800146e:	801a      	strh	r2, [r3, #0]
				DirD = RECULE;
 8001470:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <ACS+0x320>)
 8001472:	2200      	movs	r2, #0
 8001474:	801a      	strh	r2, [r3, #0]
				DirG = RECULE;
 8001476:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <ACS+0x324>)
 8001478:	2200      	movs	r2, #0
 800147a:	801a      	strh	r2, [r3, #0]
			if ((Dist_ACS_3 < Seuil_Dist_3 - Delta3)
 800147c:	e013      	b.n	80014a6 <ACS+0x302>
 800147e:	e012      	b.n	80014a6 <ACS+0x302>
			CVitD = _CVitD;
 8001480:	4b12      	ldr	r3, [pc, #72]	; (80014cc <ACS+0x328>)
 8001482:	881a      	ldrh	r2, [r3, #0]
 8001484:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <ACS+0x318>)
 8001486:	801a      	strh	r2, [r3, #0]
			CVitG = _CVitG;
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <ACS+0x32c>)
 800148a:	881a      	ldrh	r2, [r3, #0]
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <ACS+0x31c>)
 800148e:	801a      	strh	r2, [r3, #0]
			DirD = _DirD;
 8001490:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <ACS+0x330>)
 8001492:	881a      	ldrh	r2, [r3, #0]
 8001494:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <ACS+0x320>)
 8001496:	801a      	strh	r2, [r3, #0]
			DirG = _DirG;
 8001498:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <ACS+0x334>)
 800149a:	881a      	ldrh	r2, [r3, #0]
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <ACS+0x324>)
 800149e:	801a      	strh	r2, [r3, #0]
		break;
 80014a0:	e002      	b.n	80014a8 <ACS+0x304>
			if ((Dist_ACS_1 < Seuil_Dist_1 - Delta1)
 80014a2:	bf00      	nop
 80014a4:	e000      	b.n	80014a8 <ACS+0x304>
			if ((Dist_ACS_3 < Seuil_Dist_3 - Delta3)
 80014a6:	bf00      	nop
		break;
 80014a8:	bf00      	nop
}
 80014aa:	bf00      	nop
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	20000180 	.word	0x20000180
 80014b8:	2000022e 	.word	0x2000022e
 80014bc:	200000a4 	.word	0x200000a4
 80014c0:	200000a6 	.word	0x200000a6
 80014c4:	20000166 	.word	0x20000166
 80014c8:	2000022a 	.word	0x2000022a
 80014cc:	20000168 	.word	0x20000168
 80014d0:	200001f2 	.word	0x200001f2
 80014d4:	20000170 	.word	0x20000170
 80014d8:	20000200 	.word	0x20000200

080014dc <Calcul_Vit>:

void Calcul_Vit(void) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
	static int first = 0;

	DistD = __HAL_TIM_GET_COUNTER(&htim3);
 80014e2:	4b31      	ldr	r3, [pc, #196]	; (80015a8 <Calcul_Vit+0xcc>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	4b30      	ldr	r3, [pc, #192]	; (80015ac <Calcul_Vit+0xd0>)
 80014ec:	801a      	strh	r2, [r3, #0]
	DistG = __HAL_TIM_GET_COUNTER(&htim4);
 80014ee:	4b30      	ldr	r3, [pc, #192]	; (80015b0 <Calcul_Vit+0xd4>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	4b2f      	ldr	r3, [pc, #188]	; (80015b4 <Calcul_Vit+0xd8>)
 80014f8:	801a      	strh	r2, [r3, #0]
	if(first == 0){
 80014fa:	4b2f      	ldr	r3, [pc, #188]	; (80015b8 <Calcul_Vit+0xdc>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d10a      	bne.n	8001518 <Calcul_Vit+0x3c>
		DistD = 0;
 8001502:	4b2a      	ldr	r3, [pc, #168]	; (80015ac <Calcul_Vit+0xd0>)
 8001504:	2200      	movs	r2, #0
 8001506:	801a      	strh	r2, [r3, #0]
		DistG = 0;
 8001508:	4b2a      	ldr	r3, [pc, #168]	; (80015b4 <Calcul_Vit+0xd8>)
 800150a:	2200      	movs	r2, #0
 800150c:	801a      	strh	r2, [r3, #0]
		first++;
 800150e:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <Calcul_Vit+0xdc>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	3301      	adds	r3, #1
 8001514:	4a28      	ldr	r2, [pc, #160]	; (80015b8 <Calcul_Vit+0xdc>)
 8001516:	6013      	str	r3, [r2, #0]
	}
	VitD = abs(DistD - DistD_old);
 8001518:	4b24      	ldr	r3, [pc, #144]	; (80015ac <Calcul_Vit+0xd0>)
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	461a      	mov	r2, r3
 800151e:	4b27      	ldr	r3, [pc, #156]	; (80015bc <Calcul_Vit+0xe0>)
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b00      	cmp	r3, #0
 8001526:	bfb8      	it	lt
 8001528:	425b      	neglt	r3, r3
 800152a:	b29a      	uxth	r2, r3
 800152c:	4b24      	ldr	r3, [pc, #144]	; (80015c0 <Calcul_Vit+0xe4>)
 800152e:	801a      	strh	r2, [r3, #0]
	VitG = abs(DistG - DistG_old);
 8001530:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <Calcul_Vit+0xd8>)
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	4b23      	ldr	r3, [pc, #140]	; (80015c4 <Calcul_Vit+0xe8>)
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b00      	cmp	r3, #0
 800153e:	bfb8      	it	lt
 8001540:	425b      	neglt	r3, r3
 8001542:	b29a      	uxth	r2, r3
 8001544:	4b20      	ldr	r3, [pc, #128]	; (80015c8 <Calcul_Vit+0xec>)
 8001546:	801a      	strh	r2, [r3, #0]
	DistD_old = DistD;
 8001548:	4b18      	ldr	r3, [pc, #96]	; (80015ac <Calcul_Vit+0xd0>)
 800154a:	881a      	ldrh	r2, [r3, #0]
 800154c:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <Calcul_Vit+0xe0>)
 800154e:	801a      	strh	r2, [r3, #0]
	DistG_old = DistG;
 8001550:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <Calcul_Vit+0xd8>)
 8001552:	881a      	ldrh	r2, [r3, #0]
 8001554:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <Calcul_Vit+0xe8>)
 8001556:	801a      	strh	r2, [r3, #0]
	if (DirD == DirG) {
 8001558:	4b1c      	ldr	r3, [pc, #112]	; (80015cc <Calcul_Vit+0xf0>)
 800155a:	881a      	ldrh	r2, [r3, #0]
 800155c:	4b1c      	ldr	r3, [pc, #112]	; (80015d0 <Calcul_Vit+0xf4>)
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	429a      	cmp	r2, r3
 8001562:	d11c      	bne.n	800159e <Calcul_Vit+0xc2>
		Dist_parcours = Dist_parcours + ((VitD + VitG) >> 1);
 8001564:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <Calcul_Vit+0xe4>)
 8001566:	881b      	ldrh	r3, [r3, #0]
 8001568:	461a      	mov	r2, r3
 800156a:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <Calcul_Vit+0xec>)
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	4413      	add	r3, r2
 8001570:	105b      	asrs	r3, r3, #1
 8001572:	461a      	mov	r2, r3
 8001574:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <Calcul_Vit+0xf8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4413      	add	r3, r2
 800157a:	4a16      	ldr	r2, [pc, #88]	; (80015d4 <Calcul_Vit+0xf8>)
 800157c:	6013      	str	r3, [r2, #0]
		int cx = snprintf(BLUE_TX, 100, "Dist %lu\n", Dist_parcours);
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <Calcul_Vit+0xf8>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a15      	ldr	r2, [pc, #84]	; (80015d8 <Calcul_Vit+0xfc>)
 8001584:	2164      	movs	r1, #100	; 0x64
 8001586:	4815      	ldr	r0, [pc, #84]	; (80015dc <Calcul_Vit+0x100>)
 8001588:	f007 fc7e 	bl	8008e88 <sniprintf>
 800158c:	6078      	str	r0, [r7, #4]
		HAL_UART_Transmit(&huart3, (uint8_t*) BLUE_TX, cx, HAL_MAX_DELAY);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	b29a      	uxth	r2, r3
 8001592:	f04f 33ff 	mov.w	r3, #4294967295
 8001596:	4911      	ldr	r1, [pc, #68]	; (80015dc <Calcul_Vit+0x100>)
 8001598:	4811      	ldr	r0, [pc, #68]	; (80015e0 <Calcul_Vit+0x104>)
 800159a:	f006 ff99 	bl	80084d0 <HAL_UART_Transmit>
	}
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000278 	.word	0x20000278
 80015ac:	200001f8 	.word	0x200001f8
 80015b0:	20000238 	.word	0x20000238
 80015b4:	20000182 	.word	0x20000182
 80015b8:	200000c8 	.word	0x200000c8
 80015bc:	200000a8 	.word	0x200000a8
 80015c0:	20000228 	.word	0x20000228
 80015c4:	200000aa 	.word	0x200000aa
 80015c8:	20000172 	.word	0x20000172
 80015cc:	20000166 	.word	0x20000166
 80015d0:	2000022a 	.word	0x2000022a
 80015d4:	200000b4 	.word	0x200000b4
 80015d8:	0800975c 	.word	0x0800975c
 80015dc:	2000018c 	.word	0x2000018c
 80015e0:	20000338 	.word	0x20000338

080015e4 <regulateur>:

void regulateur(void) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
	enum ETAT {
		ARRET, ACTIFE
	};
	static enum ETAT Etat = ARRET;
	uint16_t Kp_D = CKp_D;
 80015ea:	2364      	movs	r3, #100	; 0x64
 80015ec:	81fb      	strh	r3, [r7, #14]
	uint16_t Kp_G = CKp_G;
 80015ee:	2364      	movs	r3, #100	; 0x64
 80015f0:	81bb      	strh	r3, [r7, #12]
	uint16_t Ki_D = CKi_D;
 80015f2:	2350      	movs	r3, #80	; 0x50
 80015f4:	817b      	strh	r3, [r7, #10]
	uint16_t Ki_G = CKi_G;
 80015f6:	2350      	movs	r3, #80	; 0x50
 80015f8:	813b      	strh	r3, [r7, #8]
	uint16_t Kd_D = CKd_D;
 80015fa:	2300      	movs	r3, #0
 80015fc:	80fb      	strh	r3, [r7, #6]
	uint16_t Kd_G = CKd_G;
 80015fe:	2300      	movs	r3, #0
 8001600:	80bb      	strh	r3, [r7, #4]
	static int16_t S_erreursD = 0;
	static int16_t S_erreursG = 0;
	static int16_t V_erreurD = 0;
	static int16_t V_erreurG = 0;

	switch (Etat) {
 8001602:	4b9e      	ldr	r3, [pc, #632]	; (800187c <regulateur+0x298>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d002      	beq.n	8001610 <regulateur+0x2c>
 800160a:	2b01      	cmp	r3, #1
 800160c:	d052      	beq.n	80016b4 <regulateur+0xd0>

		}
		break;
	}
	}
}
 800160e:	e130      	b.n	8001872 <regulateur+0x28e>
		if (Mode == ACTIF || Mode == PARKMODE)
 8001610:	4b9b      	ldr	r3, [pc, #620]	; (8001880 <regulateur+0x29c>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b01      	cmp	r3, #1
 8001618:	d004      	beq.n	8001624 <regulateur+0x40>
 800161a:	4b99      	ldr	r3, [pc, #612]	; (8001880 <regulateur+0x29c>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d103      	bne.n	800162c <regulateur+0x48>
			Etat = ACTIFE;
 8001624:	4b95      	ldr	r3, [pc, #596]	; (800187c <regulateur+0x298>)
 8001626:	2201      	movs	r2, #1
 8001628:	701a      	strb	r2, [r3, #0]
		break;
 800162a:	e122      	b.n	8001872 <regulateur+0x28e>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 800162c:	4b95      	ldr	r3, [pc, #596]	; (8001884 <regulateur+0x2a0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	3334      	adds	r3, #52	; 0x34
 8001632:	330c      	adds	r3, #12
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001638:	4b92      	ldr	r3, [pc, #584]	; (8001884 <regulateur+0x2a0>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2200      	movs	r2, #0
 800163e:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 8001640:	210c      	movs	r1, #12
 8001642:	4890      	ldr	r0, [pc, #576]	; (8001884 <regulateur+0x2a0>)
 8001644:	f004 faa6 	bl	8005b94 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001648:	2100      	movs	r1, #0
 800164a:	488e      	ldr	r0, [pc, #568]	; (8001884 <regulateur+0x2a0>)
 800164c:	f004 faa2 	bl	8005b94 <HAL_TIM_PWM_Stop>
			HAL_GPIO_WritePin(IR3_out_GPIO_Port, IR3_out_Pin, GPIO_PIN_RESET);
 8001650:	2200      	movs	r2, #0
 8001652:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001656:	488c      	ldr	r0, [pc, #560]	; (8001888 <regulateur+0x2a4>)
 8001658:	f003 f9ac 	bl	80049b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IR4_out_GPIO_Port, IR4_out_Pin, GPIO_PIN_RESET);
 800165c:	2200      	movs	r2, #0
 800165e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001662:	488a      	ldr	r0, [pc, #552]	; (800188c <regulateur+0x2a8>)
 8001664:	f003 f9a6 	bl	80049b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IR1_out_GPIO_Port, IR1_out_Pin, GPIO_PIN_RESET);
 8001668:	2200      	movs	r2, #0
 800166a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800166e:	4887      	ldr	r0, [pc, #540]	; (800188c <regulateur+0x2a8>)
 8001670:	f003 f9a0 	bl	80049b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IR2_out_GPIO_Port, IR2_out_Pin, GPIO_PIN_RESET);
 8001674:	2200      	movs	r2, #0
 8001676:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800167a:	4884      	ldr	r0, [pc, #528]	; (800188c <regulateur+0x2a8>)
 800167c:	f003 f99a 	bl	80049b4 <HAL_GPIO_WritePin>
			HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON,
 8001680:	2101      	movs	r1, #1
 8001682:	2001      	movs	r0, #1
 8001684:	f003 f9e0 	bl	8004a48 <HAL_PWR_EnterSLEEPMode>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8001688:	4b7e      	ldr	r3, [pc, #504]	; (8001884 <regulateur+0x2a0>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	3334      	adds	r3, #52	; 0x34
 800168e:	330c      	adds	r3, #12
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001694:	4b7b      	ldr	r3, [pc, #492]	; (8001884 <regulateur+0x2a0>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2200      	movs	r2, #0
 800169a:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800169c:	210c      	movs	r1, #12
 800169e:	4879      	ldr	r0, [pc, #484]	; (8001884 <regulateur+0x2a0>)
 80016a0:	f004 fa00 	bl	8005aa4 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80016a4:	2100      	movs	r1, #0
 80016a6:	4877      	ldr	r0, [pc, #476]	; (8001884 <regulateur+0x2a0>)
 80016a8:	f004 f9fc 	bl	8005aa4 <HAL_TIM_PWM_Start>
			Time = 0;
 80016ac:	4b78      	ldr	r3, [pc, #480]	; (8001890 <regulateur+0x2ac>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
		break;
 80016b2:	e0de      	b.n	8001872 <regulateur+0x28e>
		if ((CVitD != 0) && (CVitG != 0))
 80016b4:	4b77      	ldr	r3, [pc, #476]	; (8001894 <regulateur+0x2b0>)
 80016b6:	881b      	ldrh	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d006      	beq.n	80016ca <regulateur+0xe6>
 80016bc:	4b76      	ldr	r3, [pc, #472]	; (8001898 <regulateur+0x2b4>)
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d002      	beq.n	80016ca <regulateur+0xe6>
			Time = 0;
 80016c4:	4b72      	ldr	r3, [pc, #456]	; (8001890 <regulateur+0x2ac>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
		if ((Mode == SLEEP) && (VitD == 0) && (VitG == 0) && Time > T_2_S)
 80016ca:	4b6d      	ldr	r3, [pc, #436]	; (8001880 <regulateur+0x29c>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d110      	bne.n	80016f6 <regulateur+0x112>
 80016d4:	4b71      	ldr	r3, [pc, #452]	; (800189c <regulateur+0x2b8>)
 80016d6:	881b      	ldrh	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d10c      	bne.n	80016f6 <regulateur+0x112>
 80016dc:	4b70      	ldr	r3, [pc, #448]	; (80018a0 <regulateur+0x2bc>)
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d108      	bne.n	80016f6 <regulateur+0x112>
 80016e4:	4b6a      	ldr	r3, [pc, #424]	; (8001890 <regulateur+0x2ac>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016ec:	d903      	bls.n	80016f6 <regulateur+0x112>
			Etat = ARRET;
 80016ee:	4b63      	ldr	r3, [pc, #396]	; (800187c <regulateur+0x298>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	701a      	strb	r2, [r3, #0]
		break;
 80016f4:	e0bc      	b.n	8001870 <regulateur+0x28c>
			ErreurD = CVitD - VitD;
 80016f6:	4b67      	ldr	r3, [pc, #412]	; (8001894 <regulateur+0x2b0>)
 80016f8:	881a      	ldrh	r2, [r3, #0]
 80016fa:	4b68      	ldr	r3, [pc, #416]	; (800189c <regulateur+0x2b8>)
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	b29b      	uxth	r3, r3
 8001702:	b21a      	sxth	r2, r3
 8001704:	4b67      	ldr	r3, [pc, #412]	; (80018a4 <regulateur+0x2c0>)
 8001706:	801a      	strh	r2, [r3, #0]
			ErreurG = CVitG - VitG;
 8001708:	4b63      	ldr	r3, [pc, #396]	; (8001898 <regulateur+0x2b4>)
 800170a:	881a      	ldrh	r2, [r3, #0]
 800170c:	4b64      	ldr	r3, [pc, #400]	; (80018a0 <regulateur+0x2bc>)
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	b29b      	uxth	r3, r3
 8001714:	b21a      	sxth	r2, r3
 8001716:	4b64      	ldr	r3, [pc, #400]	; (80018a8 <regulateur+0x2c4>)
 8001718:	801a      	strh	r2, [r3, #0]
			S_erreursD += ErreurD;
 800171a:	4b64      	ldr	r3, [pc, #400]	; (80018ac <regulateur+0x2c8>)
 800171c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001720:	b29a      	uxth	r2, r3
 8001722:	4b60      	ldr	r3, [pc, #384]	; (80018a4 <regulateur+0x2c0>)
 8001724:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001728:	b29b      	uxth	r3, r3
 800172a:	4413      	add	r3, r2
 800172c:	b29b      	uxth	r3, r3
 800172e:	b21a      	sxth	r2, r3
 8001730:	4b5e      	ldr	r3, [pc, #376]	; (80018ac <regulateur+0x2c8>)
 8001732:	801a      	strh	r2, [r3, #0]
			S_erreursG += ErreurG;
 8001734:	4b5e      	ldr	r3, [pc, #376]	; (80018b0 <regulateur+0x2cc>)
 8001736:	f9b3 3000 	ldrsh.w	r3, [r3]
 800173a:	b29a      	uxth	r2, r3
 800173c:	4b5a      	ldr	r3, [pc, #360]	; (80018a8 <regulateur+0x2c4>)
 800173e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001742:	b29b      	uxth	r3, r3
 8001744:	4413      	add	r3, r2
 8001746:	b29b      	uxth	r3, r3
 8001748:	b21a      	sxth	r2, r3
 800174a:	4b59      	ldr	r3, [pc, #356]	; (80018b0 <regulateur+0x2cc>)
 800174c:	801a      	strh	r2, [r3, #0]
			V_erreurD = ErreurD - ErreurD_old;
 800174e:	4b55      	ldr	r3, [pc, #340]	; (80018a4 <regulateur+0x2c0>)
 8001750:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001754:	b29a      	uxth	r2, r3
 8001756:	4b57      	ldr	r3, [pc, #348]	; (80018b4 <regulateur+0x2d0>)
 8001758:	f9b3 3000 	ldrsh.w	r3, [r3]
 800175c:	b29b      	uxth	r3, r3
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	b29b      	uxth	r3, r3
 8001762:	b21a      	sxth	r2, r3
 8001764:	4b54      	ldr	r3, [pc, #336]	; (80018b8 <regulateur+0x2d4>)
 8001766:	801a      	strh	r2, [r3, #0]
			V_erreurG = ErreurG - ErreurG_old;
 8001768:	4b4f      	ldr	r3, [pc, #316]	; (80018a8 <regulateur+0x2c4>)
 800176a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800176e:	b29a      	uxth	r2, r3
 8001770:	4b52      	ldr	r3, [pc, #328]	; (80018bc <regulateur+0x2d8>)
 8001772:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001776:	b29b      	uxth	r3, r3
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	b29b      	uxth	r3, r3
 800177c:	b21a      	sxth	r2, r3
 800177e:	4b50      	ldr	r3, [pc, #320]	; (80018c0 <regulateur+0x2dc>)
 8001780:	801a      	strh	r2, [r3, #0]
			ErreurD_old = ErreurD;
 8001782:	4b48      	ldr	r3, [pc, #288]	; (80018a4 <regulateur+0x2c0>)
 8001784:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001788:	4b4a      	ldr	r3, [pc, #296]	; (80018b4 <regulateur+0x2d0>)
 800178a:	801a      	strh	r2, [r3, #0]
			ErreurG_old = ErreurG;
 800178c:	4b46      	ldr	r3, [pc, #280]	; (80018a8 <regulateur+0x2c4>)
 800178e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001792:	4b4a      	ldr	r3, [pc, #296]	; (80018bc <regulateur+0x2d8>)
 8001794:	801a      	strh	r2, [r3, #0]
			Cmde_VitD = (unsigned int) Kp_D * (int) (ErreurD)
 8001796:	89fb      	ldrh	r3, [r7, #14]
 8001798:	4a42      	ldr	r2, [pc, #264]	; (80018a4 <regulateur+0x2c0>)
 800179a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800179e:	fb02 f203 	mul.w	r2, r2, r3
					+ (unsigned int) Ki_D * ((int) S_erreursD)
 80017a2:	897b      	ldrh	r3, [r7, #10]
 80017a4:	4941      	ldr	r1, [pc, #260]	; (80018ac <regulateur+0x2c8>)
 80017a6:	f9b1 1000 	ldrsh.w	r1, [r1]
 80017aa:	fb01 f303 	mul.w	r3, r1, r3
 80017ae:	441a      	add	r2, r3
					+ (unsigned int) Kd_D * (int) V_erreurD;
 80017b0:	88fb      	ldrh	r3, [r7, #6]
 80017b2:	4941      	ldr	r1, [pc, #260]	; (80018b8 <regulateur+0x2d4>)
 80017b4:	f9b1 1000 	ldrsh.w	r1, [r1]
 80017b8:	fb01 f303 	mul.w	r3, r1, r3
 80017bc:	4413      	add	r3, r2
 80017be:	461a      	mov	r2, r3
			Cmde_VitD = (unsigned int) Kp_D * (int) (ErreurD)
 80017c0:	4b40      	ldr	r3, [pc, #256]	; (80018c4 <regulateur+0x2e0>)
 80017c2:	601a      	str	r2, [r3, #0]
			Cmde_VitG = (unsigned int) Kp_G * (int) (ErreurG)
 80017c4:	89bb      	ldrh	r3, [r7, #12]
 80017c6:	4a38      	ldr	r2, [pc, #224]	; (80018a8 <regulateur+0x2c4>)
 80017c8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80017cc:	fb02 f203 	mul.w	r2, r2, r3
					+ (unsigned int) Ki_G * ((int) S_erreursG)
 80017d0:	893b      	ldrh	r3, [r7, #8]
 80017d2:	4937      	ldr	r1, [pc, #220]	; (80018b0 <regulateur+0x2cc>)
 80017d4:	f9b1 1000 	ldrsh.w	r1, [r1]
 80017d8:	fb01 f303 	mul.w	r3, r1, r3
 80017dc:	441a      	add	r2, r3
					+ (unsigned int) Kd_G * (int) V_erreurG;
 80017de:	88bb      	ldrh	r3, [r7, #4]
 80017e0:	4937      	ldr	r1, [pc, #220]	; (80018c0 <regulateur+0x2dc>)
 80017e2:	f9b1 1000 	ldrsh.w	r1, [r1]
 80017e6:	fb01 f303 	mul.w	r3, r1, r3
 80017ea:	4413      	add	r3, r2
 80017ec:	461a      	mov	r2, r3
			Cmde_VitG = (unsigned int) Kp_G * (int) (ErreurG)
 80017ee:	4b36      	ldr	r3, [pc, #216]	; (80018c8 <regulateur+0x2e4>)
 80017f0:	601a      	str	r2, [r3, #0]
			if (Cmde_VitD < 0)
 80017f2:	4b34      	ldr	r3, [pc, #208]	; (80018c4 <regulateur+0x2e0>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	da02      	bge.n	8001800 <regulateur+0x21c>
				Cmde_VitD = 0;
 80017fa:	4b32      	ldr	r3, [pc, #200]	; (80018c4 <regulateur+0x2e0>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
			if (Cmde_VitG < 0)
 8001800:	4b31      	ldr	r3, [pc, #196]	; (80018c8 <regulateur+0x2e4>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	da02      	bge.n	800180e <regulateur+0x22a>
				Cmde_VitG = 0;
 8001808:	4b2f      	ldr	r3, [pc, #188]	; (80018c8 <regulateur+0x2e4>)
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
			if (Cmde_VitD > 100 * POURCENT)
 800180e:	4b2d      	ldr	r3, [pc, #180]	; (80018c4 <regulateur+0x2e0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8001816:	dd03      	ble.n	8001820 <regulateur+0x23c>
				Cmde_VitD = 100 * POURCENT;
 8001818:	4b2a      	ldr	r3, [pc, #168]	; (80018c4 <regulateur+0x2e0>)
 800181a:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800181e:	601a      	str	r2, [r3, #0]
			if (Cmde_VitG > 100 * POURCENT)
 8001820:	4b29      	ldr	r3, [pc, #164]	; (80018c8 <regulateur+0x2e4>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8001828:	dd03      	ble.n	8001832 <regulateur+0x24e>
				Cmde_VitG = 100 * POURCENT;
 800182a:	4b27      	ldr	r3, [pc, #156]	; (80018c8 <regulateur+0x2e4>)
 800182c:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001830:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, (uint16_t ) Cmde_VitG);
 8001832:	4b14      	ldr	r3, [pc, #80]	; (8001884 <regulateur+0x2a0>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a24      	ldr	r2, [pc, #144]	; (80018c8 <regulateur+0x2e4>)
 8001838:	6812      	ldr	r2, [r2, #0]
 800183a:	b292      	uxth	r2, r2
 800183c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, (uint16_t ) Cmde_VitD);
 800183e:	4b11      	ldr	r3, [pc, #68]	; (8001884 <regulateur+0x2a0>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	3334      	adds	r3, #52	; 0x34
 8001844:	330c      	adds	r3, #12
 8001846:	4a1f      	ldr	r2, [pc, #124]	; (80018c4 <regulateur+0x2e0>)
 8001848:	6812      	ldr	r2, [r2, #0]
 800184a:	b292      	uxth	r2, r2
 800184c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, (GPIO_PinState) DirD);
 800184e:	4b1f      	ldr	r3, [pc, #124]	; (80018cc <regulateur+0x2e8>)
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	461a      	mov	r2, r3
 8001856:	f44f 7180 	mov.w	r1, #256	; 0x100
 800185a:	481d      	ldr	r0, [pc, #116]	; (80018d0 <regulateur+0x2ec>)
 800185c:	f003 f8aa 	bl	80049b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, (GPIO_PinState) DirG);
 8001860:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <regulateur+0x2f0>)
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	461a      	mov	r2, r3
 8001868:	2104      	movs	r1, #4
 800186a:	4808      	ldr	r0, [pc, #32]	; (800188c <regulateur+0x2a8>)
 800186c:	f003 f8a2 	bl	80049b4 <HAL_GPIO_WritePin>
		break;
 8001870:	bf00      	nop
}
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	200000cc 	.word	0x200000cc
 8001880:	200001f0 	.word	0x200001f0
 8001884:	200002f8 	.word	0x200002f8
 8001888:	40010800 	.word	0x40010800
 800188c:	40010c00 	.word	0x40010c00
 8001890:	20000094 	.word	0x20000094
 8001894:	200000a4 	.word	0x200000a4
 8001898:	200000a6 	.word	0x200000a6
 800189c:	20000228 	.word	0x20000228
 80018a0:	20000172 	.word	0x20000172
 80018a4:	200000ce 	.word	0x200000ce
 80018a8:	200000d0 	.word	0x200000d0
 80018ac:	200000d2 	.word	0x200000d2
 80018b0:	200000d4 	.word	0x200000d4
 80018b4:	200000d6 	.word	0x200000d6
 80018b8:	200000d8 	.word	0x200000d8
 80018bc:	200000da 	.word	0x200000da
 80018c0:	200000dc 	.word	0x200000dc
 80018c4:	200000ac 	.word	0x200000ac
 80018c8:	200000b0 	.word	0x200000b0
 80018cc:	20000166 	.word	0x20000166
 80018d0:	40011000 	.word	0x40011000
 80018d4:	2000022a 	.word	0x2000022a

080018d8 <park>:

void park(void) {
 80018d8:	b5b0      	push	{r4, r5, r7, lr}
 80018da:	b08a      	sub	sp, #40	; 0x28
 80018dc:	af00      	add	r7, sp, #0
			ARRET, SERVO_X0, MESURE_X0, VAL_X0, SERVO_Y0, MESURE_Y0, VAL_Y0, SERVO_Z0, MESURE_Z0, VAL_Z0, SEND_ZIGBEE
		};
	static enum ETAT Etat = ARRET;


	switch(Etat) {
 80018de:	4bb3      	ldr	r3, [pc, #716]	; (8001bac <park+0x2d4>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b0a      	cmp	r3, #10
 80018e4:	f200 81ee 	bhi.w	8001cc4 <park+0x3ec>
 80018e8:	a201      	add	r2, pc, #4	; (adr r2, 80018f0 <park+0x18>)
 80018ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ee:	bf00      	nop
 80018f0:	0800191d 	.word	0x0800191d
 80018f4:	08001957 	.word	0x08001957
 80018f8:	080019b3 	.word	0x080019b3
 80018fc:	080019fb 	.word	0x080019fb
 8001900:	08001a53 	.word	0x08001a53
 8001904:	08001aaf 	.word	0x08001aaf
 8001908:	08001af7 	.word	0x08001af7
 800190c:	08001b4f 	.word	0x08001b4f
 8001910:	08001bf1 	.word	0x08001bf1
 8001914:	08001c39 	.word	0x08001c39
 8001918:	08001c87 	.word	0x08001c87
		case ARRET : {
			if(Mode == PARKMODE) { // Si on est dans le parkmode on continue
 800191c:	4ba4      	ldr	r3, [pc, #656]	; (8001bb0 <park+0x2d8>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	f040 81cd 	bne.w	8001cc2 <park+0x3ea>
				Etat = SERVO_X0;
 8001928:	4ba0      	ldr	r3, [pc, #640]	; (8001bac <park+0x2d4>)
 800192a:	2201      	movs	r2, #1
 800192c:	701a      	strb	r2, [r3, #0]
				HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_4); // Arrete pour eviter les bugs
 800192e:	210c      	movs	r1, #12
 8001930:	48a0      	ldr	r0, [pc, #640]	; (8001bb4 <park+0x2dc>)
 8001932:	f004 f92f 	bl	8005b94 <HAL_TIM_PWM_Stop>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0); // Set to X0
 8001936:	4b9f      	ldr	r3, [pc, #636]	; (8001bb4 <park+0x2dc>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	3334      	adds	r3, #52	; 0x34
 800193c:	330c      	adds	r3, #12
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
				distance_sonar = 0;
 8001942:	4b9d      	ldr	r3, [pc, #628]	; (8001bb8 <park+0x2e0>)
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
				Dist_parcours = 0;
 8001948:	4b9c      	ldr	r3, [pc, #624]	; (8001bbc <park+0x2e4>)
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
				Tmod = 100;
 800194e:	4b9c      	ldr	r3, [pc, #624]	; (8001bc0 <park+0x2e8>)
 8001950:	2264      	movs	r2, #100	; 0x64
 8001952:	601a      	str	r2, [r3, #0]
			}/*else{
				// AECRIRE
			}*/

			break;
 8001954:	e1b5      	b.n	8001cc2 <park+0x3ea>
		}

		case SERVO_X0 : {
			HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_4); // Arrete pour eviter les bugs
 8001956:	210c      	movs	r1, #12
 8001958:	4896      	ldr	r0, [pc, #600]	; (8001bb4 <park+0x2dc>)
 800195a:	f004 f91b 	bl	8005b94 <HAL_TIM_PWM_Stop>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 7100); // Set to X0
 800195e:	4b95      	ldr	r3, [pc, #596]	; (8001bb4 <park+0x2dc>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	3334      	adds	r3, #52	; 0x34
 8001964:	330c      	adds	r3, #12
 8001966:	f641 32bc 	movw	r2, #7100	; 0x1bbc
 800196a:	601a      	str	r2, [r3, #0]
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); //lancement de PWM servo moteur
 800196c:	210c      	movs	r1, #12
 800196e:	4891      	ldr	r0, [pc, #580]	; (8001bb4 <park+0x2dc>)
 8001970:	f004 f898 	bl	8005aa4 <HAL_TIM_PWM_Start>

			Etat = MESURE_X0;
 8001974:	4b8d      	ldr	r3, [pc, #564]	; (8001bac <park+0x2d4>)
 8001976:	2202      	movs	r2, #2
 8001978:	701a      	strb	r2, [r3, #0]
			Tmod = 100;
 800197a:	4b91      	ldr	r3, [pc, #580]	; (8001bc0 <park+0x2e8>)
 800197c:	2264      	movs	r2, #100	; 0x64
 800197e:	601a      	str	r2, [r3, #0]
			int cx = snprintf(BLUE_TX, 100, "Etat suivant : MESURE_X0\n");
 8001980:	4a90      	ldr	r2, [pc, #576]	; (8001bc4 <park+0x2ec>)
 8001982:	4b91      	ldr	r3, [pc, #580]	; (8001bc8 <park+0x2f0>)
 8001984:	4615      	mov	r5, r2
 8001986:	461c      	mov	r4, r3
 8001988:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800198a:	6028      	str	r0, [r5, #0]
 800198c:	6069      	str	r1, [r5, #4]
 800198e:	60aa      	str	r2, [r5, #8]
 8001990:	60eb      	str	r3, [r5, #12]
 8001992:	cc03      	ldmia	r4!, {r0, r1}
 8001994:	6128      	str	r0, [r5, #16]
 8001996:	6169      	str	r1, [r5, #20]
 8001998:	8823      	ldrh	r3, [r4, #0]
 800199a:	832b      	strh	r3, [r5, #24]
 800199c:	2319      	movs	r3, #25
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
			HAL_UART_Transmit(&huart3, (uint8_t*) BLUE_TX, cx, HAL_MAX_DELAY);
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	f04f 33ff 	mov.w	r3, #4294967295
 80019a8:	4986      	ldr	r1, [pc, #536]	; (8001bc4 <park+0x2ec>)
 80019aa:	4888      	ldr	r0, [pc, #544]	; (8001bcc <park+0x2f4>)
 80019ac:	f006 fd90 	bl	80084d0 <HAL_UART_Transmit>
			break;
 80019b0:	e188      	b.n	8001cc4 <park+0x3ec>
		}
		case MESURE_X0 : {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80019b2:	2201      	movs	r2, #1
 80019b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019b8:	4885      	ldr	r0, [pc, #532]	; (8001bd0 <park+0x2f8>)
 80019ba:	f002 fffb 	bl	80049b4 <HAL_GPIO_WritePin>
			Etat = VAL_X0;
 80019be:	4b7b      	ldr	r3, [pc, #492]	; (8001bac <park+0x2d4>)
 80019c0:	2203      	movs	r2, #3
 80019c2:	701a      	strb	r2, [r3, #0]
			int cx = snprintf(BLUE_TX, 100, "Etat suivant : VAL_X0\n");
 80019c4:	4a7f      	ldr	r2, [pc, #508]	; (8001bc4 <park+0x2ec>)
 80019c6:	4b83      	ldr	r3, [pc, #524]	; (8001bd4 <park+0x2fc>)
 80019c8:	4614      	mov	r4, r2
 80019ca:	461d      	mov	r5, r3
 80019cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019ce:	6020      	str	r0, [r4, #0]
 80019d0:	6061      	str	r1, [r4, #4]
 80019d2:	60a2      	str	r2, [r4, #8]
 80019d4:	60e3      	str	r3, [r4, #12]
 80019d6:	6828      	ldr	r0, [r5, #0]
 80019d8:	6120      	str	r0, [r4, #16]
 80019da:	88ab      	ldrh	r3, [r5, #4]
 80019dc:	79aa      	ldrb	r2, [r5, #6]
 80019de:	82a3      	strh	r3, [r4, #20]
 80019e0:	4613      	mov	r3, r2
 80019e2:	75a3      	strb	r3, [r4, #22]
 80019e4:	2316      	movs	r3, #22
 80019e6:	623b      	str	r3, [r7, #32]
			HAL_UART_Transmit(&huart3, (uint8_t*) BLUE_TX, cx, HAL_MAX_DELAY);
 80019e8:	6a3b      	ldr	r3, [r7, #32]
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	f04f 33ff 	mov.w	r3, #4294967295
 80019f0:	4974      	ldr	r1, [pc, #464]	; (8001bc4 <park+0x2ec>)
 80019f2:	4876      	ldr	r0, [pc, #472]	; (8001bcc <park+0x2f4>)
 80019f4:	f006 fd6c 	bl	80084d0 <HAL_UART_Transmit>
			break;
 80019f8:	e164      	b.n	8001cc4 <park+0x3ec>
		}
		case VAL_X0 : {
			while(distance_sonar == 0);
 80019fa:	bf00      	nop
 80019fc:	4b6e      	ldr	r3, [pc, #440]	; (8001bb8 <park+0x2e0>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0fb      	beq.n	80019fc <park+0x124>
			position_0[0] = distance_sonar;
 8001a04:	4b6c      	ldr	r3, [pc, #432]	; (8001bb8 <park+0x2e0>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a73      	ldr	r2, [pc, #460]	; (8001bd8 <park+0x300>)
 8001a0a:	6013      	str	r3, [r2, #0]
			distance_sonar = 0;
 8001a0c:	4b6a      	ldr	r3, [pc, #424]	; (8001bb8 <park+0x2e0>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
			Etat = SERVO_Y0;
 8001a12:	4b66      	ldr	r3, [pc, #408]	; (8001bac <park+0x2d4>)
 8001a14:	2204      	movs	r2, #4
 8001a16:	701a      	strb	r2, [r3, #0]
			Tmod = 500;
 8001a18:	4b69      	ldr	r3, [pc, #420]	; (8001bc0 <park+0x2e8>)
 8001a1a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001a1e:	601a      	str	r2, [r3, #0]
			int cx = snprintf(BLUE_TX, 100, "Etat suivant : SERVO_Y0\n");
 8001a20:	4a68      	ldr	r2, [pc, #416]	; (8001bc4 <park+0x2ec>)
 8001a22:	4b6e      	ldr	r3, [pc, #440]	; (8001bdc <park+0x304>)
 8001a24:	4615      	mov	r5, r2
 8001a26:	461c      	mov	r4, r3
 8001a28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a2a:	6028      	str	r0, [r5, #0]
 8001a2c:	6069      	str	r1, [r5, #4]
 8001a2e:	60aa      	str	r2, [r5, #8]
 8001a30:	60eb      	str	r3, [r5, #12]
 8001a32:	cc03      	ldmia	r4!, {r0, r1}
 8001a34:	6128      	str	r0, [r5, #16]
 8001a36:	6169      	str	r1, [r5, #20]
 8001a38:	7823      	ldrb	r3, [r4, #0]
 8001a3a:	762b      	strb	r3, [r5, #24]
 8001a3c:	2318      	movs	r3, #24
 8001a3e:	61fb      	str	r3, [r7, #28]
			HAL_UART_Transmit(&huart3, (uint8_t*) BLUE_TX,cx, HAL_MAX_DELAY);
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	f04f 33ff 	mov.w	r3, #4294967295
 8001a48:	495e      	ldr	r1, [pc, #376]	; (8001bc4 <park+0x2ec>)
 8001a4a:	4860      	ldr	r0, [pc, #384]	; (8001bcc <park+0x2f4>)
 8001a4c:	f006 fd40 	bl	80084d0 <HAL_UART_Transmit>
			break;
 8001a50:	e138      	b.n	8001cc4 <park+0x3ec>
		}
		case SERVO_Y0 : {
			HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_4); // Arrete pour eviter les bugs
 8001a52:	210c      	movs	r1, #12
 8001a54:	4857      	ldr	r0, [pc, #348]	; (8001bb4 <park+0x2dc>)
 8001a56:	f004 f89d 	bl	8005b94 <HAL_TIM_PWM_Stop>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 2300); // Set to Y0
 8001a5a:	4b56      	ldr	r3, [pc, #344]	; (8001bb4 <park+0x2dc>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	3334      	adds	r3, #52	; 0x34
 8001a60:	330c      	adds	r3, #12
 8001a62:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8001a66:	601a      	str	r2, [r3, #0]
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); //lancement de PWM servo moteur
 8001a68:	210c      	movs	r1, #12
 8001a6a:	4852      	ldr	r0, [pc, #328]	; (8001bb4 <park+0x2dc>)
 8001a6c:	f004 f81a 	bl	8005aa4 <HAL_TIM_PWM_Start>

			Etat = MESURE_Y0;
 8001a70:	4b4e      	ldr	r3, [pc, #312]	; (8001bac <park+0x2d4>)
 8001a72:	2205      	movs	r2, #5
 8001a74:	701a      	strb	r2, [r3, #0]
			Tmod = 100;
 8001a76:	4b52      	ldr	r3, [pc, #328]	; (8001bc0 <park+0x2e8>)
 8001a78:	2264      	movs	r2, #100	; 0x64
 8001a7a:	601a      	str	r2, [r3, #0]
			int cx = snprintf(BLUE_TX, 100, "Etat suivant : MESURE_Y0\n");
 8001a7c:	4a51      	ldr	r2, [pc, #324]	; (8001bc4 <park+0x2ec>)
 8001a7e:	4b58      	ldr	r3, [pc, #352]	; (8001be0 <park+0x308>)
 8001a80:	4615      	mov	r5, r2
 8001a82:	461c      	mov	r4, r3
 8001a84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a86:	6028      	str	r0, [r5, #0]
 8001a88:	6069      	str	r1, [r5, #4]
 8001a8a:	60aa      	str	r2, [r5, #8]
 8001a8c:	60eb      	str	r3, [r5, #12]
 8001a8e:	cc03      	ldmia	r4!, {r0, r1}
 8001a90:	6128      	str	r0, [r5, #16]
 8001a92:	6169      	str	r1, [r5, #20]
 8001a94:	8823      	ldrh	r3, [r4, #0]
 8001a96:	832b      	strh	r3, [r5, #24]
 8001a98:	2319      	movs	r3, #25
 8001a9a:	61bb      	str	r3, [r7, #24]
			HAL_UART_Transmit(&huart3, (uint8_t*) BLUE_TX,cx, HAL_MAX_DELAY);
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa4:	4947      	ldr	r1, [pc, #284]	; (8001bc4 <park+0x2ec>)
 8001aa6:	4849      	ldr	r0, [pc, #292]	; (8001bcc <park+0x2f4>)
 8001aa8:	f006 fd12 	bl	80084d0 <HAL_UART_Transmit>
			break;
 8001aac:	e10a      	b.n	8001cc4 <park+0x3ec>

		}
		case MESURE_Y0 : {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ab4:	4846      	ldr	r0, [pc, #280]	; (8001bd0 <park+0x2f8>)
 8001ab6:	f002 ff7d 	bl	80049b4 <HAL_GPIO_WritePin>
			Etat = VAL_Y0;
 8001aba:	4b3c      	ldr	r3, [pc, #240]	; (8001bac <park+0x2d4>)
 8001abc:	2206      	movs	r2, #6
 8001abe:	701a      	strb	r2, [r3, #0]
			int cx = snprintf(BLUE_TX, 100, "Etat suivant : VAL_Y0\n");
 8001ac0:	4a40      	ldr	r2, [pc, #256]	; (8001bc4 <park+0x2ec>)
 8001ac2:	4b48      	ldr	r3, [pc, #288]	; (8001be4 <park+0x30c>)
 8001ac4:	4614      	mov	r4, r2
 8001ac6:	461d      	mov	r5, r3
 8001ac8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aca:	6020      	str	r0, [r4, #0]
 8001acc:	6061      	str	r1, [r4, #4]
 8001ace:	60a2      	str	r2, [r4, #8]
 8001ad0:	60e3      	str	r3, [r4, #12]
 8001ad2:	6828      	ldr	r0, [r5, #0]
 8001ad4:	6120      	str	r0, [r4, #16]
 8001ad6:	88ab      	ldrh	r3, [r5, #4]
 8001ad8:	79aa      	ldrb	r2, [r5, #6]
 8001ada:	82a3      	strh	r3, [r4, #20]
 8001adc:	4613      	mov	r3, r2
 8001ade:	75a3      	strb	r3, [r4, #22]
 8001ae0:	2316      	movs	r3, #22
 8001ae2:	617b      	str	r3, [r7, #20]
			HAL_UART_Transmit(&huart3, (uint8_t*) BLUE_TX,cx, HAL_MAX_DELAY);
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8001aec:	4935      	ldr	r1, [pc, #212]	; (8001bc4 <park+0x2ec>)
 8001aee:	4837      	ldr	r0, [pc, #220]	; (8001bcc <park+0x2f4>)
 8001af0:	f006 fcee 	bl	80084d0 <HAL_UART_Transmit>
			break;
 8001af4:	e0e6      	b.n	8001cc4 <park+0x3ec>
		}
		case VAL_Y0 : {
			while(distance_sonar == 0);
 8001af6:	bf00      	nop
 8001af8:	4b2f      	ldr	r3, [pc, #188]	; (8001bb8 <park+0x2e0>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0fb      	beq.n	8001af8 <park+0x220>
			position_0[1] = distance_sonar;
 8001b00:	4b2d      	ldr	r3, [pc, #180]	; (8001bb8 <park+0x2e0>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a34      	ldr	r2, [pc, #208]	; (8001bd8 <park+0x300>)
 8001b06:	6053      	str	r3, [r2, #4]
			distance_sonar = 0;
 8001b08:	4b2b      	ldr	r3, [pc, #172]	; (8001bb8 <park+0x2e0>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
			Etat = SERVO_Z0;
 8001b0e:	4b27      	ldr	r3, [pc, #156]	; (8001bac <park+0x2d4>)
 8001b10:	2207      	movs	r2, #7
 8001b12:	701a      	strb	r2, [r3, #0]
			Tmod = 500;
 8001b14:	4b2a      	ldr	r3, [pc, #168]	; (8001bc0 <park+0x2e8>)
 8001b16:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001b1a:	601a      	str	r2, [r3, #0]
			int cx = snprintf(BLUE_TX, 100, "Etat suivant : SERVO_Z0\n");
 8001b1c:	4a29      	ldr	r2, [pc, #164]	; (8001bc4 <park+0x2ec>)
 8001b1e:	4b32      	ldr	r3, [pc, #200]	; (8001be8 <park+0x310>)
 8001b20:	4615      	mov	r5, r2
 8001b22:	461c      	mov	r4, r3
 8001b24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b26:	6028      	str	r0, [r5, #0]
 8001b28:	6069      	str	r1, [r5, #4]
 8001b2a:	60aa      	str	r2, [r5, #8]
 8001b2c:	60eb      	str	r3, [r5, #12]
 8001b2e:	cc03      	ldmia	r4!, {r0, r1}
 8001b30:	6128      	str	r0, [r5, #16]
 8001b32:	6169      	str	r1, [r5, #20]
 8001b34:	7823      	ldrb	r3, [r4, #0]
 8001b36:	762b      	strb	r3, [r5, #24]
 8001b38:	2318      	movs	r3, #24
 8001b3a:	613b      	str	r3, [r7, #16]
			HAL_UART_Transmit(&huart3, (uint8_t*) BLUE_TX, cx, HAL_MAX_DELAY);
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	f04f 33ff 	mov.w	r3, #4294967295
 8001b44:	491f      	ldr	r1, [pc, #124]	; (8001bc4 <park+0x2ec>)
 8001b46:	4821      	ldr	r0, [pc, #132]	; (8001bcc <park+0x2f4>)
 8001b48:	f006 fcc2 	bl	80084d0 <HAL_UART_Transmit>
			break;
 8001b4c:	e0ba      	b.n	8001cc4 <park+0x3ec>
		}
		case SERVO_Z0 : {
			HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_4); // Arrete pour eviter les bugs
 8001b4e:	210c      	movs	r1, #12
 8001b50:	4818      	ldr	r0, [pc, #96]	; (8001bb4 <park+0x2dc>)
 8001b52:	f004 f81f 	bl	8005b94 <HAL_TIM_PWM_Stop>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 800); // Set to Z0
 8001b56:	4b17      	ldr	r3, [pc, #92]	; (8001bb4 <park+0x2dc>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	3334      	adds	r3, #52	; 0x34
 8001b5c:	330c      	adds	r3, #12
 8001b5e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001b62:	601a      	str	r2, [r3, #0]
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); //lancement de PWM servo moteur
 8001b64:	210c      	movs	r1, #12
 8001b66:	4813      	ldr	r0, [pc, #76]	; (8001bb4 <park+0x2dc>)
 8001b68:	f003 ff9c 	bl	8005aa4 <HAL_TIM_PWM_Start>

			Etat = MESURE_Z0;
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	; (8001bac <park+0x2d4>)
 8001b6e:	2208      	movs	r2, #8
 8001b70:	701a      	strb	r2, [r3, #0]
			Tmod = 100;
 8001b72:	4b13      	ldr	r3, [pc, #76]	; (8001bc0 <park+0x2e8>)
 8001b74:	2264      	movs	r2, #100	; 0x64
 8001b76:	601a      	str	r2, [r3, #0]
			int cx = snprintf(BLUE_TX, 100, "Etat suivant : MESURE_Z0\n");
 8001b78:	4a12      	ldr	r2, [pc, #72]	; (8001bc4 <park+0x2ec>)
 8001b7a:	4b1c      	ldr	r3, [pc, #112]	; (8001bec <park+0x314>)
 8001b7c:	4615      	mov	r5, r2
 8001b7e:	461c      	mov	r4, r3
 8001b80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b82:	6028      	str	r0, [r5, #0]
 8001b84:	6069      	str	r1, [r5, #4]
 8001b86:	60aa      	str	r2, [r5, #8]
 8001b88:	60eb      	str	r3, [r5, #12]
 8001b8a:	cc03      	ldmia	r4!, {r0, r1}
 8001b8c:	6128      	str	r0, [r5, #16]
 8001b8e:	6169      	str	r1, [r5, #20]
 8001b90:	8823      	ldrh	r3, [r4, #0]
 8001b92:	832b      	strh	r3, [r5, #24]
 8001b94:	2319      	movs	r3, #25
 8001b96:	60fb      	str	r3, [r7, #12]
			HAL_UART_Transmit(&huart3, (uint8_t*) BLUE_TX, cx, HAL_MAX_DELAY);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba0:	4908      	ldr	r1, [pc, #32]	; (8001bc4 <park+0x2ec>)
 8001ba2:	480a      	ldr	r0, [pc, #40]	; (8001bcc <park+0x2f4>)
 8001ba4:	f006 fc94 	bl	80084d0 <HAL_UART_Transmit>
			break;
 8001ba8:	e08c      	b.n	8001cc4 <park+0x3ec>
 8001baa:	bf00      	nop
 8001bac:	200000de 	.word	0x200000de
 8001bb0:	200001f0 	.word	0x200001f0
 8001bb4:	200002b8 	.word	0x200002b8
 8001bb8:	200000b8 	.word	0x200000b8
 8001bbc:	200000b4 	.word	0x200000b4
 8001bc0:	20000000 	.word	0x20000000
 8001bc4:	2000018c 	.word	0x2000018c
 8001bc8:	08009768 	.word	0x08009768
 8001bcc:	20000338 	.word	0x20000338
 8001bd0:	40010c00 	.word	0x40010c00
 8001bd4:	08009784 	.word	0x08009784
 8001bd8:	20000174 	.word	0x20000174
 8001bdc:	0800979c 	.word	0x0800979c
 8001be0:	080097b8 	.word	0x080097b8
 8001be4:	080097d4 	.word	0x080097d4
 8001be8:	080097ec 	.word	0x080097ec
 8001bec:	08009808 	.word	0x08009808

		}
		case MESURE_Z0 : {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bf6:	4835      	ldr	r0, [pc, #212]	; (8001ccc <park+0x3f4>)
 8001bf8:	f002 fedc 	bl	80049b4 <HAL_GPIO_WritePin>
			Etat = VAL_Z0;
 8001bfc:	4b34      	ldr	r3, [pc, #208]	; (8001cd0 <park+0x3f8>)
 8001bfe:	2209      	movs	r2, #9
 8001c00:	701a      	strb	r2, [r3, #0]
			int cx = snprintf(BLUE_TX, 100, "Etat suivant : VAL_Z0\n");
 8001c02:	4a34      	ldr	r2, [pc, #208]	; (8001cd4 <park+0x3fc>)
 8001c04:	4b34      	ldr	r3, [pc, #208]	; (8001cd8 <park+0x400>)
 8001c06:	4614      	mov	r4, r2
 8001c08:	461d      	mov	r5, r3
 8001c0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c0c:	6020      	str	r0, [r4, #0]
 8001c0e:	6061      	str	r1, [r4, #4]
 8001c10:	60a2      	str	r2, [r4, #8]
 8001c12:	60e3      	str	r3, [r4, #12]
 8001c14:	6828      	ldr	r0, [r5, #0]
 8001c16:	6120      	str	r0, [r4, #16]
 8001c18:	88ab      	ldrh	r3, [r5, #4]
 8001c1a:	79aa      	ldrb	r2, [r5, #6]
 8001c1c:	82a3      	strh	r3, [r4, #20]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	75a3      	strb	r3, [r4, #22]
 8001c22:	2316      	movs	r3, #22
 8001c24:	60bb      	str	r3, [r7, #8]
			HAL_UART_Transmit(&huart3, (uint8_t*) BLUE_TX, cx, HAL_MAX_DELAY);
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2e:	4929      	ldr	r1, [pc, #164]	; (8001cd4 <park+0x3fc>)
 8001c30:	482a      	ldr	r0, [pc, #168]	; (8001cdc <park+0x404>)
 8001c32:	f006 fc4d 	bl	80084d0 <HAL_UART_Transmit>
			break;
 8001c36:	e045      	b.n	8001cc4 <park+0x3ec>
		}
		case VAL_Z0 : {
			while(distance_sonar == 0);
 8001c38:	bf00      	nop
 8001c3a:	4b29      	ldr	r3, [pc, #164]	; (8001ce0 <park+0x408>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0fb      	beq.n	8001c3a <park+0x362>
			position_0[2] = distance_sonar;
 8001c42:	4b27      	ldr	r3, [pc, #156]	; (8001ce0 <park+0x408>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a27      	ldr	r2, [pc, #156]	; (8001ce4 <park+0x40c>)
 8001c48:	6093      	str	r3, [r2, #8]
			distance_sonar = 0;
 8001c4a:	4b25      	ldr	r3, [pc, #148]	; (8001ce0 <park+0x408>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
			Etat = SEND_ZIGBEE;
 8001c50:	4b1f      	ldr	r3, [pc, #124]	; (8001cd0 <park+0x3f8>)
 8001c52:	220a      	movs	r2, #10
 8001c54:	701a      	strb	r2, [r3, #0]
			int cx = snprintf(BLUE_TX, 100, "Etat suivant : SEND_ZIGBEE\n");
 8001c56:	4a1f      	ldr	r2, [pc, #124]	; (8001cd4 <park+0x3fc>)
 8001c58:	4b23      	ldr	r3, [pc, #140]	; (8001ce8 <park+0x410>)
 8001c5a:	4615      	mov	r5, r2
 8001c5c:	461c      	mov	r4, r3
 8001c5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c60:	6028      	str	r0, [r5, #0]
 8001c62:	6069      	str	r1, [r5, #4]
 8001c64:	60aa      	str	r2, [r5, #8]
 8001c66:	60eb      	str	r3, [r5, #12]
 8001c68:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001c6a:	6128      	str	r0, [r5, #16]
 8001c6c:	6169      	str	r1, [r5, #20]
 8001c6e:	61aa      	str	r2, [r5, #24]
 8001c70:	231b      	movs	r3, #27
 8001c72:	607b      	str	r3, [r7, #4]
			HAL_UART_Transmit(&huart3, (uint8_t*) BLUE_TX, cx, HAL_MAX_DELAY);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7c:	4915      	ldr	r1, [pc, #84]	; (8001cd4 <park+0x3fc>)
 8001c7e:	4817      	ldr	r0, [pc, #92]	; (8001cdc <park+0x404>)
 8001c80:	f006 fc26 	bl	80084d0 <HAL_UART_Transmit>
			break;
 8001c84:	e01e      	b.n	8001cc4 <park+0x3ec>
			if(zigbee_state == 1){

			}else{

			}
			Etat = ARRET;
 8001c86:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <park+0x3f8>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
			Mode = STOP;
 8001c8c:	4b17      	ldr	r3, [pc, #92]	; (8001cec <park+0x414>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	701a      	strb	r2, [r3, #0]
			int cx = snprintf(BLUE_TX, 100, "Etat suivant : FINI\n");
 8001c92:	4a10      	ldr	r2, [pc, #64]	; (8001cd4 <park+0x3fc>)
 8001c94:	4b16      	ldr	r3, [pc, #88]	; (8001cf0 <park+0x418>)
 8001c96:	4615      	mov	r5, r2
 8001c98:	461c      	mov	r4, r3
 8001c9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c9c:	6028      	str	r0, [r5, #0]
 8001c9e:	6069      	str	r1, [r5, #4]
 8001ca0:	60aa      	str	r2, [r5, #8]
 8001ca2:	60eb      	str	r3, [r5, #12]
 8001ca4:	6820      	ldr	r0, [r4, #0]
 8001ca6:	6128      	str	r0, [r5, #16]
 8001ca8:	7923      	ldrb	r3, [r4, #4]
 8001caa:	752b      	strb	r3, [r5, #20]
 8001cac:	2314      	movs	r3, #20
 8001cae:	603b      	str	r3, [r7, #0]
			HAL_UART_Transmit(&huart3, (uint8_t*) BLUE_TX, cx, HAL_MAX_DELAY);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb8:	4906      	ldr	r1, [pc, #24]	; (8001cd4 <park+0x3fc>)
 8001cba:	4808      	ldr	r0, [pc, #32]	; (8001cdc <park+0x404>)
 8001cbc:	f006 fc08 	bl	80084d0 <HAL_UART_Transmit>
		}
	}
}
 8001cc0:	e000      	b.n	8001cc4 <park+0x3ec>
			break;
 8001cc2:	bf00      	nop
}
 8001cc4:	bf00      	nop
 8001cc6:	3728      	adds	r7, #40	; 0x28
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bdb0      	pop	{r4, r5, r7, pc}
 8001ccc:	40010c00 	.word	0x40010c00
 8001cd0:	200000de 	.word	0x200000de
 8001cd4:	2000018c 	.word	0x2000018c
 8001cd8:	08009824 	.word	0x08009824
 8001cdc:	20000338 	.word	0x20000338
 8001ce0:	200000b8 	.word	0x200000b8
 8001ce4:	20000174 	.word	0x20000174
 8001ce8:	0800983c 	.word	0x0800983c
 8001cec:	200001f0 	.word	0x200001f0
 8001cf0:	08009858 	.word	0x08009858

08001cf4 <addon>:
		}
	}

}*/

void addon(void) {// Addon = controleur + ts
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
	if (Tpark >= Tmod) { // Periode 200ms d'actualisation
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <addon+0x20>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <addon+0x24>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d304      	bcc.n	8001d0e <addon+0x1a>
		Tpark= 0;
 8001d04:	4b03      	ldr	r3, [pc, #12]	; (8001d14 <addon+0x20>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
		park();
 8001d0a:	f7ff fde5 	bl	80018d8 <park>
	}
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	2000009c 	.word	0x2000009c
 8001d18:	20000000 	.word	0x20000000

08001d1c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART3) {
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a59      	ldr	r2, [pc, #356]	; (8001e90 <HAL_UART_RxCpltCallback+0x174>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	f040 80ab 	bne.w	8001e86 <HAL_UART_RxCpltCallback+0x16a>

		switch (BLUE_RX) {
 8001d30:	4b58      	ldr	r3, [pc, #352]	; (8001e94 <HAL_UART_RxCpltCallback+0x178>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	3b44      	subs	r3, #68	; 0x44
 8001d36:	2b33      	cmp	r3, #51	; 0x33
 8001d38:	f200 809b 	bhi.w	8001e72 <HAL_UART_RxCpltCallback+0x156>
 8001d3c:	a201      	add	r2, pc, #4	; (adr r2, 8001d44 <HAL_UART_RxCpltCallback+0x28>)
 8001d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d42:	bf00      	nop
 8001d44:	08001e7b 	.word	0x08001e7b
 8001d48:	08001e73 	.word	0x08001e73
 8001d4c:	08001e15 	.word	0x08001e15
 8001d50:	08001e73 	.word	0x08001e73
 8001d54:	08001e73 	.word	0x08001e73
 8001d58:	08001e73 	.word	0x08001e73
 8001d5c:	08001e73 	.word	0x08001e73
 8001d60:	08001e73 	.word	0x08001e73
 8001d64:	08001e2b 	.word	0x08001e2b
 8001d68:	08001e73 	.word	0x08001e73
 8001d6c:	08001e73 	.word	0x08001e73
 8001d70:	08001e73 	.word	0x08001e73
 8001d74:	08001e73 	.word	0x08001e73
 8001d78:	08001e73 	.word	0x08001e73
 8001d7c:	08001e33 	.word	0x08001e33
 8001d80:	08001e73 	.word	0x08001e73
 8001d84:	08001e73 	.word	0x08001e73
 8001d88:	08001e57 	.word	0x08001e57
 8001d8c:	08001e1d 	.word	0x08001e1d
 8001d90:	08001e3b 	.word	0x08001e3b
 8001d94:	08001e73 	.word	0x08001e73
 8001d98:	08001e73 	.word	0x08001e73
 8001d9c:	08001e73 	.word	0x08001e73
 8001da0:	08001e73 	.word	0x08001e73
 8001da4:	08001e73 	.word	0x08001e73
 8001da8:	08001e73 	.word	0x08001e73
 8001dac:	08001e73 	.word	0x08001e73
 8001db0:	08001e73 	.word	0x08001e73
 8001db4:	08001e73 	.word	0x08001e73
 8001db8:	08001e73 	.word	0x08001e73
 8001dbc:	08001e73 	.word	0x08001e73
 8001dc0:	08001e73 	.word	0x08001e73
 8001dc4:	08001e73 	.word	0x08001e73
 8001dc8:	08001e73 	.word	0x08001e73
 8001dcc:	08001e73 	.word	0x08001e73
 8001dd0:	08001e73 	.word	0x08001e73
 8001dd4:	08001e73 	.word	0x08001e73
 8001dd8:	08001e73 	.word	0x08001e73
 8001ddc:	08001e73 	.word	0x08001e73
 8001de0:	08001e73 	.word	0x08001e73
 8001de4:	08001e73 	.word	0x08001e73
 8001de8:	08001e73 	.word	0x08001e73
 8001dec:	08001e73 	.word	0x08001e73
 8001df0:	08001e73 	.word	0x08001e73
 8001df4:	08001e73 	.word	0x08001e73
 8001df8:	08001e73 	.word	0x08001e73
 8001dfc:	08001e73 	.word	0x08001e73
 8001e00:	08001e73 	.word	0x08001e73
 8001e04:	08001e73 	.word	0x08001e73
 8001e08:	08001e65 	.word	0x08001e65
 8001e0c:	08001e73 	.word	0x08001e73
 8001e10:	08001e49 	.word	0x08001e49
		case 'F': {
			CMDE = AVANT;
 8001e14:	4b20      	ldr	r3, [pc, #128]	; (8001e98 <HAL_UART_RxCpltCallback+0x17c>)
 8001e16:	2202      	movs	r2, #2
 8001e18:	701a      	strb	r2, [r3, #0]
			//New_CMDE = 1;
			break;
 8001e1a:	e02f      	b.n	8001e7c <HAL_UART_RxCpltCallback+0x160>
		}

		case 'V': {
			CMDE = STOP;
 8001e1c:	4b1e      	ldr	r3, [pc, #120]	; (8001e98 <HAL_UART_RxCpltCallback+0x17c>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	701a      	strb	r2, [r3, #0]
			New_CMDE = 1;
 8001e22:	4b1e      	ldr	r3, [pc, #120]	; (8001e9c <HAL_UART_RxCpltCallback+0x180>)
 8001e24:	2201      	movs	r2, #1
 8001e26:	701a      	strb	r2, [r3, #0]
			break;
 8001e28:	e028      	b.n	8001e7c <HAL_UART_RxCpltCallback+0x160>
		}

		case 'L': {
			CMDE = GAUCHE;
 8001e2a:	4b1b      	ldr	r3, [pc, #108]	; (8001e98 <HAL_UART_RxCpltCallback+0x17c>)
 8001e2c:	2205      	movs	r2, #5
 8001e2e:	701a      	strb	r2, [r3, #0]
			//New_CMDE = 1;
			break;
 8001e30:	e024      	b.n	8001e7c <HAL_UART_RxCpltCallback+0x160>
		}

		case 'R': {
			CMDE = DROITE;
 8001e32:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <HAL_UART_RxCpltCallback+0x17c>)
 8001e34:	2204      	movs	r2, #4
 8001e36:	701a      	strb	r2, [r3, #0]
			//New_CMDE = 1;
			break;
 8001e38:	e020      	b.n	8001e7c <HAL_UART_RxCpltCallback+0x160>
		case 'D':{
			// disconnect bluetooth
			break;
		}
		case 'W' : {
			CMDE = PARK;
 8001e3a:	4b17      	ldr	r3, [pc, #92]	; (8001e98 <HAL_UART_RxCpltCallback+0x17c>)
 8001e3c:	2206      	movs	r2, #6
 8001e3e:	701a      	strb	r2, [r3, #0]
			New_CMDE = 1;
 8001e40:	4b16      	ldr	r3, [pc, #88]	; (8001e9c <HAL_UART_RxCpltCallback+0x180>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	701a      	strb	r2, [r3, #0]
			break;
 8001e46:	e019      	b.n	8001e7c <HAL_UART_RxCpltCallback+0x160>
		}
		case 'w' : {
			CMDE = PARK;
 8001e48:	4b13      	ldr	r3, [pc, #76]	; (8001e98 <HAL_UART_RxCpltCallback+0x17c>)
 8001e4a:	2206      	movs	r2, #6
 8001e4c:	701a      	strb	r2, [r3, #0]
			New_CMDE = 1;
 8001e4e:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <HAL_UART_RxCpltCallback+0x180>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	701a      	strb	r2, [r3, #0]
			break;
 8001e54:	e012      	b.n	8001e7c <HAL_UART_RxCpltCallback+0x160>
				}
		case 'U' : {
			CMDE = MOVPARK;
 8001e56:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <HAL_UART_RxCpltCallback+0x17c>)
 8001e58:	2207      	movs	r2, #7
 8001e5a:	701a      	strb	r2, [r3, #0]
			New_CMDE = 1;
 8001e5c:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <HAL_UART_RxCpltCallback+0x180>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	701a      	strb	r2, [r3, #0]
			break;
 8001e62:	e00b      	b.n	8001e7c <HAL_UART_RxCpltCallback+0x160>
				}
		case 'u' : {
			CMDE = MOVPARK;
 8001e64:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <HAL_UART_RxCpltCallback+0x17c>)
 8001e66:	2207      	movs	r2, #7
 8001e68:	701a      	strb	r2, [r3, #0]
			New_CMDE = 1;
 8001e6a:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <HAL_UART_RxCpltCallback+0x180>)
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	701a      	strb	r2, [r3, #0]
			break;
 8001e70:	e004      	b.n	8001e7c <HAL_UART_RxCpltCallback+0x160>
				}
		default:
			New_CMDE = 1;
 8001e72:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <HAL_UART_RxCpltCallback+0x180>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	701a      	strb	r2, [r3, #0]
 8001e78:	e000      	b.n	8001e7c <HAL_UART_RxCpltCallback+0x160>
			break;
 8001e7a:	bf00      	nop
		}
		HAL_UART_Receive_IT(&huart3, &BLUE_RX, 1);
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	4905      	ldr	r1, [pc, #20]	; (8001e94 <HAL_UART_RxCpltCallback+0x178>)
 8001e80:	4807      	ldr	r0, [pc, #28]	; (8001ea0 <HAL_UART_RxCpltCallback+0x184>)
 8001e82:	f006 fbbd 	bl	8008600 <HAL_UART_Receive_IT>
		}
		//HAL_UART_Receive_IT(&huart1, &ZIGBEE_RX, 1);


	}*/
}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40004800 	.word	0x40004800
 8001e94:	2000022c 	.word	0x2000022c
 8001e98:	20000164 	.word	0x20000164
 8001e9c:	20000090 	.word	0x20000090
 8001ea0:	20000338 	.word	0x20000338

08001ea4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

	Dist_ACS_3 = adc_buffer[0] - adc_buffer[5];
 8001eac:	4b19      	ldr	r3, [pc, #100]	; (8001f14 <HAL_ADC_ConvCpltCallback+0x70>)
 8001eae:	881a      	ldrh	r2, [r3, #0]
 8001eb0:	4b18      	ldr	r3, [pc, #96]	; (8001f14 <HAL_ADC_ConvCpltCallback+0x70>)
 8001eb2:	895b      	ldrh	r3, [r3, #10]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	4b17      	ldr	r3, [pc, #92]	; (8001f18 <HAL_ADC_ConvCpltCallback+0x74>)
 8001eba:	801a      	strh	r2, [r3, #0]
	Dist_ACS_4 = adc_buffer[3] - adc_buffer[8];
 8001ebc:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <HAL_ADC_ConvCpltCallback+0x70>)
 8001ebe:	88da      	ldrh	r2, [r3, #6]
 8001ec0:	4b14      	ldr	r3, [pc, #80]	; (8001f14 <HAL_ADC_ConvCpltCallback+0x70>)
 8001ec2:	8a1b      	ldrh	r3, [r3, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <HAL_ADC_ConvCpltCallback+0x78>)
 8001eca:	801a      	strh	r2, [r3, #0]
	Dist_ACS_1 = adc_buffer[1] - adc_buffer[6];
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <HAL_ADC_ConvCpltCallback+0x70>)
 8001ece:	885a      	ldrh	r2, [r3, #2]
 8001ed0:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <HAL_ADC_ConvCpltCallback+0x70>)
 8001ed2:	899b      	ldrh	r3, [r3, #12]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001eda:	801a      	strh	r2, [r3, #0]
	Dist_ACS_2 = adc_buffer[2] - adc_buffer[7];
 8001edc:	4b0d      	ldr	r3, [pc, #52]	; (8001f14 <HAL_ADC_ConvCpltCallback+0x70>)
 8001ede:	889a      	ldrh	r2, [r3, #4]
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <HAL_ADC_ConvCpltCallback+0x70>)
 8001ee2:	89db      	ldrh	r3, [r3, #14]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <HAL_ADC_ConvCpltCallback+0x80>)
 8001eea:	801a      	strh	r2, [r3, #0]
	VBat = (adc_buffer[4]+adc_buffer[9])/2;
 8001eec:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <HAL_ADC_ConvCpltCallback+0x70>)
 8001eee:	891b      	ldrh	r3, [r3, #8]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <HAL_ADC_ConvCpltCallback+0x70>)
 8001ef4:	8a5b      	ldrh	r3, [r3, #18]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	0fda      	lsrs	r2, r3, #31
 8001efa:	4413      	add	r3, r2
 8001efc:	105b      	asrs	r3, r3, #1
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <HAL_ADC_ConvCpltCallback+0x84>)
 8001f02:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop_DMA(hadc);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f001 f935 	bl	8003174 <HAL_ADC_Stop_DMA>
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000214 	.word	0x20000214
 8001f18:	20000180 	.word	0x20000180
 8001f1c:	2000022e 	.word	0x2000022e
 8001f20:	20000234 	.word	0x20000234
 8001f24:	20000184 	.word	0x20000184
 8001f28:	20000186 	.word	0x20000186

08001f2c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim) {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
	static unsigned char cpt = 0;

	if ( htim->Instance == TIM2) {
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f3c:	d16c      	bne.n	8002018 <HAL_TIM_PeriodElapsedCallback+0xec>
		cpt++;
 8001f3e:	4b38      	ldr	r3, [pc, #224]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	3301      	adds	r3, #1
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	4b36      	ldr	r3, [pc, #216]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001f48:	701a      	strb	r2, [r3, #0]
		Time++;
 8001f4a:	4b36      	ldr	r3, [pc, #216]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	4a34      	ldr	r2, [pc, #208]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001f52:	6013      	str	r3, [r2, #0]
		T_sonar++;
 8001f54:	4b34      	ldr	r3, [pc, #208]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	4a33      	ldr	r2, [pc, #204]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001f5c:	6013      	str	r3, [r2, #0]
		Tech++;
 8001f5e:	4b33      	ldr	r3, [pc, #204]	; (800202c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	3301      	adds	r3, #1
 8001f64:	4a31      	ldr	r2, [pc, #196]	; (800202c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001f66:	6013      	str	r3, [r2, #0]
		Tpark++;
 8001f68:	4b31      	ldr	r3, [pc, #196]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	4a30      	ldr	r2, [pc, #192]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001f70:	6013      	str	r3, [r2, #0]

		switch (cpt) {
 8001f72:	4b2b      	ldr	r3, [pc, #172]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	2b03      	cmp	r3, #3
 8001f7a:	d849      	bhi.n	8002010 <HAL_TIM_PeriodElapsedCallback+0xe4>
 8001f7c:	a201      	add	r2, pc, #4	; (adr r2, 8001f84 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f82:	bf00      	nop
 8001f84:	08001f95 	.word	0x08001f95
 8001f88:	08001fc7 	.word	0x08001fc7
 8001f8c:	08001fd3 	.word	0x08001fd3
 8001f90:	08002005 	.word	0x08002005
		case 1: {
			HAL_GPIO_WritePin(IR3_out_GPIO_Port, IR3_out_Pin, GPIO_PIN_SET);
 8001f94:	2201      	movs	r2, #1
 8001f96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f9a:	4826      	ldr	r0, [pc, #152]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001f9c:	f002 fd0a 	bl	80049b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IR4_out_GPIO_Port, IR4_out_Pin, GPIO_PIN_SET);
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fa6:	4824      	ldr	r0, [pc, #144]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001fa8:	f002 fd04 	bl	80049b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IR1_out_GPIO_Port, IR1_out_Pin, GPIO_PIN_SET);
 8001fac:	2201      	movs	r2, #1
 8001fae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fb2:	4821      	ldr	r0, [pc, #132]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001fb4:	f002 fcfe 	bl	80049b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IR2_out_GPIO_Port, IR2_out_Pin, GPIO_PIN_SET);
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fbe:	481e      	ldr	r0, [pc, #120]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001fc0:	f002 fcf8 	bl	80049b4 <HAL_GPIO_WritePin>
			break;
 8001fc4:	e028      	b.n	8002018 <HAL_TIM_PeriodElapsedCallback+0xec>
		}
		case 2: {
			HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_buffer, 10);
 8001fc6:	220a      	movs	r2, #10
 8001fc8:	491c      	ldr	r1, [pc, #112]	; (800203c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001fca:	481d      	ldr	r0, [pc, #116]	; (8002040 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001fcc:	f000 ffe8 	bl	8002fa0 <HAL_ADC_Start_DMA>
			break;
 8001fd0:	e022      	b.n	8002018 <HAL_TIM_PeriodElapsedCallback+0xec>
		}
		case 3: {
			HAL_GPIO_WritePin(IR3_out_GPIO_Port, IR3_out_Pin, GPIO_PIN_RESET);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fd8:	4816      	ldr	r0, [pc, #88]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001fda:	f002 fceb 	bl	80049b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IR4_out_GPIO_Port, IR4_out_Pin, GPIO_PIN_RESET);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fe4:	4814      	ldr	r0, [pc, #80]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001fe6:	f002 fce5 	bl	80049b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IR1_out_GPIO_Port, IR1_out_Pin, GPIO_PIN_RESET);
 8001fea:	2200      	movs	r2, #0
 8001fec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ff0:	4811      	ldr	r0, [pc, #68]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001ff2:	f002 fcdf 	bl	80049b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IR2_out_GPIO_Port, IR2_out_Pin, GPIO_PIN_RESET);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ffc:	480e      	ldr	r0, [pc, #56]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001ffe:	f002 fcd9 	bl	80049b4 <HAL_GPIO_WritePin>
			break;
 8002002:	e009      	b.n	8002018 <HAL_TIM_PeriodElapsedCallback+0xec>
		}
		case 4: {
			HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_buffer, 10);
 8002004:	220a      	movs	r2, #10
 8002006:	490d      	ldr	r1, [pc, #52]	; (800203c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002008:	480d      	ldr	r0, [pc, #52]	; (8002040 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800200a:	f000 ffc9 	bl	8002fa0 <HAL_ADC_Start_DMA>
			break;
 800200e:	e003      	b.n	8002018 <HAL_TIM_PeriodElapsedCallback+0xec>
		}
		default:
			cpt = 0;
 8002010:	4b03      	ldr	r3, [pc, #12]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002012:	2200      	movs	r2, #0
 8002014:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002016:	e7ff      	b.n	8002018 <HAL_TIM_PeriodElapsedCallback+0xec>
 8002018:	bf00      	nop
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	200000df 	.word	0x200000df
 8002024:	20000094 	.word	0x20000094
 8002028:	200000a0 	.word	0x200000a0
 800202c:	20000098 	.word	0x20000098
 8002030:	2000009c 	.word	0x2000009c
 8002034:	40010800 	.word	0x40010800
 8002038:	40010c00 	.word	0x40010c00
 800203c:	20000214 	.word	0x20000214
 8002040:	200000f0 	.word	0x200000f0

08002044 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800204c:	2200      	movs	r2, #0
 800204e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002052:	4811      	ldr	r0, [pc, #68]	; (8002098 <HAL_TIM_IC_CaptureCallback+0x54>)
 8002054:	f002 fcae 	bl	80049b4 <HAL_GPIO_WritePin>

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) { // On est dans le falling-edge
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	7f1b      	ldrb	r3, [r3, #28]
 800205c:	2b02      	cmp	r3, #2
 800205e:	d116      	bne.n	800208e <HAL_TIM_IC_CaptureCallback+0x4a>

		distance_sonar = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2); // On obtient la distance en (cm)
 8002060:	2104      	movs	r1, #4
 8002062:	480e      	ldr	r0, [pc, #56]	; (800209c <HAL_TIM_IC_CaptureCallback+0x58>)
 8002064:	f005 f89e 	bl	80071a4 <HAL_TIM_ReadCapturedValue>
 8002068:	4602      	mov	r2, r0
 800206a:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <HAL_TIM_IC_CaptureCallback+0x5c>)
 800206c:	601a      	str	r2, [r3, #0]
		 * Sachant donc que 667 correspond a 650 cm alors x cm correspondent a ?
		 * distance(cm) =  x*650/667
		 */


		int cx = snprintf(BLUE_TX, 100, "Distance Sonar : %d\n", (int)distance_sonar);
 800206e:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a0c      	ldr	r2, [pc, #48]	; (80020a4 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002074:	2164      	movs	r1, #100	; 0x64
 8002076:	480c      	ldr	r0, [pc, #48]	; (80020a8 <HAL_TIM_IC_CaptureCallback+0x64>)
 8002078:	f006 ff06 	bl	8008e88 <sniprintf>
 800207c:	60f8      	str	r0, [r7, #12]
		HAL_UART_Transmit(&huart3, (uint8_t*) BLUE_TX, cx, HAL_MAX_DELAY);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	b29a      	uxth	r2, r3
 8002082:	f04f 33ff 	mov.w	r3, #4294967295
 8002086:	4908      	ldr	r1, [pc, #32]	; (80020a8 <HAL_TIM_IC_CaptureCallback+0x64>)
 8002088:	4808      	ldr	r0, [pc, #32]	; (80020ac <HAL_TIM_IC_CaptureCallback+0x68>)
 800208a:	f006 fa21 	bl	80084d0 <HAL_UART_Transmit>
	}

}
 800208e:	bf00      	nop
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40010c00 	.word	0x40010c00
 800209c:	200002b8 	.word	0x200002b8
 80020a0:	200000b8 	.word	0x200000b8
 80020a4:	08009870 	.word	0x08009870
 80020a8:	2000018c 	.word	0x2000018c
 80020ac:	20000338 	.word	0x20000338

080020b0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80020b0:	b590      	push	{r4, r7, lr}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	80fb      	strh	r3, [r7, #6]

	static unsigned char TOGGLE = 0;

	if (TOGGLE) {
 80020ba:	4b1e      	ldr	r3, [pc, #120]	; (8002134 <HAL_GPIO_EXTI_Callback+0x84>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d014      	beq.n	80020ec <HAL_GPIO_EXTI_Callback+0x3c>
		CMDE = STOP;
 80020c2:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <HAL_GPIO_EXTI_Callback+0x88>)
 80020c4:	2201      	movs	r2, #1
 80020c6:	701a      	strb	r2, [r3, #0]
		int cx = snprintf(BLUE_TX, 100, "Robot STOP\n");
 80020c8:	4a1c      	ldr	r2, [pc, #112]	; (800213c <HAL_GPIO_EXTI_Callback+0x8c>)
 80020ca:	4b1d      	ldr	r3, [pc, #116]	; (8002140 <HAL_GPIO_EXTI_Callback+0x90>)
 80020cc:	4614      	mov	r4, r2
 80020ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 80020d0:	6020      	str	r0, [r4, #0]
 80020d2:	6061      	str	r1, [r4, #4]
 80020d4:	60a2      	str	r2, [r4, #8]
 80020d6:	230b      	movs	r3, #11
 80020d8:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart3, (uint8_t*) BLUE_TX, cx, HAL_MAX_DELAY);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	b29a      	uxth	r2, r3
 80020de:	f04f 33ff 	mov.w	r3, #4294967295
 80020e2:	4916      	ldr	r1, [pc, #88]	; (800213c <HAL_GPIO_EXTI_Callback+0x8c>)
 80020e4:	4817      	ldr	r0, [pc, #92]	; (8002144 <HAL_GPIO_EXTI_Callback+0x94>)
 80020e6:	f006 f9f3 	bl	80084d0 <HAL_UART_Transmit>
 80020ea:	e015      	b.n	8002118 <HAL_GPIO_EXTI_Callback+0x68>
	}else {
		CMDE = START;
 80020ec:	4b12      	ldr	r3, [pc, #72]	; (8002138 <HAL_GPIO_EXTI_Callback+0x88>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	701a      	strb	r2, [r3, #0]
		int cx = snprintf(BLUE_TX, 100, "Robot START\n");
 80020f2:	4a12      	ldr	r2, [pc, #72]	; (800213c <HAL_GPIO_EXTI_Callback+0x8c>)
 80020f4:	4b14      	ldr	r3, [pc, #80]	; (8002148 <HAL_GPIO_EXTI_Callback+0x98>)
 80020f6:	4614      	mov	r4, r2
 80020f8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80020fa:	6020      	str	r0, [r4, #0]
 80020fc:	6061      	str	r1, [r4, #4]
 80020fe:	60a2      	str	r2, [r4, #8]
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	7323      	strb	r3, [r4, #12]
 8002104:	230c      	movs	r3, #12
 8002106:	60bb      	str	r3, [r7, #8]
		HAL_UART_Transmit(&huart3, (uint8_t*) BLUE_TX, cx, HAL_MAX_DELAY);
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	b29a      	uxth	r2, r3
 800210c:	f04f 33ff 	mov.w	r3, #4294967295
 8002110:	490a      	ldr	r1, [pc, #40]	; (800213c <HAL_GPIO_EXTI_Callback+0x8c>)
 8002112:	480c      	ldr	r0, [pc, #48]	; (8002144 <HAL_GPIO_EXTI_Callback+0x94>)
 8002114:	f006 f9dc 	bl	80084d0 <HAL_UART_Transmit>
	}

	TOGGLE = ~TOGGLE;
 8002118:	4b06      	ldr	r3, [pc, #24]	; (8002134 <HAL_GPIO_EXTI_Callback+0x84>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	43db      	mvns	r3, r3
 800211e:	b2da      	uxtb	r2, r3
 8002120:	4b04      	ldr	r3, [pc, #16]	; (8002134 <HAL_GPIO_EXTI_Callback+0x84>)
 8002122:	701a      	strb	r2, [r3, #0]
	New_CMDE = 1;
 8002124:	4b09      	ldr	r3, [pc, #36]	; (800214c <HAL_GPIO_EXTI_Callback+0x9c>)
 8002126:	2201      	movs	r2, #1
 8002128:	701a      	strb	r2, [r3, #0]

}
 800212a:	bf00      	nop
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	bd90      	pop	{r4, r7, pc}
 8002132:	bf00      	nop
 8002134:	200000e0 	.word	0x200000e0
 8002138:	20000164 	.word	0x20000164
 800213c:	2000018c 	.word	0x2000018c
 8002140:	08009888 	.word	0x08009888
 8002144:	20000338 	.word	0x20000338
 8002148:	08009894 	.word	0x08009894
 800214c:	20000090 	.word	0x20000090

08002150 <HAL_MOV_SERVO>:

void HAL_GPIO_ACQ_SONAR(void) {
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
}
void HAL_MOV_SERVO(void) {
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 7100);
 8002154:	4b11      	ldr	r3, [pc, #68]	; (800219c <HAL_MOV_SERVO+0x4c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	3334      	adds	r3, #52	; 0x34
 800215a:	330c      	adds	r3, #12
 800215c:	f641 32bc 	movw	r2, #7100	; 0x1bbc
 8002160:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002162:	210c      	movs	r1, #12
 8002164:	480d      	ldr	r0, [pc, #52]	; (800219c <HAL_MOV_SERVO+0x4c>)
 8002166:	f003 fc9d 	bl	8005aa4 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 2300);
 800216a:	4b0c      	ldr	r3, [pc, #48]	; (800219c <HAL_MOV_SERVO+0x4c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	3334      	adds	r3, #52	; 0x34
 8002170:	330c      	adds	r3, #12
 8002172:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8002176:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002178:	210c      	movs	r1, #12
 800217a:	4808      	ldr	r0, [pc, #32]	; (800219c <HAL_MOV_SERVO+0x4c>)
 800217c:	f003 fc92 	bl	8005aa4 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 800);
 8002180:	4b06      	ldr	r3, [pc, #24]	; (800219c <HAL_MOV_SERVO+0x4c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	3334      	adds	r3, #52	; 0x34
 8002186:	330c      	adds	r3, #12
 8002188:	f44f 7248 	mov.w	r2, #800	; 0x320
 800218c:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800218e:	210c      	movs	r1, #12
 8002190:	4802      	ldr	r0, [pc, #8]	; (800219c <HAL_MOV_SERVO+0x4c>)
 8002192:	f003 fc87 	bl	8005aa4 <HAL_TIM_PWM_Start>
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	200002b8 	.word	0x200002b8

080021a0 <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef * hadc) {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80021a8:	2201      	movs	r2, #1
 80021aa:	2120      	movs	r1, #32
 80021ac:	4803      	ldr	r0, [pc, #12]	; (80021bc <HAL_ADC_LevelOutOfWindowCallback+0x1c>)
 80021ae:	f002 fc01 	bl	80049b4 <HAL_GPIO_WritePin>

}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40010800 	.word	0x40010800

080021c0 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80021ca:	e7fe      	b.n	80021ca <_Error_Handler+0xa>

080021cc <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80021e6:	4a25      	ldr	r2, [pc, #148]	; (800227c <HAL_MspInit+0x9c>)
 80021e8:	4b24      	ldr	r3, [pc, #144]	; (800227c <HAL_MspInit+0x9c>)
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	6193      	str	r3, [r2, #24]
 80021f2:	4b22      	ldr	r3, [pc, #136]	; (800227c <HAL_MspInit+0x9c>)
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	603b      	str	r3, [r7, #0]
 80021fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021fe:	2003      	movs	r0, #3
 8002200:	f001 fd9e 	bl	8003d40 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002204:	2200      	movs	r2, #0
 8002206:	2100      	movs	r1, #0
 8002208:	f06f 000b 	mvn.w	r0, #11
 800220c:	f001 fdb8 	bl	8003d80 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002210:	2200      	movs	r2, #0
 8002212:	2100      	movs	r1, #0
 8002214:	f06f 000a 	mvn.w	r0, #10
 8002218:	f001 fdb2 	bl	8003d80 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800221c:	2200      	movs	r2, #0
 800221e:	2100      	movs	r1, #0
 8002220:	f06f 0009 	mvn.w	r0, #9
 8002224:	f001 fdac 	bl	8003d80 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002228:	2200      	movs	r2, #0
 800222a:	2100      	movs	r1, #0
 800222c:	f06f 0004 	mvn.w	r0, #4
 8002230:	f001 fda6 	bl	8003d80 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002234:	2200      	movs	r2, #0
 8002236:	2100      	movs	r1, #0
 8002238:	f06f 0003 	mvn.w	r0, #3
 800223c:	f001 fda0 	bl	8003d80 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002240:	2200      	movs	r2, #0
 8002242:	2100      	movs	r1, #0
 8002244:	f06f 0001 	mvn.w	r0, #1
 8002248:	f001 fd9a 	bl	8003d80 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800224c:	2200      	movs	r2, #0
 800224e:	2100      	movs	r1, #0
 8002250:	f04f 30ff 	mov.w	r0, #4294967295
 8002254:	f001 fd94 	bl	8003d80 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002258:	4b09      	ldr	r3, [pc, #36]	; (8002280 <HAL_MspInit+0xa0>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	607b      	str	r3, [r7, #4]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002264:	607b      	str	r3, [r7, #4]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800226c:	607b      	str	r3, [r7, #4]
 800226e:	4a04      	ldr	r2, [pc, #16]	; (8002280 <HAL_MspInit+0xa0>)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002274:	bf00      	nop
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40021000 	.word	0x40021000
 8002280:	40010000 	.word	0x40010000

08002284 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002288:	f000 fc2e 	bl	8002ae8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800228c:	f001 fdf0 	bl	8003e70 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}

08002294 <DMA1_Channel1_IRQHandler>:

/**
* @brief This function handles DMA1 channel1 global interrupt.
*/
void DMA1_Channel1_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002298:	4802      	ldr	r0, [pc, #8]	; (80022a4 <DMA1_Channel1_IRQHandler+0x10>)
 800229a:	f002 f817 	bl	80042cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000120 	.word	0x20000120

080022a8 <ADC1_2_IRQHandler>:

/**
* @brief This function handles ADC1 and ADC2 global interrupts.
*/
void ADC1_2_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80022ac:	4802      	ldr	r0, [pc, #8]	; (80022b8 <ADC1_2_IRQHandler+0x10>)
 80022ae:	f000 ffb5 	bl	800321c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	200000f0 	.word	0x200000f0

080022bc <TIM1_CC_IRQHandler>:

/**
* @brief This function handles TIM1 capture compare interrupt.
*/
void TIM1_CC_IRQHandler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022c0:	4802      	ldr	r0, [pc, #8]	; (80022cc <TIM1_CC_IRQHandler+0x10>)
 80022c2:	f004 f817 	bl	80062f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	200002b8 	.word	0x200002b8

080022d0 <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022d4:	4802      	ldr	r0, [pc, #8]	; (80022e0 <TIM2_IRQHandler+0x10>)
 80022d6:	f004 f80d 	bl	80062f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	200002f8 	.word	0x200002f8

080022e4 <USART3_IRQHandler>:

/**
* @brief This function handles USART3 global interrupt.
*/
void USART3_IRQHandler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80022e8:	4802      	ldr	r0, [pc, #8]	; (80022f4 <USART3_IRQHandler+0x10>)
 80022ea:	f006 f9dd 	bl	80086a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000338 	.word	0x20000338

080022f8 <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80022fc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002300:	f002 fb8a 	bl	8004a18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002304:	bf00      	nop
 8002306:	bd80      	pop	{r7, pc}

08002308 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b09e      	sub	sp, #120	; 0x78
 800230c:	af00      	add	r7, sp, #0
  TIM_IC_InitTypeDef sConfigIC;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
 800230e:	4b69      	ldr	r3, [pc, #420]	; (80024b4 <MX_TIM1_Init+0x1ac>)
 8002310:	4a69      	ldr	r2, [pc, #420]	; (80024b8 <MX_TIM1_Init+0x1b0>)
 8002312:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 36;
 8002314:	4b67      	ldr	r3, [pc, #412]	; (80024b4 <MX_TIM1_Init+0x1ac>)
 8002316:	2224      	movs	r2, #36	; 0x24
 8002318:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800231a:	4b66      	ldr	r3, [pc, #408]	; (80024b4 <MX_TIM1_Init+0x1ac>)
 800231c:	2200      	movs	r2, #0
 800231e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF;
 8002320:	4b64      	ldr	r3, [pc, #400]	; (80024b4 <MX_TIM1_Init+0x1ac>)
 8002322:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002326:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002328:	4b62      	ldr	r3, [pc, #392]	; (80024b4 <MX_TIM1_Init+0x1ac>)
 800232a:	2200      	movs	r2, #0
 800232c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800232e:	4b61      	ldr	r3, [pc, #388]	; (80024b4 <MX_TIM1_Init+0x1ac>)
 8002330:	2200      	movs	r2, #0
 8002332:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002334:	4b5f      	ldr	r3, [pc, #380]	; (80024b4 <MX_TIM1_Init+0x1ac>)
 8002336:	2200      	movs	r2, #0
 8002338:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800233a:	485e      	ldr	r0, [pc, #376]	; (80024b4 <MX_TIM1_Init+0x1ac>)
 800233c:	f003 fa66 	bl	800580c <HAL_TIM_Base_Init>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <MX_TIM1_Init+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002346:	2149      	movs	r1, #73	; 0x49
 8002348:	485c      	ldr	r0, [pc, #368]	; (80024bc <MX_TIM1_Init+0x1b4>)
 800234a:	f7ff ff39 	bl	80021c0 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800234e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002352:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002354:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002358:	4619      	mov	r1, r3
 800235a:	4856      	ldr	r0, [pc, #344]	; (80024b4 <MX_TIM1_Init+0x1ac>)
 800235c:	f004 fb8c 	bl	8006a78 <HAL_TIM_ConfigClockSource>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <MX_TIM1_Init+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002366:	214f      	movs	r1, #79	; 0x4f
 8002368:	4854      	ldr	r0, [pc, #336]	; (80024bc <MX_TIM1_Init+0x1b4>)
 800236a:	f7ff ff29 	bl	80021c0 <_Error_Handler>
  }

  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800236e:	4851      	ldr	r0, [pc, #324]	; (80024b4 <MX_TIM1_Init+0x1ac>)
 8002370:	f003 fb08 	bl	8005984 <HAL_TIM_PWM_Init>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <MX_TIM1_Init+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800237a:	2154      	movs	r1, #84	; 0x54
 800237c:	484f      	ldr	r0, [pc, #316]	; (80024bc <MX_TIM1_Init+0x1b4>)
 800237e:	f7ff ff1f 	bl	80021c0 <_Error_Handler>
  }

  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002382:	484c      	ldr	r0, [pc, #304]	; (80024b4 <MX_TIM1_Init+0x1ac>)
 8002384:	f003 fca2 	bl	8005ccc <HAL_TIM_IC_Init>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <MX_TIM1_Init+0x8e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800238e:	2159      	movs	r1, #89	; 0x59
 8002390:	484a      	ldr	r0, [pc, #296]	; (80024bc <MX_TIM1_Init+0x1b4>)
 8002392:	f7ff ff15 	bl	80021c0 <_Error_Handler>
  }

  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002396:	2304      	movs	r3, #4
 8002398:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800239a:	2350      	movs	r3, #80	; 0x50
 800239c:	65bb      	str	r3, [r7, #88]	; 0x58
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800239e:	2300      	movs	r3, #0
 80023a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80023a2:	2300      	movs	r3, #0
 80023a4:	663b      	str	r3, [r7, #96]	; 0x60
  sSlaveConfig.TriggerFilter = 8;
 80023a6:	2308      	movs	r3, #8
 80023a8:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_SlaveConfigSynchronization(&htim1, &sSlaveConfig) != HAL_OK)
 80023aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80023ae:	4619      	mov	r1, r3
 80023b0:	4840      	ldr	r0, [pc, #256]	; (80024b4 <MX_TIM1_Init+0x1ac>)
 80023b2:	f004 fe63 	bl	800707c <HAL_TIM_SlaveConfigSynchronization>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d003      	beq.n	80023c4 <MX_TIM1_Init+0xbc>
  {
    _Error_Handler(__FILE__, __LINE__);
 80023bc:	2163      	movs	r1, #99	; 0x63
 80023be:	483f      	ldr	r0, [pc, #252]	; (80024bc <MX_TIM1_Init+0x1b4>)
 80023c0:	f7ff fefe 	bl	80021c0 <_Error_Handler>
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80023c4:	2300      	movs	r3, #0
 80023c6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80023c8:	2301      	movs	r3, #1
 80023ca:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80023cc:	2300      	movs	r3, #0
 80023ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigIC.ICFilter = 8;
 80023d0:	2308      	movs	r3, #8
 80023d2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80023d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80023d8:	2200      	movs	r2, #0
 80023da:	4619      	mov	r1, r3
 80023dc:	4835      	ldr	r0, [pc, #212]	; (80024b4 <MX_TIM1_Init+0x1ac>)
 80023de:	f004 f891 	bl	8006504 <HAL_TIM_IC_ConfigChannel>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <MX_TIM1_Init+0xe8>
  {
    _Error_Handler(__FILE__, __LINE__);
 80023e8:	216c      	movs	r1, #108	; 0x6c
 80023ea:	4834      	ldr	r0, [pc, #208]	; (80024bc <MX_TIM1_Init+0x1b4>)
 80023ec:	f7ff fee8 	bl	80021c0 <_Error_Handler>
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80023f0:	2302      	movs	r3, #2
 80023f2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80023f4:	2302      	movs	r3, #2
 80023f6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigIC.ICFilter = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80023fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002400:	2204      	movs	r2, #4
 8002402:	4619      	mov	r1, r3
 8002404:	482b      	ldr	r0, [pc, #172]	; (80024b4 <MX_TIM1_Init+0x1ac>)
 8002406:	f004 f87d 	bl	8006504 <HAL_TIM_IC_ConfigChannel>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d003      	beq.n	8002418 <MX_TIM1_Init+0x110>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002410:	2174      	movs	r1, #116	; 0x74
 8002412:	482a      	ldr	r0, [pc, #168]	; (80024bc <MX_TIM1_Init+0x1b4>)
 8002414:	f7ff fed4 	bl	80021c0 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002418:	2300      	movs	r3, #0
 800241a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800241c:	2300      	movs	r3, #0
 800241e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002420:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002424:	4619      	mov	r1, r3
 8002426:	4823      	ldr	r0, [pc, #140]	; (80024b4 <MX_TIM1_Init+0x1ac>)
 8002428:	f005 ff02 	bl	8008230 <HAL_TIMEx_MasterConfigSynchronization>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <MX_TIM1_Init+0x132>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002432:	217b      	movs	r1, #123	; 0x7b
 8002434:	4821      	ldr	r0, [pc, #132]	; (80024bc <MX_TIM1_Init+0x1b4>)
 8002436:	f7ff fec3 	bl	80021c0 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800243a:	2360      	movs	r3, #96	; 0x60
 800243c:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002442:	2300      	movs	r3, #0
 8002444:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002446:	2300      	movs	r3, #0
 8002448:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800244a:	2300      	movs	r3, #0
 800244c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800244e:	2300      	movs	r3, #0
 8002450:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002452:	f107 0320 	add.w	r3, r7, #32
 8002456:	220c      	movs	r2, #12
 8002458:	4619      	mov	r1, r3
 800245a:	4816      	ldr	r0, [pc, #88]	; (80024b4 <MX_TIM1_Init+0x1ac>)
 800245c:	f004 f99e 	bl	800679c <HAL_TIM_PWM_ConfigChannel>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <MX_TIM1_Init+0x166>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002466:	2186      	movs	r1, #134	; 0x86
 8002468:	4814      	ldr	r0, [pc, #80]	; (80024bc <MX_TIM1_Init+0x1b4>)
 800246a:	f7ff fea9 	bl	80021c0 <_Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800246e:	2300      	movs	r3, #0
 8002470:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002472:	2300      	movs	r3, #0
 8002474:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800247a:	2300      	movs	r3, #0
 800247c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800247e:	2300      	movs	r3, #0
 8002480:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002482:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002486:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002488:	2300      	movs	r3, #0
 800248a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800248c:	1d3b      	adds	r3, r7, #4
 800248e:	4619      	mov	r1, r3
 8002490:	4808      	ldr	r0, [pc, #32]	; (80024b4 <MX_TIM1_Init+0x1ac>)
 8002492:	f005 fe01 	bl	8008098 <HAL_TIMEx_ConfigBreakDeadTime>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <MX_TIM1_Init+0x19c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800249c:	2192      	movs	r1, #146	; 0x92
 800249e:	4807      	ldr	r0, [pc, #28]	; (80024bc <MX_TIM1_Init+0x1b4>)
 80024a0:	f7ff fe8e 	bl	80021c0 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 80024a4:	4803      	ldr	r0, [pc, #12]	; (80024b4 <MX_TIM1_Init+0x1ac>)
 80024a6:	f000 f9d5 	bl	8002854 <HAL_TIM_MspPostInit>

}
 80024aa:	bf00      	nop
 80024ac:	3778      	adds	r7, #120	; 0x78
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	200002b8 	.word	0x200002b8
 80024b8:	40012c00 	.word	0x40012c00
 80024bc:	080098a4 	.word	0x080098a4

080024c0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08e      	sub	sp, #56	; 0x38
 80024c4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
 80024c6:	4b39      	ldr	r3, [pc, #228]	; (80025ac <MX_TIM2_Init+0xec>)
 80024c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 80024ce:	4b37      	ldr	r3, [pc, #220]	; (80025ac <MX_TIM2_Init+0xec>)
 80024d0:	2201      	movs	r2, #1
 80024d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d4:	4b35      	ldr	r3, [pc, #212]	; (80025ac <MX_TIM2_Init+0xec>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64000;
 80024da:	4b34      	ldr	r3, [pc, #208]	; (80025ac <MX_TIM2_Init+0xec>)
 80024dc:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80024e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024e2:	4b32      	ldr	r3, [pc, #200]	; (80025ac <MX_TIM2_Init+0xec>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e8:	4b30      	ldr	r3, [pc, #192]	; (80025ac <MX_TIM2_Init+0xec>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024ee:	482f      	ldr	r0, [pc, #188]	; (80025ac <MX_TIM2_Init+0xec>)
 80024f0:	f003 f98c 	bl	800580c <HAL_TIM_Base_Init>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <MX_TIM2_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 80024fa:	21a7      	movs	r1, #167	; 0xa7
 80024fc:	482c      	ldr	r0, [pc, #176]	; (80025b0 <MX_TIM2_Init+0xf0>)
 80024fe:	f7ff fe5f 	bl	80021c0 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002502:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002506:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002508:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800250c:	4619      	mov	r1, r3
 800250e:	4827      	ldr	r0, [pc, #156]	; (80025ac <MX_TIM2_Init+0xec>)
 8002510:	f004 fab2 	bl	8006a78 <HAL_TIM_ConfigClockSource>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <MX_TIM2_Init+0x62>
  {
    _Error_Handler(__FILE__, __LINE__);
 800251a:	21ad      	movs	r1, #173	; 0xad
 800251c:	4824      	ldr	r0, [pc, #144]	; (80025b0 <MX_TIM2_Init+0xf0>)
 800251e:	f7ff fe4f 	bl	80021c0 <_Error_Handler>
  }

  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002522:	4822      	ldr	r0, [pc, #136]	; (80025ac <MX_TIM2_Init+0xec>)
 8002524:	f003 fa2e 	bl	8005984 <HAL_TIM_PWM_Init>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <MX_TIM2_Init+0x76>
  {
    _Error_Handler(__FILE__, __LINE__);
 800252e:	21b2      	movs	r1, #178	; 0xb2
 8002530:	481f      	ldr	r0, [pc, #124]	; (80025b0 <MX_TIM2_Init+0xf0>)
 8002532:	f7ff fe45 	bl	80021c0 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002536:	2300      	movs	r3, #0
 8002538:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800253a:	2300      	movs	r3, #0
 800253c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800253e:	f107 0320 	add.w	r3, r7, #32
 8002542:	4619      	mov	r1, r3
 8002544:	4819      	ldr	r0, [pc, #100]	; (80025ac <MX_TIM2_Init+0xec>)
 8002546:	f005 fe73 	bl	8008230 <HAL_TIMEx_MasterConfigSynchronization>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <MX_TIM2_Init+0x98>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002550:	21b9      	movs	r1, #185	; 0xb9
 8002552:	4817      	ldr	r0, [pc, #92]	; (80025b0 <MX_TIM2_Init+0xf0>)
 8002554:	f7ff fe34 	bl	80021c0 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002558:	2360      	movs	r3, #96	; 0x60
 800255a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002560:	2300      	movs	r3, #0
 8002562:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002568:	1d3b      	adds	r3, r7, #4
 800256a:	2200      	movs	r2, #0
 800256c:	4619      	mov	r1, r3
 800256e:	480f      	ldr	r0, [pc, #60]	; (80025ac <MX_TIM2_Init+0xec>)
 8002570:	f004 f914 	bl	800679c <HAL_TIM_PWM_ConfigChannel>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <MX_TIM2_Init+0xc2>
  {
    _Error_Handler(__FILE__, __LINE__);
 800257a:	21c2      	movs	r1, #194	; 0xc2
 800257c:	480c      	ldr	r0, [pc, #48]	; (80025b0 <MX_TIM2_Init+0xf0>)
 800257e:	f7ff fe1f 	bl	80021c0 <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002582:	1d3b      	adds	r3, r7, #4
 8002584:	220c      	movs	r2, #12
 8002586:	4619      	mov	r1, r3
 8002588:	4808      	ldr	r0, [pc, #32]	; (80025ac <MX_TIM2_Init+0xec>)
 800258a:	f004 f907 	bl	800679c <HAL_TIM_PWM_ConfigChannel>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <MX_TIM2_Init+0xdc>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002594:	21c7      	movs	r1, #199	; 0xc7
 8002596:	4806      	ldr	r0, [pc, #24]	; (80025b0 <MX_TIM2_Init+0xf0>)
 8002598:	f7ff fe12 	bl	80021c0 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim2);
 800259c:	4803      	ldr	r0, [pc, #12]	; (80025ac <MX_TIM2_Init+0xec>)
 800259e:	f000 f959 	bl	8002854 <HAL_TIM_MspPostInit>

}
 80025a2:	bf00      	nop
 80025a4:	3738      	adds	r7, #56	; 0x38
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	200002f8 	.word	0x200002f8
 80025b0:	080098a4 	.word	0x080098a4

080025b4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08c      	sub	sp, #48	; 0x30
 80025b8:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 80025ba:	4b23      	ldr	r3, [pc, #140]	; (8002648 <MX_TIM3_Init+0x94>)
 80025bc:	4a23      	ldr	r2, [pc, #140]	; (800264c <MX_TIM3_Init+0x98>)
 80025be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80025c0:	4b21      	ldr	r3, [pc, #132]	; (8002648 <MX_TIM3_Init+0x94>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c6:	4b20      	ldr	r3, [pc, #128]	; (8002648 <MX_TIM3_Init+0x94>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 80025cc:	4b1e      	ldr	r3, [pc, #120]	; (8002648 <MX_TIM3_Init+0x94>)
 80025ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025d4:	4b1c      	ldr	r3, [pc, #112]	; (8002648 <MX_TIM3_Init+0x94>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025da:	4b1b      	ldr	r3, [pc, #108]	; (8002648 <MX_TIM3_Init+0x94>)
 80025dc:	2280      	movs	r2, #128	; 0x80
 80025de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80025e0:	2303      	movs	r3, #3
 80025e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80025e4:	2300      	movs	r3, #0
 80025e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80025e8:	2301      	movs	r3, #1
 80025ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80025ec:	2300      	movs	r3, #0
 80025ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 8;
 80025f0:	2308      	movs	r3, #8
 80025f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80025f4:	2300      	movs	r3, #0
 80025f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80025f8:	2301      	movs	r3, #1
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80025fc:	2300      	movs	r3, #0
 80025fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 8;
 8002600:	2308      	movs	r3, #8
 8002602:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002604:	f107 030c 	add.w	r3, r7, #12
 8002608:	4619      	mov	r1, r3
 800260a:	480f      	ldr	r0, [pc, #60]	; (8002648 <MX_TIM3_Init+0x94>)
 800260c:	f003 fc9e 	bl	8005f4c <HAL_TIM_Encoder_Init>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <MX_TIM3_Init+0x6a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002616:	21e4      	movs	r1, #228	; 0xe4
 8002618:	480d      	ldr	r0, [pc, #52]	; (8002650 <MX_TIM3_Init+0x9c>)
 800261a:	f7ff fdd1 	bl	80021c0 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800261e:	2300      	movs	r3, #0
 8002620:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002622:	2300      	movs	r3, #0
 8002624:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002626:	1d3b      	adds	r3, r7, #4
 8002628:	4619      	mov	r1, r3
 800262a:	4807      	ldr	r0, [pc, #28]	; (8002648 <MX_TIM3_Init+0x94>)
 800262c:	f005 fe00 	bl	8008230 <HAL_TIMEx_MasterConfigSynchronization>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <MX_TIM3_Init+0x8a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002636:	21eb      	movs	r1, #235	; 0xeb
 8002638:	4805      	ldr	r0, [pc, #20]	; (8002650 <MX_TIM3_Init+0x9c>)
 800263a:	f7ff fdc1 	bl	80021c0 <_Error_Handler>
  }

}
 800263e:	bf00      	nop
 8002640:	3730      	adds	r7, #48	; 0x30
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20000278 	.word	0x20000278
 800264c:	40000400 	.word	0x40000400
 8002650:	080098a4 	.word	0x080098a4

08002654 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b08c      	sub	sp, #48	; 0x30
 8002658:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim4.Instance = TIM4;
 800265a:	4b24      	ldr	r3, [pc, #144]	; (80026ec <MX_TIM4_Init+0x98>)
 800265c:	4a24      	ldr	r2, [pc, #144]	; (80026f0 <MX_TIM4_Init+0x9c>)
 800265e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002660:	4b22      	ldr	r3, [pc, #136]	; (80026ec <MX_TIM4_Init+0x98>)
 8002662:	2200      	movs	r2, #0
 8002664:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002666:	4b21      	ldr	r3, [pc, #132]	; (80026ec <MX_TIM4_Init+0x98>)
 8002668:	2200      	movs	r2, #0
 800266a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xFFFF;
 800266c:	4b1f      	ldr	r3, [pc, #124]	; (80026ec <MX_TIM4_Init+0x98>)
 800266e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002672:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002674:	4b1d      	ldr	r3, [pc, #116]	; (80026ec <MX_TIM4_Init+0x98>)
 8002676:	2200      	movs	r2, #0
 8002678:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800267a:	4b1c      	ldr	r3, [pc, #112]	; (80026ec <MX_TIM4_Init+0x98>)
 800267c:	2280      	movs	r2, #128	; 0x80
 800267e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002680:	2303      	movs	r3, #3
 8002682:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002684:	2300      	movs	r3, #0
 8002686:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002688:	2301      	movs	r3, #1
 800268a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800268c:	2300      	movs	r3, #0
 800268e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 8;
 8002690:	2308      	movs	r3, #8
 8002692:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002694:	2300      	movs	r3, #0
 8002696:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002698:	2301      	movs	r3, #1
 800269a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800269c:	2300      	movs	r3, #0
 800269e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 8;
 80026a0:	2308      	movs	r3, #8
 80026a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80026a4:	f107 030c 	add.w	r3, r7, #12
 80026a8:	4619      	mov	r1, r3
 80026aa:	4810      	ldr	r0, [pc, #64]	; (80026ec <MX_TIM4_Init+0x98>)
 80026ac:	f003 fc4e 	bl	8005f4c <HAL_TIM_Encoder_Init>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d004      	beq.n	80026c0 <MX_TIM4_Init+0x6c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80026b6:	f44f 7183 	mov.w	r1, #262	; 0x106
 80026ba:	480e      	ldr	r0, [pc, #56]	; (80026f4 <MX_TIM4_Init+0xa0>)
 80026bc:	f7ff fd80 	bl	80021c0 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026c0:	2300      	movs	r3, #0
 80026c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026c4:	2300      	movs	r3, #0
 80026c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026c8:	1d3b      	adds	r3, r7, #4
 80026ca:	4619      	mov	r1, r3
 80026cc:	4807      	ldr	r0, [pc, #28]	; (80026ec <MX_TIM4_Init+0x98>)
 80026ce:	f005 fdaf 	bl	8008230 <HAL_TIMEx_MasterConfigSynchronization>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d004      	beq.n	80026e2 <MX_TIM4_Init+0x8e>
  {
    _Error_Handler(__FILE__, __LINE__);
 80026d8:	f240 110d 	movw	r1, #269	; 0x10d
 80026dc:	4805      	ldr	r0, [pc, #20]	; (80026f4 <MX_TIM4_Init+0xa0>)
 80026de:	f7ff fd6f 	bl	80021c0 <_Error_Handler>
  }

}
 80026e2:	bf00      	nop
 80026e4:	3730      	adds	r7, #48	; 0x30
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20000238 	.word	0x20000238
 80026f0:	40000800 	.word	0x40000800
 80026f4:	080098a4 	.word	0x080098a4

080026f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b088      	sub	sp, #32
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(tim_baseHandle->Instance==TIM1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a20      	ldr	r2, [pc, #128]	; (8002788 <HAL_TIM_Base_MspInit+0x90>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d121      	bne.n	800274e <HAL_TIM_Base_MspInit+0x56>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800270a:	4a20      	ldr	r2, [pc, #128]	; (800278c <HAL_TIM_Base_MspInit+0x94>)
 800270c:	4b1f      	ldr	r3, [pc, #124]	; (800278c <HAL_TIM_Base_MspInit+0x94>)
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002714:	6193      	str	r3, [r2, #24]
 8002716:	4b1d      	ldr	r3, [pc, #116]	; (800278c <HAL_TIM_Base_MspInit+0x94>)
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]
  
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = TIM_ECHO_SONAR_Pin;
 8002722:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002726:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(TIM_ECHO_SONAR_GPIO_Port, &GPIO_InitStruct);
 8002730:	f107 0310 	add.w	r3, r7, #16
 8002734:	4619      	mov	r1, r3
 8002736:	4816      	ldr	r0, [pc, #88]	; (8002790 <HAL_TIM_Base_MspInit+0x98>)
 8002738:	f001 ff08 	bl	800454c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800273c:	2200      	movs	r2, #0
 800273e:	2100      	movs	r1, #0
 8002740:	201b      	movs	r0, #27
 8002742:	f001 fb1d 	bl	8003d80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002746:	201b      	movs	r0, #27
 8002748:	f001 fb46 	bl	8003dd8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800274c:	e018      	b.n	8002780 <HAL_TIM_Base_MspInit+0x88>
  else if(tim_baseHandle->Instance==TIM2)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002756:	d113      	bne.n	8002780 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002758:	4a0c      	ldr	r2, [pc, #48]	; (800278c <HAL_TIM_Base_MspInit+0x94>)
 800275a:	4b0c      	ldr	r3, [pc, #48]	; (800278c <HAL_TIM_Base_MspInit+0x94>)
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	f043 0301 	orr.w	r3, r3, #1
 8002762:	61d3      	str	r3, [r2, #28]
 8002764:	4b09      	ldr	r3, [pc, #36]	; (800278c <HAL_TIM_Base_MspInit+0x94>)
 8002766:	69db      	ldr	r3, [r3, #28]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002770:	2200      	movs	r2, #0
 8002772:	2100      	movs	r1, #0
 8002774:	201c      	movs	r0, #28
 8002776:	f001 fb03 	bl	8003d80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800277a:	201c      	movs	r0, #28
 800277c:	f001 fb2c 	bl	8003dd8 <HAL_NVIC_EnableIRQ>
}
 8002780:	bf00      	nop
 8002782:	3720      	adds	r7, #32
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40012c00 	.word	0x40012c00
 800278c:	40021000 	.word	0x40021000
 8002790:	40010800 	.word	0x40010800

08002794 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b08a      	sub	sp, #40	; 0x28
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(tim_encoderHandle->Instance==TIM3)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a27      	ldr	r2, [pc, #156]	; (8002840 <HAL_TIM_Encoder_MspInit+0xac>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d12a      	bne.n	80027fc <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027a6:	4a27      	ldr	r2, [pc, #156]	; (8002844 <HAL_TIM_Encoder_MspInit+0xb0>)
 80027a8:	4b26      	ldr	r3, [pc, #152]	; (8002844 <HAL_TIM_Encoder_MspInit+0xb0>)
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	f043 0302 	orr.w	r3, r3, #2
 80027b0:	61d3      	str	r3, [r2, #28]
 80027b2:	4b24      	ldr	r3, [pc, #144]	; (8002844 <HAL_TIM_Encoder_MspInit+0xb0>)
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	693b      	ldr	r3, [r7, #16]
  
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = ENC1A_Pin|ENC1B_Pin;
 80027be:	2330      	movs	r3, #48	; 0x30
 80027c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027c2:	2300      	movs	r3, #0
 80027c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ca:	f107 0314 	add.w	r3, r7, #20
 80027ce:	4619      	mov	r1, r3
 80027d0:	481d      	ldr	r0, [pc, #116]	; (8002848 <HAL_TIM_Encoder_MspInit+0xb4>)
 80027d2:	f001 febb 	bl	800454c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80027d6:	4b1d      	ldr	r3, [pc, #116]	; (800284c <HAL_TIM_Encoder_MspInit+0xb8>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	627b      	str	r3, [r7, #36]	; 0x24
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80027e2:	627b      	str	r3, [r7, #36]	; 0x24
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027f2:	627b      	str	r3, [r7, #36]	; 0x24
 80027f4:	4a15      	ldr	r2, [pc, #84]	; (800284c <HAL_TIM_Encoder_MspInit+0xb8>)
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80027fa:	e01c      	b.n	8002836 <HAL_TIM_Encoder_MspInit+0xa2>
  else if(tim_encoderHandle->Instance==TIM4)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a13      	ldr	r2, [pc, #76]	; (8002850 <HAL_TIM_Encoder_MspInit+0xbc>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d117      	bne.n	8002836 <HAL_TIM_Encoder_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002806:	4a0f      	ldr	r2, [pc, #60]	; (8002844 <HAL_TIM_Encoder_MspInit+0xb0>)
 8002808:	4b0e      	ldr	r3, [pc, #56]	; (8002844 <HAL_TIM_Encoder_MspInit+0xb0>)
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	f043 0304 	orr.w	r3, r3, #4
 8002810:	61d3      	str	r3, [r2, #28]
 8002812:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <HAL_TIM_Encoder_MspInit+0xb0>)
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	f003 0304 	and.w	r3, r3, #4
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC2A_Pin|ENC2B_Pin;
 800281e:	23c0      	movs	r3, #192	; 0xc0
 8002820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002822:	2300      	movs	r3, #0
 8002824:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002826:	2300      	movs	r3, #0
 8002828:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800282a:	f107 0314 	add.w	r3, r7, #20
 800282e:	4619      	mov	r1, r3
 8002830:	4805      	ldr	r0, [pc, #20]	; (8002848 <HAL_TIM_Encoder_MspInit+0xb4>)
 8002832:	f001 fe8b 	bl	800454c <HAL_GPIO_Init>
}
 8002836:	bf00      	nop
 8002838:	3728      	adds	r7, #40	; 0x28
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40000400 	.word	0x40000400
 8002844:	40021000 	.word	0x40021000
 8002848:	40010c00 	.word	0x40010c00
 800284c:	40010000 	.word	0x40010000
 8002850:	40000800 	.word	0x40000800

08002854 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b088      	sub	sp, #32
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a22      	ldr	r2, [pc, #136]	; (80028ec <HAL_TIM_MspPostInit+0x98>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d10d      	bne.n	8002882 <HAL_TIM_MspPostInit+0x2e>

  /* USER CODE END TIM1_MspPostInit 0 */
    /**TIM1 GPIO Configuration    
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = TIM_SERVO_OUT_Pin;
 8002866:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800286a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286c:	2302      	movs	r3, #2
 800286e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002870:	2302      	movs	r3, #2
 8002872:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(TIM_SERVO_OUT_GPIO_Port, &GPIO_InitStruct);
 8002874:	f107 030c 	add.w	r3, r7, #12
 8002878:	4619      	mov	r1, r3
 800287a:	481d      	ldr	r0, [pc, #116]	; (80028f0 <HAL_TIM_MspPostInit+0x9c>)
 800287c:	f001 fe66 	bl	800454c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002880:	e030      	b.n	80028e4 <HAL_TIM_MspPostInit+0x90>
  else if(timHandle->Instance==TIM2)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800288a:	d12b      	bne.n	80028e4 <HAL_TIM_MspPostInit+0x90>
    GPIO_InitStruct.Pin = PWMD_Pin;
 800288c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002890:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002892:	2302      	movs	r3, #2
 8002894:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002896:	2302      	movs	r3, #2
 8002898:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(PWMD_GPIO_Port, &GPIO_InitStruct);
 800289a:	f107 030c 	add.w	r3, r7, #12
 800289e:	4619      	mov	r1, r3
 80028a0:	4814      	ldr	r0, [pc, #80]	; (80028f4 <HAL_TIM_MspPostInit+0xa0>)
 80028a2:	f001 fe53 	bl	800454c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWMG_Pin;
 80028a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ac:	2302      	movs	r3, #2
 80028ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b0:	2302      	movs	r3, #2
 80028b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(PWMG_GPIO_Port, &GPIO_InitStruct);
 80028b4:	f107 030c 	add.w	r3, r7, #12
 80028b8:	4619      	mov	r1, r3
 80028ba:	480d      	ldr	r0, [pc, #52]	; (80028f0 <HAL_TIM_MspPostInit+0x9c>)
 80028bc:	f001 fe46 	bl	800454c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_ENABLE();
 80028c0:	4b0d      	ldr	r3, [pc, #52]	; (80028f8 <HAL_TIM_MspPostInit+0xa4>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	61fb      	str	r3, [r7, #28]
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028cc:	61fb      	str	r3, [r7, #28]
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80028d4:	61fb      	str	r3, [r7, #28]
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80028dc:	61fb      	str	r3, [r7, #28]
 80028de:	4a06      	ldr	r2, [pc, #24]	; (80028f8 <HAL_TIM_MspPostInit+0xa4>)
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	6053      	str	r3, [r2, #4]
}
 80028e4:	bf00      	nop
 80028e6:	3720      	adds	r7, #32
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40012c00 	.word	0x40012c00
 80028f0:	40010800 	.word	0x40010800
 80028f4:	40010c00 	.word	0x40010c00
 80028f8:	40010000 	.word	0x40010000

080028fc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002900:	4b12      	ldr	r3, [pc, #72]	; (800294c <MX_USART3_UART_Init+0x50>)
 8002902:	4a13      	ldr	r2, [pc, #76]	; (8002950 <MX_USART3_UART_Init+0x54>)
 8002904:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002906:	4b11      	ldr	r3, [pc, #68]	; (800294c <MX_USART3_UART_Init+0x50>)
 8002908:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800290c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800290e:	4b0f      	ldr	r3, [pc, #60]	; (800294c <MX_USART3_UART_Init+0x50>)
 8002910:	2200      	movs	r2, #0
 8002912:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002914:	4b0d      	ldr	r3, [pc, #52]	; (800294c <MX_USART3_UART_Init+0x50>)
 8002916:	2200      	movs	r2, #0
 8002918:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800291a:	4b0c      	ldr	r3, [pc, #48]	; (800294c <MX_USART3_UART_Init+0x50>)
 800291c:	2200      	movs	r2, #0
 800291e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002920:	4b0a      	ldr	r3, [pc, #40]	; (800294c <MX_USART3_UART_Init+0x50>)
 8002922:	220c      	movs	r2, #12
 8002924:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002926:	4b09      	ldr	r3, [pc, #36]	; (800294c <MX_USART3_UART_Init+0x50>)
 8002928:	2200      	movs	r2, #0
 800292a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800292c:	4b07      	ldr	r3, [pc, #28]	; (800294c <MX_USART3_UART_Init+0x50>)
 800292e:	2200      	movs	r2, #0
 8002930:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002932:	4806      	ldr	r0, [pc, #24]	; (800294c <MX_USART3_UART_Init+0x50>)
 8002934:	f005 fd24 	bl	8008380 <HAL_UART_Init>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <MX_USART3_UART_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800293e:	2142      	movs	r1, #66	; 0x42
 8002940:	4804      	ldr	r0, [pc, #16]	; (8002954 <MX_USART3_UART_Init+0x58>)
 8002942:	f7ff fc3d 	bl	80021c0 <_Error_Handler>
  }

}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20000338 	.word	0x20000338
 8002950:	40004800 	.word	0x40004800
 8002954:	080098b8 	.word	0x080098b8

08002958 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART3)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a1f      	ldr	r2, [pc, #124]	; (80029e4 <HAL_UART_MspInit+0x8c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d137      	bne.n	80029da <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800296a:	4a1f      	ldr	r2, [pc, #124]	; (80029e8 <HAL_UART_MspInit+0x90>)
 800296c:	4b1e      	ldr	r3, [pc, #120]	; (80029e8 <HAL_UART_MspInit+0x90>)
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002974:	61d3      	str	r3, [r2, #28]
 8002976:	4b1c      	ldr	r3, [pc, #112]	; (80029e8 <HAL_UART_MspInit+0x90>)
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800297e:	60bb      	str	r3, [r7, #8]
 8002980:	68bb      	ldr	r3, [r7, #8]
  
    /**USART3 GPIO Configuration    
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = BLE_RX_Pin;
 8002982:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002986:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002988:	2302      	movs	r3, #2
 800298a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800298c:	2303      	movs	r3, #3
 800298e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BLE_RX_GPIO_Port, &GPIO_InitStruct);
 8002990:	f107 030c 	add.w	r3, r7, #12
 8002994:	4619      	mov	r1, r3
 8002996:	4815      	ldr	r0, [pc, #84]	; (80029ec <HAL_UART_MspInit+0x94>)
 8002998:	f001 fdd8 	bl	800454c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BLE_TX_Pin;
 800299c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029a2:	2300      	movs	r3, #0
 80029a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BLE_TX_GPIO_Port, &GPIO_InitStruct);
 80029aa:	f107 030c 	add.w	r3, r7, #12
 80029ae:	4619      	mov	r1, r3
 80029b0:	480e      	ldr	r0, [pc, #56]	; (80029ec <HAL_UART_MspInit+0x94>)
 80029b2:	f001 fdcb 	bl	800454c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 80029b6:	4b0e      	ldr	r3, [pc, #56]	; (80029f0 <HAL_UART_MspInit+0x98>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	61fb      	str	r3, [r7, #28]
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80029c2:	61fb      	str	r3, [r7, #28]
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80029ca:	61fb      	str	r3, [r7, #28]
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f043 0310 	orr.w	r3, r3, #16
 80029d2:	61fb      	str	r3, [r7, #28]
 80029d4:	4a06      	ldr	r2, [pc, #24]	; (80029f0 <HAL_UART_MspInit+0x98>)
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80029da:	bf00      	nop
 80029dc:	3720      	adds	r7, #32
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	40004800 	.word	0x40004800
 80029e8:	40021000 	.word	0x40021000
 80029ec:	40011000 	.word	0x40011000
 80029f0:	40010000 	.word	0x40010000

080029f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80029f8:	4a15      	ldr	r2, [pc, #84]	; (8002a50 <SystemInit+0x5c>)
 80029fa:	4b15      	ldr	r3, [pc, #84]	; (8002a50 <SystemInit+0x5c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f043 0301 	orr.w	r3, r3, #1
 8002a02:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002a04:	4912      	ldr	r1, [pc, #72]	; (8002a50 <SystemInit+0x5c>)
 8002a06:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <SystemInit+0x5c>)
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	4b12      	ldr	r3, [pc, #72]	; (8002a54 <SystemInit+0x60>)
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002a10:	4a0f      	ldr	r2, [pc, #60]	; (8002a50 <SystemInit+0x5c>)
 8002a12:	4b0f      	ldr	r3, [pc, #60]	; (8002a50 <SystemInit+0x5c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a1e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002a20:	4a0b      	ldr	r2, [pc, #44]	; (8002a50 <SystemInit+0x5c>)
 8002a22:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <SystemInit+0x5c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a2a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002a2c:	4a08      	ldr	r2, [pc, #32]	; (8002a50 <SystemInit+0x5c>)
 8002a2e:	4b08      	ldr	r3, [pc, #32]	; (8002a50 <SystemInit+0x5c>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002a36:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002a38:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <SystemInit+0x5c>)
 8002a3a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002a3e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002a40:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <SystemInit+0x64>)
 8002a42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a46:	609a      	str	r2, [r3, #8]
#endif 
}
 8002a48:	bf00      	nop
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr
 8002a50:	40021000 	.word	0x40021000
 8002a54:	f8ff0000 	.word	0xf8ff0000
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a60:	4a08      	ldr	r2, [pc, #32]	; (8002a84 <HAL_Init+0x28>)
 8002a62:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <HAL_Init+0x28>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f043 0310 	orr.w	r3, r3, #16
 8002a6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a6c:	2003      	movs	r0, #3
 8002a6e:	f001 f967 	bl	8003d40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a72:	2000      	movs	r0, #0
 8002a74:	f000 f808 	bl	8002a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a78:	f7ff fbb2 	bl	80021e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40022000 	.word	0x40022000

08002a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a90:	4b12      	ldr	r3, [pc, #72]	; (8002adc <HAL_InitTick+0x54>)
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <HAL_InitTick+0x58>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	4619      	mov	r1, r3
 8002a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f001 f9ae 	bl	8003e08 <HAL_SYSTICK_Config>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e00e      	b.n	8002ad4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b0f      	cmp	r3, #15
 8002aba:	d80a      	bhi.n	8002ad2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002abc:	2200      	movs	r2, #0
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac4:	f001 f95c 	bl	8003d80 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ac8:	4a06      	ldr	r2, [pc, #24]	; (8002ae4 <HAL_InitTick+0x5c>)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	e000      	b.n	8002ad4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	20000004 	.word	0x20000004
 8002ae0:	2000000c 	.word	0x2000000c
 8002ae4:	20000008 	.word	0x20000008

08002ae8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002aec:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <HAL_IncTick+0x1c>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	461a      	mov	r2, r3
 8002af2:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <HAL_IncTick+0x20>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4413      	add	r3, r2
 8002af8:	4a03      	ldr	r2, [pc, #12]	; (8002b08 <HAL_IncTick+0x20>)
 8002afa:	6013      	str	r3, [r2, #0]
}
 8002afc:	bf00      	nop
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr
 8002b04:	2000000c 	.word	0x2000000c
 8002b08:	20000378 	.word	0x20000378

08002b0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b10:	4b02      	ldr	r3, [pc, #8]	; (8002b1c <HAL_GetTick+0x10>)
 8002b12:	681b      	ldr	r3, [r3, #0]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr
 8002b1c:	20000378 	.word	0x20000378

08002b20 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002b24:	4a04      	ldr	r2, [pc, #16]	; (8002b38 <HAL_SuspendTick+0x18>)
 8002b26:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <HAL_SuspendTick+0x18>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f023 0302 	bic.w	r3, r3, #2
 8002b2e:	6013      	str	r3, [r2, #0]
}
 8002b30:	bf00      	nop
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr
 8002b38:	e000e010 	.word	0xe000e010

08002b3c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e153      	b.n	8002e06 <HAL_ADC_Init+0x2ca>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a9f      	ldr	r2, [pc, #636]	; (8002de0 <HAL_ADC_Init+0x2a4>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d009      	beq.n	8002b7c <HAL_ADC_Init+0x40>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a9d      	ldr	r2, [pc, #628]	; (8002de4 <HAL_ADC_Init+0x2a8>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d004      	beq.n	8002b7c <HAL_ADC_Init+0x40>
 8002b72:	f44f 71c1 	mov.w	r1, #386	; 0x182
 8002b76:	489c      	ldr	r0, [pc, #624]	; (8002de8 <HAL_ADC_Init+0x2ac>)
 8002b78:	f7ff fb28 	bl	80021cc <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d009      	beq.n	8002b98 <HAL_ADC_Init+0x5c>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b8c:	d004      	beq.n	8002b98 <HAL_ADC_Init+0x5c>
 8002b8e:	f240 1183 	movw	r1, #387	; 0x183
 8002b92:	4895      	ldr	r0, [pc, #596]	; (8002de8 <HAL_ADC_Init+0x2ac>)
 8002b94:	f7ff fb1a 	bl	80021cc <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d009      	beq.n	8002bb4 <HAL_ADC_Init+0x78>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ba8:	d004      	beq.n	8002bb4 <HAL_ADC_Init+0x78>
 8002baa:	f44f 71c2 	mov.w	r1, #388	; 0x184
 8002bae:	488e      	ldr	r0, [pc, #568]	; (8002de8 <HAL_ADC_Init+0x2ac>)
 8002bb0:	f7ff fb0c 	bl	80021cc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d008      	beq.n	8002bce <HAL_ADC_Init+0x92>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d004      	beq.n	8002bce <HAL_ADC_Init+0x92>
 8002bc4:	f240 1185 	movw	r1, #389	; 0x185
 8002bc8:	4887      	ldr	r0, [pc, #540]	; (8002de8 <HAL_ADC_Init+0x2ac>)
 8002bca:	f7ff faff 	bl	80021cc <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d022      	beq.n	8002c1c <HAL_ADC_Init+0xe0>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bde:	d01d      	beq.n	8002c1c <HAL_ADC_Init+0xe0>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	69db      	ldr	r3, [r3, #28]
 8002be4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8002be8:	d018      	beq.n	8002c1c <HAL_ADC_Init+0xe0>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002bf2:	d013      	beq.n	8002c1c <HAL_ADC_Init+0xe0>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8002bfc:	d00e      	beq.n	8002c1c <HAL_ADC_Init+0xe0>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002c06:	d009      	beq.n	8002c1c <HAL_ADC_Init+0xe0>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002c10:	d004      	beq.n	8002c1c <HAL_ADC_Init+0xe0>
 8002c12:	f44f 71c3 	mov.w	r1, #390	; 0x186
 8002c16:	4874      	ldr	r0, [pc, #464]	; (8002de8 <HAL_ADC_Init+0x2ac>)
 8002c18:	f7ff fad8 	bl	80021cc <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d02a      	beq.n	8002c7a <HAL_ADC_Init+0x13e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d003      	beq.n	8002c34 <HAL_ADC_Init+0xf8>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	2b10      	cmp	r3, #16
 8002c32:	d904      	bls.n	8002c3e <HAL_ADC_Init+0x102>
 8002c34:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8002c38:	486b      	ldr	r0, [pc, #428]	; (8002de8 <HAL_ADC_Init+0x2ac>)
 8002c3a:	f7ff fac7 	bl	80021cc <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d008      	beq.n	8002c58 <HAL_ADC_Init+0x11c>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d004      	beq.n	8002c58 <HAL_ADC_Init+0x11c>
 8002c4e:	f240 118b 	movw	r1, #395	; 0x18b
 8002c52:	4865      	ldr	r0, [pc, #404]	; (8002de8 <HAL_ADC_Init+0x2ac>)
 8002c54:	f7ff faba 	bl	80021cc <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00c      	beq.n	8002c7a <HAL_ADC_Init+0x13e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d003      	beq.n	8002c70 <HAL_ADC_Init+0x134>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	2b08      	cmp	r3, #8
 8002c6e:	d904      	bls.n	8002c7a <HAL_ADC_Init+0x13e>
 8002c70:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8002c74:	485c      	ldr	r0, [pc, #368]	; (8002de8 <HAL_ADC_Init+0x2ac>)
 8002c76:	f7ff faa9 	bl	80021cc <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d109      	bne.n	8002c96 <HAL_ADC_Init+0x15a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f7fd fb1d 	bl	80002d0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 fee2 	bl	8003a60 <ADC_ConversionStop_Disable>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca4:	f003 0310 	and.w	r3, r3, #16
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f040 80a3 	bne.w	8002df4 <HAL_ADC_Init+0x2b8>
 8002cae:	7dfb      	ldrb	r3, [r7, #23]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f040 809f 	bne.w	8002df4 <HAL_ADC_Init+0x2b8>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002cbe:	f023 0302 	bic.w	r3, r3, #2
 8002cc2:	f043 0202 	orr.w	r2, r3, #2
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8002cd2:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8002cda:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cea:	d003      	beq.n	8002cf4 <HAL_ADC_Init+0x1b8>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d102      	bne.n	8002cfa <HAL_ADC_Init+0x1be>
 8002cf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cf8:	e000      	b.n	8002cfc <HAL_ADC_Init+0x1c0>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d119      	bne.n	8002d3e <HAL_ADC_Init+0x202>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d109      	bne.n	8002d26 <HAL_ADC_Init+0x1ea>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	035a      	lsls	r2, r3, #13
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d22:	613b      	str	r3, [r7, #16]
 8002d24:	e00b      	b.n	8002d3e <HAL_ADC_Init+0x202>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2a:	f043 0220 	orr.w	r2, r3, #32
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d36:	f043 0201 	orr.w	r2, r3, #1
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6812      	ldr	r2, [r2, #0]
 8002d46:	6852      	ldr	r2, [r2, #4]
 8002d48:	f422 4169 	bic.w	r1, r2, #59648	; 0xe900
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6899      	ldr	r1, [r3, #8]
 8002d5c:	4b23      	ldr	r3, [pc, #140]	; (8002dec <HAL_ADC_Init+0x2b0>)
 8002d5e:	400b      	ands	r3, r1
 8002d60:	68b9      	ldr	r1, [r7, #8]
 8002d62:	430b      	orrs	r3, r1
 8002d64:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d6e:	d003      	beq.n	8002d78 <HAL_ADC_Init+0x23c>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d104      	bne.n	8002d82 <HAL_ADC_Init+0x246>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	051b      	lsls	r3, r3, #20
 8002d80:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6812      	ldr	r2, [r2, #0]
 8002d8a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d8c:	f422 0170 	bic.w	r1, r2, #15728640	; 0xf00000
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	4b14      	ldr	r3, [pc, #80]	; (8002df0 <HAL_ADC_Init+0x2b4>)
 8002d9e:	4013      	ands	r3, r2
 8002da0:	68ba      	ldr	r2, [r7, #8]
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d10b      	bne.n	8002dbe <HAL_ADC_Init+0x282>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db0:	f023 0303 	bic.w	r3, r3, #3
 8002db4:	f043 0201 	orr.w	r2, r3, #1
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002dbc:	e022      	b.n	8002e04 <HAL_ADC_Init+0x2c8>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc2:	f023 0312 	bic.w	r3, r3, #18
 8002dc6:	f043 0210 	orr.w	r2, r3, #16
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd2:	f043 0201 	orr.w	r2, r3, #1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002dde:	e011      	b.n	8002e04 <HAL_ADC_Init+0x2c8>
 8002de0:	40012400 	.word	0x40012400
 8002de4:	40012800 	.word	0x40012800
 8002de8:	080098d0 	.word	0x080098d0
 8002dec:	ffe1f7fd 	.word	0xffe1f7fd
 8002df0:	ff1f0efe 	.word	0xff1f0efe
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df8:	f043 0210 	orr.w	r2, r3, #16
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop

08002e10 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a5c      	ldr	r2, [pc, #368]	; (8002f94 <HAL_ADC_Start_IT+0x184>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d009      	beq.n	8002e3a <HAL_ADC_Start_IT+0x2a>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a5b      	ldr	r2, [pc, #364]	; (8002f98 <HAL_ADC_Start_IT+0x188>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d004      	beq.n	8002e3a <HAL_ADC_Start_IT+0x2a>
 8002e30:	f240 4154 	movw	r1, #1108	; 0x454
 8002e34:	4859      	ldr	r0, [pc, #356]	; (8002f9c <HAL_ADC_Start_IT+0x18c>)
 8002e36:	f7ff f9c9 	bl	80021cc <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <HAL_ADC_Start_IT+0x38>
 8002e44:	2302      	movs	r3, #2
 8002e46:	e0a0      	b.n	8002f8a <HAL_ADC_Start_IT+0x17a>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 fdb3 	bl	80039bc <ADC_Enable>
 8002e56:	4603      	mov	r3, r0
 8002e58:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002e5a:	7bfb      	ldrb	r3, [r7, #15]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f040 808f 	bne.w	8002f80 <HAL_ADC_Start_IT+0x170>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e66:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e6a:	f023 0301 	bic.w	r3, r3, #1
 8002e6e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a47      	ldr	r2, [pc, #284]	; (8002f98 <HAL_ADC_Start_IT+0x188>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d105      	bne.n	8002e8c <HAL_ADC_Start_IT+0x7c>
 8002e80:	4b44      	ldr	r3, [pc, #272]	; (8002f94 <HAL_ADC_Start_IT+0x184>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d115      	bne.n	8002eb8 <HAL_ADC_Start_IT+0xa8>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d026      	beq.n	8002ef4 <HAL_ADC_Start_IT+0xe4>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eaa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002eae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002eb6:	e01d      	b.n	8002ef4 <HAL_ADC_Start_IT+0xe4>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a32      	ldr	r2, [pc, #200]	; (8002f94 <HAL_ADC_Start_IT+0x184>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d004      	beq.n	8002ed8 <HAL_ADC_Start_IT+0xc8>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a31      	ldr	r2, [pc, #196]	; (8002f98 <HAL_ADC_Start_IT+0x188>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d10d      	bne.n	8002ef4 <HAL_ADC_Start_IT+0xe4>
 8002ed8:	4b2e      	ldr	r3, [pc, #184]	; (8002f94 <HAL_ADC_Start_IT+0x184>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d007      	beq.n	8002ef4 <HAL_ADC_Start_IT+0xe4>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002eec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d006      	beq.n	8002f0e <HAL_ADC_Start_IT+0xfe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f04:	f023 0206 	bic.w	r2, r3, #6
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f0c:	e002      	b.n	8002f14 <HAL_ADC_Start_IT+0x104>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f06f 0202 	mvn.w	r2, #2
 8002f24:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	6812      	ldr	r2, [r2, #0]
 8002f2e:	6852      	ldr	r2, [r2, #4]
 8002f30:	f042 0220 	orr.w	r2, r2, #32
 8002f34:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002f40:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002f44:	d113      	bne.n	8002f6e <HAL_ADC_Start_IT+0x15e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f4a:	4a13      	ldr	r2, [pc, #76]	; (8002f98 <HAL_ADC_Start_IT+0x188>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d105      	bne.n	8002f5c <HAL_ADC_Start_IT+0x14c>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002f50:	4b10      	ldr	r3, [pc, #64]	; (8002f94 <HAL_ADC_Start_IT+0x184>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d108      	bne.n	8002f6e <HAL_ADC_Start_IT+0x15e>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	6892      	ldr	r2, [r2, #8]
 8002f66:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002f6a:	609a      	str	r2, [r3, #8]
 8002f6c:	e00c      	b.n	8002f88 <HAL_ADC_Start_IT+0x178>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6812      	ldr	r2, [r2, #0]
 8002f76:	6892      	ldr	r2, [r2, #8]
 8002f78:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002f7c:	609a      	str	r2, [r3, #8]
 8002f7e:	e003      	b.n	8002f88 <HAL_ADC_Start_IT+0x178>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40012400 	.word	0x40012400
 8002f98:	40012800 	.word	0x40012800
 8002f9c:	080098d0 	.word	0x080098d0

08002fa0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fac:	2300      	movs	r3, #0
 8002fae:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a69      	ldr	r2, [pc, #420]	; (800315c <HAL_ADC_Start_DMA+0x1bc>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d004      	beq.n	8002fc4 <HAL_ADC_Start_DMA+0x24>
 8002fba:	f240 41fc 	movw	r1, #1276	; 0x4fc
 8002fbe:	4868      	ldr	r0, [pc, #416]	; (8003160 <HAL_ADC_Start_DMA+0x1c0>)
 8002fc0:	f7ff f904 	bl	80021cc <assert_failed>
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a64      	ldr	r2, [pc, #400]	; (800315c <HAL_ADC_Start_DMA+0x1bc>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d004      	beq.n	8002fd8 <HAL_ADC_Start_DMA+0x38>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a64      	ldr	r2, [pc, #400]	; (8003164 <HAL_ADC_Start_DMA+0x1c4>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d106      	bne.n	8002fe6 <HAL_ADC_Start_DMA+0x46>
 8002fd8:	4b60      	ldr	r3, [pc, #384]	; (800315c <HAL_ADC_Start_DMA+0x1bc>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f040 80b3 	bne.w	800314c <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d101      	bne.n	8002ff4 <HAL_ADC_Start_DMA+0x54>
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	e0ae      	b.n	8003152 <HAL_ADC_Start_DMA+0x1b2>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 fcdd 	bl	80039bc <ADC_Enable>
 8003002:	4603      	mov	r3, r0
 8003004:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003006:	7dfb      	ldrb	r3, [r7, #23]
 8003008:	2b00      	cmp	r3, #0
 800300a:	f040 809a 	bne.w	8003142 <HAL_ADC_Start_DMA+0x1a2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003012:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003016:	f023 0301 	bic.w	r3, r3, #1
 800301a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a4f      	ldr	r2, [pc, #316]	; (8003164 <HAL_ADC_Start_DMA+0x1c4>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d105      	bne.n	8003038 <HAL_ADC_Start_DMA+0x98>
 800302c:	4b4b      	ldr	r3, [pc, #300]	; (800315c <HAL_ADC_Start_DMA+0x1bc>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d115      	bne.n	8003064 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304e:	2b00      	cmp	r3, #0
 8003050:	d026      	beq.n	80030a0 <HAL_ADC_Start_DMA+0x100>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003056:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800305a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003062:	e01d      	b.n	80030a0 <HAL_ADC_Start_DMA+0x100>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003068:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a39      	ldr	r2, [pc, #228]	; (800315c <HAL_ADC_Start_DMA+0x1bc>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d004      	beq.n	8003084 <HAL_ADC_Start_DMA+0xe4>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a39      	ldr	r2, [pc, #228]	; (8003164 <HAL_ADC_Start_DMA+0x1c4>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d10d      	bne.n	80030a0 <HAL_ADC_Start_DMA+0x100>
 8003084:	4b35      	ldr	r3, [pc, #212]	; (800315c <HAL_ADC_Start_DMA+0x1bc>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800308c:	2b00      	cmp	r3, #0
 800308e:	d007      	beq.n	80030a0 <HAL_ADC_Start_DMA+0x100>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003094:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003098:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d006      	beq.n	80030ba <HAL_ADC_Start_DMA+0x11a>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	f023 0206 	bic.w	r2, r3, #6
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80030b8:	e002      	b.n	80030c0 <HAL_ADC_Start_DMA+0x120>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	4a26      	ldr	r2, [pc, #152]	; (8003168 <HAL_ADC_Start_DMA+0x1c8>)
 80030ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	4a25      	ldr	r2, [pc, #148]	; (800316c <HAL_ADC_Start_DMA+0x1cc>)
 80030d6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	4a24      	ldr	r2, [pc, #144]	; (8003170 <HAL_ADC_Start_DMA+0x1d0>)
 80030de:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f06f 0202 	mvn.w	r2, #2
 80030e8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	6812      	ldr	r2, [r2, #0]
 80030f2:	6892      	ldr	r2, [r2, #8]
 80030f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030f8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6a18      	ldr	r0, [r3, #32]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	334c      	adds	r3, #76	; 0x4c
 8003104:	4619      	mov	r1, r3
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f000 ffc9 	bl	80040a0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003118:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800311c:	d108      	bne.n	8003130 <HAL_ADC_Start_DMA+0x190>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	6812      	ldr	r2, [r2, #0]
 8003126:	6892      	ldr	r2, [r2, #8]
 8003128:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800312c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800312e:	e00f      	b.n	8003150 <HAL_ADC_Start_DMA+0x1b0>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	6812      	ldr	r2, [r2, #0]
 8003138:	6892      	ldr	r2, [r2, #8]
 800313a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800313e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003140:	e006      	b.n	8003150 <HAL_ADC_Start_DMA+0x1b0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800314a:	e001      	b.n	8003150 <HAL_ADC_Start_DMA+0x1b0>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003150:	7dfb      	ldrb	r3, [r7, #23]
}
 8003152:	4618      	mov	r0, r3
 8003154:	3718      	adds	r7, #24
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	40012400 	.word	0x40012400
 8003160:	080098d0 	.word	0x080098d0
 8003164:	40012800 	.word	0x40012800
 8003168:	08003ad5 	.word	0x08003ad5
 800316c:	08003b51 	.word	0x08003b51
 8003170:	08003b6d 	.word	0x08003b6d

08003174 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800317c:	2300      	movs	r3, #0
 800317e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a23      	ldr	r2, [pc, #140]	; (8003214 <HAL_ADC_Stop_DMA+0xa0>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d004      	beq.n	8003194 <HAL_ADC_Stop_DMA+0x20>
 800318a:	f240 5189 	movw	r1, #1417	; 0x589
 800318e:	4822      	ldr	r0, [pc, #136]	; (8003218 <HAL_ADC_Stop_DMA+0xa4>)
 8003190:	f7ff f81c 	bl	80021cc <assert_failed>
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800319a:	2b01      	cmp	r3, #1
 800319c:	d101      	bne.n	80031a2 <HAL_ADC_Stop_DMA+0x2e>
 800319e:	2302      	movs	r3, #2
 80031a0:	e033      	b.n	800320a <HAL_ADC_Stop_DMA+0x96>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 fc58 	bl	8003a60 <ADC_ConversionStop_Disable>
 80031b0:	4603      	mov	r3, r0
 80031b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d122      	bne.n	8003200 <HAL_ADC_Stop_DMA+0x8c>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6812      	ldr	r2, [r2, #0]
 80031c2:	6892      	ldr	r2, [r2, #8]
 80031c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031c8:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 ffd4 	bl	800417c <HAL_DMA_Abort>
 80031d4:	4603      	mov	r3, r0
 80031d6:	73fb      	strb	r3, [r7, #15]
    
    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10a      	bne.n	80031f4 <HAL_ADC_Stop_DMA+0x80>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031e6:	f023 0301 	bic.w	r3, r3, #1
 80031ea:	f043 0201 	orr.w	r2, r3, #1
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	629a      	str	r2, [r3, #40]	; 0x28
 80031f2:	e005      	b.n	8003200 <HAL_ADC_Stop_DMA+0x8c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8003208:	7bfb      	ldrb	r3, [r7, #15]
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40012400 	.word	0x40012400
 8003218:	080098d0 	.word	0x080098d0

0800321c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a72      	ldr	r2, [pc, #456]	; (80033f4 <HAL_ADC_IRQHandler+0x1d8>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d009      	beq.n	8003242 <HAL_ADC_IRQHandler+0x26>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a71      	ldr	r2, [pc, #452]	; (80033f8 <HAL_ADC_IRQHandler+0x1dc>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d004      	beq.n	8003242 <HAL_ADC_IRQHandler+0x26>
 8003238:	f240 51d9 	movw	r1, #1497	; 0x5d9
 800323c:	486f      	ldr	r0, [pc, #444]	; (80033fc <HAL_ADC_IRQHandler+0x1e0>)
 800323e:	f7fe ffc5 	bl	80021cc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d008      	beq.n	800325c <HAL_ADC_IRQHandler+0x40>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d004      	beq.n	800325c <HAL_ADC_IRQHandler+0x40>
 8003252:	f240 51da 	movw	r1, #1498	; 0x5da
 8003256:	4869      	ldr	r0, [pc, #420]	; (80033fc <HAL_ADC_IRQHandler+0x1e0>)
 8003258:	f7fe ffb8 	bl	80021cc <assert_failed>
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d003      	beq.n	800326c <HAL_ADC_IRQHandler+0x50>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	2b10      	cmp	r3, #16
 800326a:	d904      	bls.n	8003276 <HAL_ADC_IRQHandler+0x5a>
 800326c:	f240 51db 	movw	r1, #1499	; 0x5db
 8003270:	4862      	ldr	r0, [pc, #392]	; (80033fc <HAL_ADC_IRQHandler+0x1e0>)
 8003272:	f7fe ffab 	bl	80021cc <assert_failed>
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f003 0320 	and.w	r3, r3, #32
 8003280:	2b20      	cmp	r3, #32
 8003282:	d140      	bne.n	8003306 <HAL_ADC_IRQHandler+0xea>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b02      	cmp	r3, #2
 8003290:	d139      	bne.n	8003306 <HAL_ADC_IRQHandler+0xea>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003296:	f003 0310 	and.w	r3, r3, #16
 800329a:	2b00      	cmp	r3, #0
 800329c:	d105      	bne.n	80032aa <HAL_ADC_IRQHandler+0x8e>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80032b4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80032b8:	d11d      	bne.n	80032f6 <HAL_ADC_IRQHandler+0xda>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68db      	ldr	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d119      	bne.n	80032f6 <HAL_ADC_IRQHandler+0xda>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6812      	ldr	r2, [r2, #0]
 80032ca:	6852      	ldr	r2, [r2, #4]
 80032cc:	f022 0220 	bic.w	r2, r2, #32
 80032d0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d105      	bne.n	80032f6 <HAL_ADC_IRQHandler+0xda>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ee:	f043 0201 	orr.w	r2, r3, #1
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	629a      	str	r2, [r3, #40]	; 0x28
        }
      }

      /* Conversion complete callback */
      HAL_ADC_ConvCpltCallback(hadc);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7fe fdd4 	bl	8001ea4 <HAL_ADC_ConvCpltCallback>
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f06f 0212 	mvn.w	r2, #18
 8003304:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003310:	2b80      	cmp	r3, #128	; 0x80
 8003312:	d14f      	bne.n	80033b4 <HAL_ADC_IRQHandler+0x198>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0304 	and.w	r3, r3, #4
 800331e:	2b04      	cmp	r3, #4
 8003320:	d148      	bne.n	80033b4 <HAL_ADC_IRQHandler+0x198>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003326:	f003 0310 	and.w	r3, r3, #16
 800332a:	2b00      	cmp	r3, #0
 800332c:	d105      	bne.n	800333a <HAL_ADC_IRQHandler+0x11e>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003332:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003344:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8003348:	d012      	beq.n	8003370 <HAL_ADC_IRQHandler+0x154>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003354:	2b00      	cmp	r3, #0
 8003356:	d125      	bne.n	80033a4 <HAL_ADC_IRQHandler+0x188>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003362:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003366:	d11d      	bne.n	80033a4 <HAL_ADC_IRQHandler+0x188>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800336c:	2b00      	cmp	r3, #0
 800336e:	d119      	bne.n	80033a4 <HAL_ADC_IRQHandler+0x188>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6812      	ldr	r2, [r2, #0]
 8003378:	6852      	ldr	r2, [r2, #4]
 800337a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800337e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003384:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003394:	2b00      	cmp	r3, #0
 8003396:	d105      	bne.n	80033a4 <HAL_ADC_IRQHandler+0x188>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339c:	f043 0201 	orr.w	r2, r3, #1
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	629a      	str	r2, [r3, #40]	; 0x28
        }
      }

      /* Conversion complete callback */ 
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 fbfb 	bl	8003ba0 <HAL_ADCEx_InjectedConvCpltCallback>
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f06f 020c 	mvn.w	r2, #12
 80033b2:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033be:	2b40      	cmp	r3, #64	; 0x40
 80033c0:	d114      	bne.n	80033ec <HAL_ADC_IRQHandler+0x1d0>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d10d      	bne.n	80033ec <HAL_ADC_IRQHandler+0x1d0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f7fe fedf 	bl	80021a0 <HAL_ADC_LevelOutOfWindowCallback>
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f06f 0201 	mvn.w	r2, #1
 80033ea:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80033ec:	bf00      	nop
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40012400 	.word	0x40012400
 80033f8:	40012800 	.word	0x40012800
 80033fc:	080098d0 	.word	0x080098d0

08003400 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	bc80      	pop	{r7}
 8003410:	4770      	bx	lr

08003412 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr

08003424 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003424:	b590      	push	{r4, r7, lr}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800342e:	2300      	movs	r3, #0
 8003430:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003432:	2300      	movs	r3, #0
 8003434:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a88      	ldr	r2, [pc, #544]	; (800365c <HAL_ADC_ConfigChannel+0x238>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d009      	beq.n	8003454 <HAL_ADC_ConfigChannel+0x30>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a86      	ldr	r2, [pc, #536]	; (8003660 <HAL_ADC_ConfigChannel+0x23c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d004      	beq.n	8003454 <HAL_ADC_ConfigChannel+0x30>
 800344a:	f240 61aa 	movw	r1, #1706	; 0x6aa
 800344e:	4885      	ldr	r0, [pc, #532]	; (8003664 <HAL_ADC_ConfigChannel+0x240>)
 8003450:	f7fe febc 	bl	80021cc <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d048      	beq.n	80034ee <HAL_ADC_ConfigChannel+0xca>
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d044      	beq.n	80034ee <HAL_ADC_ConfigChannel+0xca>
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2b02      	cmp	r3, #2
 800346a:	d040      	beq.n	80034ee <HAL_ADC_ConfigChannel+0xca>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2b03      	cmp	r3, #3
 8003472:	d03c      	beq.n	80034ee <HAL_ADC_ConfigChannel+0xca>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2b04      	cmp	r3, #4
 800347a:	d038      	beq.n	80034ee <HAL_ADC_ConfigChannel+0xca>
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2b05      	cmp	r3, #5
 8003482:	d034      	beq.n	80034ee <HAL_ADC_ConfigChannel+0xca>
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b06      	cmp	r3, #6
 800348a:	d030      	beq.n	80034ee <HAL_ADC_ConfigChannel+0xca>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2b07      	cmp	r3, #7
 8003492:	d02c      	beq.n	80034ee <HAL_ADC_ConfigChannel+0xca>
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b08      	cmp	r3, #8
 800349a:	d028      	beq.n	80034ee <HAL_ADC_ConfigChannel+0xca>
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b09      	cmp	r3, #9
 80034a2:	d024      	beq.n	80034ee <HAL_ADC_ConfigChannel+0xca>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2b0a      	cmp	r3, #10
 80034aa:	d020      	beq.n	80034ee <HAL_ADC_ConfigChannel+0xca>
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2b0b      	cmp	r3, #11
 80034b2:	d01c      	beq.n	80034ee <HAL_ADC_ConfigChannel+0xca>
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b0c      	cmp	r3, #12
 80034ba:	d018      	beq.n	80034ee <HAL_ADC_ConfigChannel+0xca>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2b0d      	cmp	r3, #13
 80034c2:	d014      	beq.n	80034ee <HAL_ADC_ConfigChannel+0xca>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b0e      	cmp	r3, #14
 80034ca:	d010      	beq.n	80034ee <HAL_ADC_ConfigChannel+0xca>
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2b0f      	cmp	r3, #15
 80034d2:	d00c      	beq.n	80034ee <HAL_ADC_ConfigChannel+0xca>
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2b10      	cmp	r3, #16
 80034da:	d008      	beq.n	80034ee <HAL_ADC_ConfigChannel+0xca>
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2b11      	cmp	r3, #17
 80034e2:	d004      	beq.n	80034ee <HAL_ADC_ConfigChannel+0xca>
 80034e4:	f240 61ab 	movw	r1, #1707	; 0x6ab
 80034e8:	485e      	ldr	r0, [pc, #376]	; (8003664 <HAL_ADC_ConfigChannel+0x240>)
 80034ea:	f7fe fe6f 	bl	80021cc <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d040      	beq.n	8003578 <HAL_ADC_ConfigChannel+0x154>
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d03c      	beq.n	8003578 <HAL_ADC_ConfigChannel+0x154>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b03      	cmp	r3, #3
 8003504:	d038      	beq.n	8003578 <HAL_ADC_ConfigChannel+0x154>
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b04      	cmp	r3, #4
 800350c:	d034      	beq.n	8003578 <HAL_ADC_ConfigChannel+0x154>
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2b05      	cmp	r3, #5
 8003514:	d030      	beq.n	8003578 <HAL_ADC_ConfigChannel+0x154>
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2b06      	cmp	r3, #6
 800351c:	d02c      	beq.n	8003578 <HAL_ADC_ConfigChannel+0x154>
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2b07      	cmp	r3, #7
 8003524:	d028      	beq.n	8003578 <HAL_ADC_ConfigChannel+0x154>
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b08      	cmp	r3, #8
 800352c:	d024      	beq.n	8003578 <HAL_ADC_ConfigChannel+0x154>
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2b09      	cmp	r3, #9
 8003534:	d020      	beq.n	8003578 <HAL_ADC_ConfigChannel+0x154>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b0a      	cmp	r3, #10
 800353c:	d01c      	beq.n	8003578 <HAL_ADC_ConfigChannel+0x154>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b0b      	cmp	r3, #11
 8003544:	d018      	beq.n	8003578 <HAL_ADC_ConfigChannel+0x154>
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b0c      	cmp	r3, #12
 800354c:	d014      	beq.n	8003578 <HAL_ADC_ConfigChannel+0x154>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b0d      	cmp	r3, #13
 8003554:	d010      	beq.n	8003578 <HAL_ADC_ConfigChannel+0x154>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b0e      	cmp	r3, #14
 800355c:	d00c      	beq.n	8003578 <HAL_ADC_ConfigChannel+0x154>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2b0f      	cmp	r3, #15
 8003564:	d008      	beq.n	8003578 <HAL_ADC_ConfigChannel+0x154>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b10      	cmp	r3, #16
 800356c:	d004      	beq.n	8003578 <HAL_ADC_ConfigChannel+0x154>
 800356e:	f240 61ac 	movw	r1, #1708	; 0x6ac
 8003572:	483c      	ldr	r0, [pc, #240]	; (8003664 <HAL_ADC_ConfigChannel+0x240>)
 8003574:	f7fe fe2a 	bl	80021cc <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d020      	beq.n	80035c2 <HAL_ADC_ConfigChannel+0x19e>
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d01c      	beq.n	80035c2 <HAL_ADC_ConfigChannel+0x19e>
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	2b02      	cmp	r3, #2
 800358e:	d018      	beq.n	80035c2 <HAL_ADC_ConfigChannel+0x19e>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	2b03      	cmp	r3, #3
 8003596:	d014      	beq.n	80035c2 <HAL_ADC_ConfigChannel+0x19e>
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2b04      	cmp	r3, #4
 800359e:	d010      	beq.n	80035c2 <HAL_ADC_ConfigChannel+0x19e>
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	2b05      	cmp	r3, #5
 80035a6:	d00c      	beq.n	80035c2 <HAL_ADC_ConfigChannel+0x19e>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	2b06      	cmp	r3, #6
 80035ae:	d008      	beq.n	80035c2 <HAL_ADC_ConfigChannel+0x19e>
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	2b07      	cmp	r3, #7
 80035b6:	d004      	beq.n	80035c2 <HAL_ADC_ConfigChannel+0x19e>
 80035b8:	f240 61ad 	movw	r1, #1709	; 0x6ad
 80035bc:	4829      	ldr	r0, [pc, #164]	; (8003664 <HAL_ADC_ConfigChannel+0x240>)
 80035be:	f7fe fe05 	bl	80021cc <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d101      	bne.n	80035d0 <HAL_ADC_ConfigChannel+0x1ac>
 80035cc:	2302      	movs	r3, #2
 80035ce:	e0e2      	b.n	8003796 <HAL_ADC_ConfigChannel+0x372>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2b06      	cmp	r3, #6
 80035de:	d81c      	bhi.n	800361a <HAL_ADC_ConfigChannel+0x1f6>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6819      	ldr	r1, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	4613      	mov	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	3b05      	subs	r3, #5
 80035f6:	221f      	movs	r2, #31
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	43db      	mvns	r3, r3
 80035fe:	4018      	ands	r0, r3
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681c      	ldr	r4, [r3, #0]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	4613      	mov	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	3b05      	subs	r3, #5
 8003610:	fa04 f303 	lsl.w	r3, r4, r3
 8003614:	4303      	orrs	r3, r0
 8003616:	634b      	str	r3, [r1, #52]	; 0x34
 8003618:	e042      	b.n	80036a0 <HAL_ADC_ConfigChannel+0x27c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b0c      	cmp	r3, #12
 8003620:	d822      	bhi.n	8003668 <HAL_ADC_ConfigChannel+0x244>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6819      	ldr	r1, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	4613      	mov	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	3b23      	subs	r3, #35	; 0x23
 8003638:	221f      	movs	r2, #31
 800363a:	fa02 f303 	lsl.w	r3, r2, r3
 800363e:	43db      	mvns	r3, r3
 8003640:	4018      	ands	r0, r3
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681c      	ldr	r4, [r3, #0]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	3b23      	subs	r3, #35	; 0x23
 8003652:	fa04 f303 	lsl.w	r3, r4, r3
 8003656:	4303      	orrs	r3, r0
 8003658:	630b      	str	r3, [r1, #48]	; 0x30
 800365a:	e021      	b.n	80036a0 <HAL_ADC_ConfigChannel+0x27c>
 800365c:	40012400 	.word	0x40012400
 8003660:	40012800 	.word	0x40012800
 8003664:	080098d0 	.word	0x080098d0
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6819      	ldr	r1, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	4613      	mov	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	3b41      	subs	r3, #65	; 0x41
 800367e:	221f      	movs	r2, #31
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	43db      	mvns	r3, r3
 8003686:	4018      	ands	r0, r3
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681c      	ldr	r4, [r3, #0]
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	4613      	mov	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	3b41      	subs	r3, #65	; 0x41
 8003698:	fa04 f303 	lsl.w	r3, r4, r3
 800369c:	4303      	orrs	r3, r0
 800369e:	62cb      	str	r3, [r1, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2b09      	cmp	r3, #9
 80036a6:	d91c      	bls.n	80036e2 <HAL_ADC_ConfigChannel+0x2be>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6819      	ldr	r1, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68d8      	ldr	r0, [r3, #12]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	4613      	mov	r3, r2
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	4413      	add	r3, r2
 80036bc:	3b1e      	subs	r3, #30
 80036be:	2207      	movs	r2, #7
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	43db      	mvns	r3, r3
 80036c6:	4018      	ands	r0, r3
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	689c      	ldr	r4, [r3, #8]
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	4613      	mov	r3, r2
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	4413      	add	r3, r2
 80036d6:	3b1e      	subs	r3, #30
 80036d8:	fa04 f303 	lsl.w	r3, r4, r3
 80036dc:	4303      	orrs	r3, r0
 80036de:	60cb      	str	r3, [r1, #12]
 80036e0:	e019      	b.n	8003716 <HAL_ADC_ConfigChannel+0x2f2>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6819      	ldr	r1, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6918      	ldr	r0, [r3, #16]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	4613      	mov	r3, r2
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	4413      	add	r3, r2
 80036f6:	2207      	movs	r2, #7
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	43db      	mvns	r3, r3
 80036fe:	4018      	ands	r0, r3
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	689c      	ldr	r4, [r3, #8]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	4613      	mov	r3, r2
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	4413      	add	r3, r2
 800370e:	fa04 f303 	lsl.w	r3, r4, r3
 8003712:	4303      	orrs	r3, r0
 8003714:	610b      	str	r3, [r1, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2b10      	cmp	r3, #16
 800371c:	d003      	beq.n	8003726 <HAL_ADC_ConfigChannel+0x302>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003722:	2b11      	cmp	r3, #17
 8003724:	d132      	bne.n	800378c <HAL_ADC_ConfigChannel+0x368>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a1d      	ldr	r2, [pc, #116]	; (80037a0 <HAL_ADC_ConfigChannel+0x37c>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d125      	bne.n	800377c <HAL_ADC_ConfigChannel+0x358>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d126      	bne.n	800378c <HAL_ADC_ConfigChannel+0x368>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6812      	ldr	r2, [r2, #0]
 8003746:	6892      	ldr	r2, [r2, #8]
 8003748:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800374c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2b10      	cmp	r3, #16
 8003754:	d11a      	bne.n	800378c <HAL_ADC_ConfigChannel+0x368>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003756:	4b13      	ldr	r3, [pc, #76]	; (80037a4 <HAL_ADC_ConfigChannel+0x380>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a13      	ldr	r2, [pc, #76]	; (80037a8 <HAL_ADC_ConfigChannel+0x384>)
 800375c:	fba2 2303 	umull	r2, r3, r2, r3
 8003760:	0c9a      	lsrs	r2, r3, #18
 8003762:	4613      	mov	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800376c:	e002      	b.n	8003774 <HAL_ADC_ConfigChannel+0x350>
          {
            wait_loop_index--;
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	3b01      	subs	r3, #1
 8003772:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1f9      	bne.n	800376e <HAL_ADC_ConfigChannel+0x34a>
 800377a:	e007      	b.n	800378c <HAL_ADC_ConfigChannel+0x368>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003780:	f043 0220 	orr.w	r2, r3, #32
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003794:	7bfb      	ldrb	r3, [r7, #15]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3714      	adds	r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	bd90      	pop	{r4, r7, pc}
 800379e:	bf00      	nop
 80037a0:	40012400 	.word	0x40012400
 80037a4:	20000004 	.word	0x20000004
 80037a8:	431bde83 	.word	0x431bde83

080037ac <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc: ADC handle
  * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a79      	ldr	r2, [pc, #484]	; (80039a0 <HAL_ADC_AnalogWDGConfig+0x1f4>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d009      	beq.n	80037d4 <HAL_ADC_AnalogWDGConfig+0x28>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a77      	ldr	r2, [pc, #476]	; (80039a4 <HAL_ADC_AnalogWDGConfig+0x1f8>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d004      	beq.n	80037d4 <HAL_ADC_AnalogWDGConfig+0x28>
 80037ca:	f240 7115 	movw	r1, #1813	; 0x715
 80037ce:	4876      	ldr	r0, [pc, #472]	; (80039a8 <HAL_ADC_AnalogWDGConfig+0x1fc>)
 80037d0:	f7fe fcfc 	bl	80021cc <assert_failed>
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d022      	beq.n	8003822 <HAL_ADC_AnalogWDGConfig+0x76>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a72      	ldr	r2, [pc, #456]	; (80039ac <HAL_ADC_AnalogWDGConfig+0x200>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d01d      	beq.n	8003822 <HAL_ADC_AnalogWDGConfig+0x76>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a71      	ldr	r2, [pc, #452]	; (80039b0 <HAL_ADC_AnalogWDGConfig+0x204>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d018      	beq.n	8003822 <HAL_ADC_AnalogWDGConfig+0x76>
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a6f      	ldr	r2, [pc, #444]	; (80039b4 <HAL_ADC_AnalogWDGConfig+0x208>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d013      	beq.n	8003822 <HAL_ADC_AnalogWDGConfig+0x76>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003802:	d00e      	beq.n	8003822 <HAL_ADC_AnalogWDGConfig+0x76>
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800380c:	d009      	beq.n	8003822 <HAL_ADC_AnalogWDGConfig+0x76>
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003816:	d004      	beq.n	8003822 <HAL_ADC_AnalogWDGConfig+0x76>
 8003818:	f240 7116 	movw	r1, #1814	; 0x716
 800381c:	4862      	ldr	r0, [pc, #392]	; (80039a8 <HAL_ADC_AnalogWDGConfig+0x1fc>)
 800381e:	f7fe fcd5 	bl	80021cc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d008      	beq.n	800383c <HAL_ADC_AnalogWDGConfig+0x90>
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d004      	beq.n	800383c <HAL_ADC_AnalogWDGConfig+0x90>
 8003832:	f240 7117 	movw	r1, #1815	; 0x717
 8003836:	485c      	ldr	r0, [pc, #368]	; (80039a8 <HAL_ADC_AnalogWDGConfig+0x1fc>)
 8003838:	f7fe fcc8 	bl	80021cc <assert_failed>
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->HighThreshold));
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003844:	d304      	bcc.n	8003850 <HAL_ADC_AnalogWDGConfig+0xa4>
 8003846:	f44f 61e3 	mov.w	r1, #1816	; 0x718
 800384a:	4857      	ldr	r0, [pc, #348]	; (80039a8 <HAL_ADC_AnalogWDGConfig+0x1fc>)
 800384c:	f7fe fcbe 	bl	80021cc <assert_failed>
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->LowThreshold));
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003858:	d304      	bcc.n	8003864 <HAL_ADC_AnalogWDGConfig+0xb8>
 800385a:	f240 7119 	movw	r1, #1817	; 0x719
 800385e:	4852      	ldr	r0, [pc, #328]	; (80039a8 <HAL_ADC_AnalogWDGConfig+0x1fc>)
 8003860:	f7fe fcb4 	bl	80021cc <assert_failed>
  
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a50      	ldr	r2, [pc, #320]	; (80039ac <HAL_ADC_AnalogWDGConfig+0x200>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d009      	beq.n	8003882 <HAL_ADC_AnalogWDGConfig+0xd6>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8003872:	4a4f      	ldr	r2, [pc, #316]	; (80039b0 <HAL_ADC_AnalogWDGConfig+0x204>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d004      	beq.n	8003882 <HAL_ADC_AnalogWDGConfig+0xd6>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REGINJEC)  )
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 800387c:	4a4d      	ldr	r2, [pc, #308]	; (80039b4 <HAL_ADC_AnalogWDGConfig+0x208>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d14c      	bne.n	800391c <HAL_ADC_AnalogWDGConfig+0x170>
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d048      	beq.n	800391c <HAL_ADC_AnalogWDGConfig+0x170>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d044      	beq.n	800391c <HAL_ADC_AnalogWDGConfig+0x170>
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b02      	cmp	r3, #2
 8003898:	d040      	beq.n	800391c <HAL_ADC_AnalogWDGConfig+0x170>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2b03      	cmp	r3, #3
 80038a0:	d03c      	beq.n	800391c <HAL_ADC_AnalogWDGConfig+0x170>
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d038      	beq.n	800391c <HAL_ADC_AnalogWDGConfig+0x170>
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2b05      	cmp	r3, #5
 80038b0:	d034      	beq.n	800391c <HAL_ADC_AnalogWDGConfig+0x170>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b06      	cmp	r3, #6
 80038b8:	d030      	beq.n	800391c <HAL_ADC_AnalogWDGConfig+0x170>
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	2b07      	cmp	r3, #7
 80038c0:	d02c      	beq.n	800391c <HAL_ADC_AnalogWDGConfig+0x170>
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2b08      	cmp	r3, #8
 80038c8:	d028      	beq.n	800391c <HAL_ADC_AnalogWDGConfig+0x170>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	2b09      	cmp	r3, #9
 80038d0:	d024      	beq.n	800391c <HAL_ADC_AnalogWDGConfig+0x170>
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b0a      	cmp	r3, #10
 80038d8:	d020      	beq.n	800391c <HAL_ADC_AnalogWDGConfig+0x170>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2b0b      	cmp	r3, #11
 80038e0:	d01c      	beq.n	800391c <HAL_ADC_AnalogWDGConfig+0x170>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2b0c      	cmp	r3, #12
 80038e8:	d018      	beq.n	800391c <HAL_ADC_AnalogWDGConfig+0x170>
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b0d      	cmp	r3, #13
 80038f0:	d014      	beq.n	800391c <HAL_ADC_AnalogWDGConfig+0x170>
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	2b0e      	cmp	r3, #14
 80038f8:	d010      	beq.n	800391c <HAL_ADC_AnalogWDGConfig+0x170>
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2b0f      	cmp	r3, #15
 8003900:	d00c      	beq.n	800391c <HAL_ADC_AnalogWDGConfig+0x170>
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b10      	cmp	r3, #16
 8003908:	d008      	beq.n	800391c <HAL_ADC_AnalogWDGConfig+0x170>
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b11      	cmp	r3, #17
 8003910:	d004      	beq.n	800391c <HAL_ADC_AnalogWDGConfig+0x170>
 8003912:	f240 711f 	movw	r1, #1823	; 0x71f
 8003916:	4824      	ldr	r0, [pc, #144]	; (80039a8 <HAL_ADC_AnalogWDGConfig+0x1fc>)
 8003918:	f7fe fc58 	bl	80021cc <assert_failed>
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003922:	2b01      	cmp	r3, #1
 8003924:	d101      	bne.n	800392a <HAL_ADC_AnalogWDGConfig+0x17e>
 8003926:	2302      	movs	r3, #2
 8003928:	e035      	b.n	8003996 <HAL_ADC_AnalogWDGConfig+0x1ea>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Analog watchdog configuration */

  /* Configure ADC Analog watchdog interrupt */
  if(AnalogWDGConfig->ITMode == ENABLE)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d108      	bne.n	800394c <HAL_ADC_AnalogWDGConfig+0x1a0>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6812      	ldr	r2, [r2, #0]
 8003942:	6852      	ldr	r2, [r2, #4]
 8003944:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003948:	605a      	str	r2, [r3, #4]
 800394a:	e007      	b.n	800395c <HAL_ADC_AnalogWDGConfig+0x1b0>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6812      	ldr	r2, [r2, #0]
 8003954:	6852      	ldr	r2, [r2, #4]
 8003956:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800395a:	605a      	str	r2, [r3, #4]
  /* Configuration of analog watchdog:                                        */
  /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
  /*    one or all channels.                                                  */
  /*  - Set the Analog watchdog channel (is not used if watchdog              */
  /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
  MODIFY_REG(hadc->Instance->CR1            ,
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6859      	ldr	r1, [r3, #4]
 8003966:	4b14      	ldr	r3, [pc, #80]	; (80039b8 <HAL_ADC_AnalogWDGConfig+0x20c>)
 8003968:	400b      	ands	r3, r1
 800396a:	6839      	ldr	r1, [r7, #0]
 800396c:	6808      	ldr	r0, [r1, #0]
 800396e:	6839      	ldr	r1, [r7, #0]
 8003970:	6849      	ldr	r1, [r1, #4]
 8003972:	4301      	orrs	r1, r0
 8003974:	430b      	orrs	r3, r1
 8003976:	6053      	str	r3, [r2, #4]
             ADC_CR1_AWDCH                  ,
             AnalogWDGConfig->WatchdogMode |
             AnalogWDGConfig->Channel        );
  
  /* Set the high threshold */
  WRITE_REG(hadc->Instance->HTR, AnalogWDGConfig->HighThreshold);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	68d2      	ldr	r2, [r2, #12]
 8003980:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  WRITE_REG(hadc->Instance->LTR, AnalogWDGConfig->LowThreshold);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	6912      	ldr	r2, [r2, #16]
 800398a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40012400 	.word	0x40012400
 80039a4:	40012800 	.word	0x40012800
 80039a8:	080098d0 	.word	0x080098d0
 80039ac:	00800200 	.word	0x00800200
 80039b0:	00400200 	.word	0x00400200
 80039b4:	00c00200 	.word	0x00c00200
 80039b8:	ff3ffde0 	.word	0xff3ffde0

080039bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039c4:	2300      	movs	r3, #0
 80039c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d039      	beq.n	8003a4e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	6812      	ldr	r2, [r2, #0]
 80039e2:	6892      	ldr	r2, [r2, #8]
 80039e4:	f042 0201 	orr.w	r2, r2, #1
 80039e8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80039ea:	4b1b      	ldr	r3, [pc, #108]	; (8003a58 <ADC_Enable+0x9c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a1b      	ldr	r2, [pc, #108]	; (8003a5c <ADC_Enable+0xa0>)
 80039f0:	fba2 2303 	umull	r2, r3, r2, r3
 80039f4:	0c9b      	lsrs	r3, r3, #18
 80039f6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80039f8:	e002      	b.n	8003a00 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	3b01      	subs	r3, #1
 80039fe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1f9      	bne.n	80039fa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003a06:	f7ff f881 	bl	8002b0c <HAL_GetTick>
 8003a0a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003a0c:	e018      	b.n	8003a40 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a0e:	f7ff f87d 	bl	8002b0c <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d911      	bls.n	8003a40 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a20:	f043 0210 	orr.w	r2, r3, #16
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2c:	f043 0201 	orr.w	r2, r3, #1
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e007      	b.n	8003a50 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d1df      	bne.n	8003a0e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	20000004 	.word	0x20000004
 8003a5c:	431bde83 	.word	0x431bde83

08003a60 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d127      	bne.n	8003aca <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	6812      	ldr	r2, [r2, #0]
 8003a82:	6892      	ldr	r2, [r2, #8]
 8003a84:	f022 0201 	bic.w	r2, r2, #1
 8003a88:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003a8a:	f7ff f83f 	bl	8002b0c <HAL_GetTick>
 8003a8e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003a90:	e014      	b.n	8003abc <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003a92:	f7ff f83b 	bl	8002b0c <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d90d      	bls.n	8003abc <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa4:	f043 0210 	orr.w	r2, r3, #16
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab0:	f043 0201 	orr.w	r2, r3, #1
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e007      	b.n	8003acc <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d0e3      	beq.n	8003a92 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d127      	bne.n	8003b3e <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003b04:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003b08:	d115      	bne.n	8003b36 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	68db      	ldr	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d111      	bne.n	8003b36 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d105      	bne.n	8003b36 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2e:	f043 0201 	orr.w	r2, r3, #1
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f7fe f9b4 	bl	8001ea4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003b3c:	e004      	b.n	8003b48 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	4798      	blx	r3
}
 8003b48:	bf00      	nop
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f7ff fc4e 	bl	8003400 <HAL_ADC_ConvHalfCpltCallback>
}
 8003b64:	bf00      	nop
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8a:	f043 0204 	orr.w	r2, r3, #4
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f7ff fc3d 	bl	8003412 <HAL_ADC_ErrorCallback>
}
 8003b98:	bf00      	nop
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bc80      	pop	{r7}
 8003bb0:	4770      	bx	lr
	...

08003bb4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bc4:	4b0c      	ldr	r3, [pc, #48]	; (8003bf8 <NVIC_SetPriorityGrouping+0x44>)
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003be6:	4a04      	ldr	r2, [pc, #16]	; (8003bf8 <NVIC_SetPriorityGrouping+0x44>)
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	60d3      	str	r3, [r2, #12]
}
 8003bec:	bf00      	nop
 8003bee:	3714      	adds	r7, #20
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bc80      	pop	{r7}
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	e000ed00 	.word	0xe000ed00

08003bfc <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c00:	4b04      	ldr	r3, [pc, #16]	; (8003c14 <NVIC_GetPriorityGrouping+0x18>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	0a1b      	lsrs	r3, r3, #8
 8003c06:	f003 0307 	and.w	r3, r3, #7
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bc80      	pop	{r7}
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	e000ed00 	.word	0xe000ed00

08003c18 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	4603      	mov	r3, r0
 8003c20:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003c22:	4908      	ldr	r1, [pc, #32]	; (8003c44 <NVIC_EnableIRQ+0x2c>)
 8003c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c28:	095b      	lsrs	r3, r3, #5
 8003c2a:	79fa      	ldrb	r2, [r7, #7]
 8003c2c:	f002 021f 	and.w	r2, r2, #31
 8003c30:	2001      	movs	r0, #1
 8003c32:	fa00 f202 	lsl.w	r2, r0, r2
 8003c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bc80      	pop	{r7}
 8003c42:	4770      	bx	lr
 8003c44:	e000e100 	.word	0xe000e100

08003c48 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	4603      	mov	r3, r0
 8003c50:	6039      	str	r1, [r7, #0]
 8003c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8003c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	da0b      	bge.n	8003c74 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c5c:	490d      	ldr	r1, [pc, #52]	; (8003c94 <NVIC_SetPriority+0x4c>)
 8003c5e:	79fb      	ldrb	r3, [r7, #7]
 8003c60:	f003 030f 	and.w	r3, r3, #15
 8003c64:	3b04      	subs	r3, #4
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	0112      	lsls	r2, r2, #4
 8003c6c:	b2d2      	uxtb	r2, r2
 8003c6e:	440b      	add	r3, r1
 8003c70:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c72:	e009      	b.n	8003c88 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c74:	4908      	ldr	r1, [pc, #32]	; (8003c98 <NVIC_SetPriority+0x50>)
 8003c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	0112      	lsls	r2, r2, #4
 8003c80:	b2d2      	uxtb	r2, r2
 8003c82:	440b      	add	r3, r1
 8003c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bc80      	pop	{r7}
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	e000ed00 	.word	0xe000ed00
 8003c98:	e000e100 	.word	0xe000e100

08003c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b089      	sub	sp, #36	; 0x24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	f1c3 0307 	rsb	r3, r3, #7
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	bf28      	it	cs
 8003cba:	2304      	movcs	r3, #4
 8003cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	2b06      	cmp	r3, #6
 8003cc4:	d902      	bls.n	8003ccc <NVIC_EncodePriority+0x30>
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	3b03      	subs	r3, #3
 8003cca:	e000      	b.n	8003cce <NVIC_EncodePriority+0x32>
 8003ccc:	2300      	movs	r3, #0
 8003cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	1e5a      	subs	r2, r3, #1
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	401a      	ands	r2, r3
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cea:	1e59      	subs	r1, r3, #1
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cf0:	4313      	orrs	r3, r2
         );
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3724      	adds	r7, #36	; 0x24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bc80      	pop	{r7}
 8003cfa:	4770      	bx	lr

08003cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3b01      	subs	r3, #1
 8003d08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d0c:	d301      	bcc.n	8003d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e00f      	b.n	8003d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d12:	4a0a      	ldr	r2, [pc, #40]	; (8003d3c <SysTick_Config+0x40>)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3b01      	subs	r3, #1
 8003d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d1a:	210f      	movs	r1, #15
 8003d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d20:	f7ff ff92 	bl	8003c48 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d24:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <SysTick_Config+0x40>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d2a:	4b04      	ldr	r3, [pc, #16]	; (8003d3c <SysTick_Config+0x40>)
 8003d2c:	2207      	movs	r2, #7
 8003d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	e000e010 	.word	0xe000e010

08003d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b07      	cmp	r3, #7
 8003d4c:	d00f      	beq.n	8003d6e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b06      	cmp	r3, #6
 8003d52:	d00c      	beq.n	8003d6e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b05      	cmp	r3, #5
 8003d58:	d009      	beq.n	8003d6e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b04      	cmp	r3, #4
 8003d5e:	d006      	beq.n	8003d6e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b03      	cmp	r3, #3
 8003d64:	d003      	beq.n	8003d6e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003d66:	21a2      	movs	r1, #162	; 0xa2
 8003d68:	4804      	ldr	r0, [pc, #16]	; (8003d7c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003d6a:	f7fe fa2f 	bl	80021cc <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7ff ff20 	bl	8003bb4 <NVIC_SetPriorityGrouping>
}
 8003d74:	bf00      	nop
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	08009910 	.word	0x08009910

08003d80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	4603      	mov	r3, r0
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
 8003d8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2b0f      	cmp	r3, #15
 8003d96:	d903      	bls.n	8003da0 <HAL_NVIC_SetPriority+0x20>
 8003d98:	21ba      	movs	r1, #186	; 0xba
 8003d9a:	480e      	ldr	r0, [pc, #56]	; (8003dd4 <HAL_NVIC_SetPriority+0x54>)
 8003d9c:	f7fe fa16 	bl	80021cc <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2b0f      	cmp	r3, #15
 8003da4:	d903      	bls.n	8003dae <HAL_NVIC_SetPriority+0x2e>
 8003da6:	21bb      	movs	r1, #187	; 0xbb
 8003da8:	480a      	ldr	r0, [pc, #40]	; (8003dd4 <HAL_NVIC_SetPriority+0x54>)
 8003daa:	f7fe fa0f 	bl	80021cc <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003dae:	f7ff ff25 	bl	8003bfc <NVIC_GetPriorityGrouping>
 8003db2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	68b9      	ldr	r1, [r7, #8]
 8003db8:	6978      	ldr	r0, [r7, #20]
 8003dba:	f7ff ff6f 	bl	8003c9c <NVIC_EncodePriority>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dc4:	4611      	mov	r1, r2
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7ff ff3e 	bl	8003c48 <NVIC_SetPriority>
}
 8003dcc:	bf00      	nop
 8003dce:	3718      	adds	r7, #24
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	08009910 	.word	0x08009910

08003dd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	4603      	mov	r3, r0
 8003de0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	da03      	bge.n	8003df2 <HAL_NVIC_EnableIRQ+0x1a>
 8003dea:	21ce      	movs	r1, #206	; 0xce
 8003dec:	4805      	ldr	r0, [pc, #20]	; (8003e04 <HAL_NVIC_EnableIRQ+0x2c>)
 8003dee:	f7fe f9ed 	bl	80021cc <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7ff ff0e 	bl	8003c18 <NVIC_EnableIRQ>
}
 8003dfc:	bf00      	nop
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	08009910 	.word	0x08009910

08003e08 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f7ff ff73 	bl	8003cfc <SysTick_Config>
 8003e16:	4603      	mov	r3, r0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3708      	adds	r7, #8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b04      	cmp	r3, #4
 8003e2c:	d007      	beq.n	8003e3e <HAL_SYSTICK_CLKSourceConfig+0x1e>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d004      	beq.n	8003e3e <HAL_SYSTICK_CLKSourceConfig+0x1e>
 8003e34:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003e38:	480b      	ldr	r0, [pc, #44]	; (8003e68 <HAL_SYSTICK_CLKSourceConfig+0x48>)
 8003e3a:	f7fe f9c7 	bl	80021cc <assert_failed>
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b04      	cmp	r3, #4
 8003e42:	d106      	bne.n	8003e52 <HAL_SYSTICK_CLKSourceConfig+0x32>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8003e44:	4a09      	ldr	r2, [pc, #36]	; (8003e6c <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 8003e46:	4b09      	ldr	r3, [pc, #36]	; (8003e6c <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f043 0304 	orr.w	r3, r3, #4
 8003e4e:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8003e50:	e005      	b.n	8003e5e <HAL_SYSTICK_CLKSourceConfig+0x3e>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8003e52:	4a06      	ldr	r2, [pc, #24]	; (8003e6c <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 8003e54:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f023 0304 	bic.w	r3, r3, #4
 8003e5c:	6013      	str	r3, [r2, #0]
}
 8003e5e:	bf00      	nop
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	08009910 	.word	0x08009910
 8003e6c:	e000e010 	.word	0xe000e010

08003e70 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8003e74:	f000 f802 	bl	8003e7c <HAL_SYSTICK_Callback>
}
 8003e78:	bf00      	nop
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8003e80:	bf00      	nop
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bc80      	pop	{r7}
 8003e86:	4770      	bx	lr

08003e88 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e0e6      	b.n	800406c <HAL_DMA_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a74      	ldr	r2, [pc, #464]	; (8004074 <HAL_DMA_Init+0x1ec>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d021      	beq.n	8003eec <HAL_DMA_Init+0x64>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a72      	ldr	r2, [pc, #456]	; (8004078 <HAL_DMA_Init+0x1f0>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d01c      	beq.n	8003eec <HAL_DMA_Init+0x64>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a71      	ldr	r2, [pc, #452]	; (800407c <HAL_DMA_Init+0x1f4>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d017      	beq.n	8003eec <HAL_DMA_Init+0x64>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a6f      	ldr	r2, [pc, #444]	; (8004080 <HAL_DMA_Init+0x1f8>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d012      	beq.n	8003eec <HAL_DMA_Init+0x64>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a6e      	ldr	r2, [pc, #440]	; (8004084 <HAL_DMA_Init+0x1fc>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d00d      	beq.n	8003eec <HAL_DMA_Init+0x64>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a6c      	ldr	r2, [pc, #432]	; (8004088 <HAL_DMA_Init+0x200>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d008      	beq.n	8003eec <HAL_DMA_Init+0x64>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a6b      	ldr	r2, [pc, #428]	; (800408c <HAL_DMA_Init+0x204>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d003      	beq.n	8003eec <HAL_DMA_Init+0x64>
 8003ee4:	21aa      	movs	r1, #170	; 0xaa
 8003ee6:	486a      	ldr	r0, [pc, #424]	; (8004090 <HAL_DMA_Init+0x208>)
 8003ee8:	f7fe f970 	bl	80021cc <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00c      	beq.n	8003f0e <HAL_DMA_Init+0x86>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	2b10      	cmp	r3, #16
 8003efa:	d008      	beq.n	8003f0e <HAL_DMA_Init+0x86>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f04:	d003      	beq.n	8003f0e <HAL_DMA_Init+0x86>
 8003f06:	21ab      	movs	r1, #171	; 0xab
 8003f08:	4861      	ldr	r0, [pc, #388]	; (8004090 <HAL_DMA_Init+0x208>)
 8003f0a:	f7fe f95f 	bl	80021cc <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	2b40      	cmp	r3, #64	; 0x40
 8003f14:	d007      	beq.n	8003f26 <HAL_DMA_Init+0x9e>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <HAL_DMA_Init+0x9e>
 8003f1e:	21ac      	movs	r1, #172	; 0xac
 8003f20:	485b      	ldr	r0, [pc, #364]	; (8004090 <HAL_DMA_Init+0x208>)
 8003f22:	f7fe f953 	bl	80021cc <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	2b80      	cmp	r3, #128	; 0x80
 8003f2c:	d007      	beq.n	8003f3e <HAL_DMA_Init+0xb6>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <HAL_DMA_Init+0xb6>
 8003f36:	21ad      	movs	r1, #173	; 0xad
 8003f38:	4855      	ldr	r0, [pc, #340]	; (8004090 <HAL_DMA_Init+0x208>)
 8003f3a:	f7fe f947 	bl	80021cc <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00d      	beq.n	8003f62 <HAL_DMA_Init+0xda>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f4e:	d008      	beq.n	8003f62 <HAL_DMA_Init+0xda>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f58:	d003      	beq.n	8003f62 <HAL_DMA_Init+0xda>
 8003f5a:	21ae      	movs	r1, #174	; 0xae
 8003f5c:	484c      	ldr	r0, [pc, #304]	; (8004090 <HAL_DMA_Init+0x208>)
 8003f5e:	f7fe f935 	bl	80021cc <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00d      	beq.n	8003f86 <HAL_DMA_Init+0xfe>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f72:	d008      	beq.n	8003f86 <HAL_DMA_Init+0xfe>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f7c:	d003      	beq.n	8003f86 <HAL_DMA_Init+0xfe>
 8003f7e:	21af      	movs	r1, #175	; 0xaf
 8003f80:	4843      	ldr	r0, [pc, #268]	; (8004090 <HAL_DMA_Init+0x208>)
 8003f82:	f7fe f923 	bl	80021cc <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d007      	beq.n	8003f9e <HAL_DMA_Init+0x116>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	2b20      	cmp	r3, #32
 8003f94:	d003      	beq.n	8003f9e <HAL_DMA_Init+0x116>
 8003f96:	21b0      	movs	r1, #176	; 0xb0
 8003f98:	483d      	ldr	r0, [pc, #244]	; (8004090 <HAL_DMA_Init+0x208>)
 8003f9a:	f7fe f917 	bl	80021cc <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d012      	beq.n	8003fcc <HAL_DMA_Init+0x144>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fae:	d00d      	beq.n	8003fcc <HAL_DMA_Init+0x144>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fb8:	d008      	beq.n	8003fcc <HAL_DMA_Init+0x144>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fc2:	d003      	beq.n	8003fcc <HAL_DMA_Init+0x144>
 8003fc4:	21b1      	movs	r1, #177	; 0xb1
 8003fc6:	4832      	ldr	r0, [pc, #200]	; (8004090 <HAL_DMA_Init+0x208>)
 8003fc8:	f7fe f900 	bl	80021cc <assert_failed>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	4b30      	ldr	r3, [pc, #192]	; (8004094 <HAL_DMA_Init+0x20c>)
 8003fd4:	4413      	add	r3, r2
 8003fd6:	4a30      	ldr	r2, [pc, #192]	; (8004098 <HAL_DMA_Init+0x210>)
 8003fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fdc:	091b      	lsrs	r3, r3, #4
 8003fde:	009a      	lsls	r2, r3, #2
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a2d      	ldr	r2, [pc, #180]	; (800409c <HAL_DMA_Init+0x214>)
 8003fe8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2202      	movs	r2, #2
 8003fee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004000:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004004:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800400e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800401a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004026:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	69db      	ldr	r3, [r3, #28]
 800402c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	4313      	orrs	r3, r2
 8004032:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	601a      	str	r2, [r3, #0]


  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	40020008 	.word	0x40020008
 8004078:	4002001c 	.word	0x4002001c
 800407c:	40020030 	.word	0x40020030
 8004080:	40020044 	.word	0x40020044
 8004084:	40020058 	.word	0x40020058
 8004088:	4002006c 	.word	0x4002006c
 800408c:	40020080 	.word	0x40020080
 8004090:	08009954 	.word	0x08009954
 8004094:	bffdfff8 	.word	0xbffdfff8
 8004098:	cccccccd 	.word	0xcccccccd
 800409c:	40020000 	.word	0x40020000

080040a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
 80040ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040ae:	2300      	movs	r3, #0
 80040b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d003      	beq.n	80040c0 <HAL_DMA_Start_IT+0x20>
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040be:	d304      	bcc.n	80040ca <HAL_DMA_Start_IT+0x2a>
 80040c0:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80040c4:	482c      	ldr	r0, [pc, #176]	; (8004178 <HAL_DMA_Start_IT+0xd8>)
 80040c6:	f7fe f881 	bl	80021cc <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d101      	bne.n	80040d8 <HAL_DMA_Start_IT+0x38>
 80040d4:	2302      	movs	r3, #2
 80040d6:	e04a      	b.n	800416e <HAL_DMA_Start_IT+0xce>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d13a      	bne.n	8004160 <HAL_DMA_Start_IT+0xc0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2202      	movs	r2, #2
 80040ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	6812      	ldr	r2, [r2, #0]
 8004100:	6812      	ldr	r2, [r2, #0]
 8004102:	f022 0201 	bic.w	r2, r2, #1
 8004106:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	68b9      	ldr	r1, [r7, #8]
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 f9ee 	bl	80044f0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004118:	2b00      	cmp	r3, #0
 800411a:	d008      	beq.n	800412e <HAL_DMA_Start_IT+0x8e>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	6812      	ldr	r2, [r2, #0]
 8004124:	6812      	ldr	r2, [r2, #0]
 8004126:	f042 020e 	orr.w	r2, r2, #14
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	e00f      	b.n	800414e <HAL_DMA_Start_IT+0xae>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	6812      	ldr	r2, [r2, #0]
 8004136:	6812      	ldr	r2, [r2, #0]
 8004138:	f022 0204 	bic.w	r2, r2, #4
 800413c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	6812      	ldr	r2, [r2, #0]
 8004146:	6812      	ldr	r2, [r2, #0]
 8004148:	f042 020a 	orr.w	r2, r2, #10
 800414c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	6812      	ldr	r2, [r2, #0]
 8004156:	6812      	ldr	r2, [r2, #0]
 8004158:	f042 0201 	orr.w	r2, r2, #1
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	e005      	b.n	800416c <HAL_DMA_Start_IT+0xcc>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004168:	2302      	movs	r3, #2
 800416a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800416c:	7dfb      	ldrb	r3, [r7, #23]
}
 800416e:	4618      	mov	r0, r3
 8004170:	3718      	adds	r7, #24
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	08009954 	.word	0x08009954

0800417c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004184:	2300      	movs	r3, #0
 8004186:	73fb      	strb	r3, [r7, #15]

  /* Disable DMA IT */
  __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	6812      	ldr	r2, [r2, #0]
 8004190:	6812      	ldr	r2, [r2, #0]
 8004192:	f022 020e 	bic.w	r2, r2, #14
 8004196:	601a      	str	r2, [r3, #0]
    
  /* Disable the channel */
  __HAL_DMA_DISABLE(hdma);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	6812      	ldr	r2, [r2, #0]
 80041a0:	6812      	ldr	r2, [r2, #0]
 80041a2:	f022 0201 	bic.w	r2, r2, #1
 80041a6:	601a      	str	r2, [r3, #0]
    
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80041b0:	2101      	movs	r1, #1
 80041b2:	fa01 f202 	lsl.w	r2, r1, r2
 80041b6:	605a      	str	r2, [r3, #4]

  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bc80      	pop	{r7}
 80041d2:	4770      	bx	lr

080041d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041dc:	2300      	movs	r3, #0
 80041de:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d005      	beq.n	80041f6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2204      	movs	r2, #4
 80041ee:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	73fb      	strb	r3, [r7, #15]
 80041f4:	e057      	b.n	80042a6 <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	6812      	ldr	r2, [r2, #0]
 80041fe:	6812      	ldr	r2, [r2, #0]
 8004200:	f022 020e 	bic.w	r2, r2, #14
 8004204:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	6812      	ldr	r2, [r2, #0]
 800420e:	6812      	ldr	r2, [r2, #0]
 8004210:	f022 0201 	bic.w	r2, r2, #1
 8004214:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004216:	4a26      	ldr	r2, [pc, #152]	; (80042b0 <HAL_DMA_Abort_IT+0xdc>)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4619      	mov	r1, r3
 800421e:	4b25      	ldr	r3, [pc, #148]	; (80042b4 <HAL_DMA_Abort_IT+0xe0>)
 8004220:	4299      	cmp	r1, r3
 8004222:	d02e      	beq.n	8004282 <HAL_DMA_Abort_IT+0xae>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4619      	mov	r1, r3
 800422a:	4b23      	ldr	r3, [pc, #140]	; (80042b8 <HAL_DMA_Abort_IT+0xe4>)
 800422c:	4299      	cmp	r1, r3
 800422e:	d026      	beq.n	800427e <HAL_DMA_Abort_IT+0xaa>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4619      	mov	r1, r3
 8004236:	4b21      	ldr	r3, [pc, #132]	; (80042bc <HAL_DMA_Abort_IT+0xe8>)
 8004238:	4299      	cmp	r1, r3
 800423a:	d01d      	beq.n	8004278 <HAL_DMA_Abort_IT+0xa4>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4619      	mov	r1, r3
 8004242:	4b1f      	ldr	r3, [pc, #124]	; (80042c0 <HAL_DMA_Abort_IT+0xec>)
 8004244:	4299      	cmp	r1, r3
 8004246:	d014      	beq.n	8004272 <HAL_DMA_Abort_IT+0x9e>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4619      	mov	r1, r3
 800424e:	4b1d      	ldr	r3, [pc, #116]	; (80042c4 <HAL_DMA_Abort_IT+0xf0>)
 8004250:	4299      	cmp	r1, r3
 8004252:	d00b      	beq.n	800426c <HAL_DMA_Abort_IT+0x98>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4619      	mov	r1, r3
 800425a:	4b1b      	ldr	r3, [pc, #108]	; (80042c8 <HAL_DMA_Abort_IT+0xf4>)
 800425c:	4299      	cmp	r1, r3
 800425e:	d102      	bne.n	8004266 <HAL_DMA_Abort_IT+0x92>
 8004260:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004264:	e00e      	b.n	8004284 <HAL_DMA_Abort_IT+0xb0>
 8004266:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800426a:	e00b      	b.n	8004284 <HAL_DMA_Abort_IT+0xb0>
 800426c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004270:	e008      	b.n	8004284 <HAL_DMA_Abort_IT+0xb0>
 8004272:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004276:	e005      	b.n	8004284 <HAL_DMA_Abort_IT+0xb0>
 8004278:	f44f 7380 	mov.w	r3, #256	; 0x100
 800427c:	e002      	b.n	8004284 <HAL_DMA_Abort_IT+0xb0>
 800427e:	2310      	movs	r3, #16
 8004280:	e000      	b.n	8004284 <HAL_DMA_Abort_IT+0xb0>
 8004282:	2301      	movs	r3, #1
 8004284:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	4798      	blx	r3
    } 
  }
  return status;
 80042a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	40020000 	.word	0x40020000
 80042b4:	40020008 	.word	0x40020008
 80042b8:	4002001c 	.word	0x4002001c
 80042bc:	40020030 	.word	0x40020030
 80042c0:	40020044 	.word	0x40020044
 80042c4:	40020058 	.word	0x40020058
 80042c8:	4002006c 	.word	0x4002006c

080042cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e8:	2204      	movs	r2, #4
 80042ea:	409a      	lsls	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4013      	ands	r3, r2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d055      	beq.n	80043a0 <HAL_DMA_IRQHandler+0xd4>
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	f003 0304 	and.w	r3, r3, #4
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d050      	beq.n	80043a0 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0320 	and.w	r3, r3, #32
 8004308:	2b00      	cmp	r3, #0
 800430a:	d107      	bne.n	800431c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6812      	ldr	r2, [r2, #0]
 8004314:	6812      	ldr	r2, [r2, #0]
 8004316:	f022 0204 	bic.w	r2, r2, #4
 800431a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800431c:	4a6d      	ldr	r2, [pc, #436]	; (80044d4 <HAL_DMA_IRQHandler+0x208>)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4619      	mov	r1, r3
 8004324:	4b6c      	ldr	r3, [pc, #432]	; (80044d8 <HAL_DMA_IRQHandler+0x20c>)
 8004326:	4299      	cmp	r1, r3
 8004328:	d02e      	beq.n	8004388 <HAL_DMA_IRQHandler+0xbc>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4619      	mov	r1, r3
 8004330:	4b6a      	ldr	r3, [pc, #424]	; (80044dc <HAL_DMA_IRQHandler+0x210>)
 8004332:	4299      	cmp	r1, r3
 8004334:	d026      	beq.n	8004384 <HAL_DMA_IRQHandler+0xb8>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4619      	mov	r1, r3
 800433c:	4b68      	ldr	r3, [pc, #416]	; (80044e0 <HAL_DMA_IRQHandler+0x214>)
 800433e:	4299      	cmp	r1, r3
 8004340:	d01d      	beq.n	800437e <HAL_DMA_IRQHandler+0xb2>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4619      	mov	r1, r3
 8004348:	4b66      	ldr	r3, [pc, #408]	; (80044e4 <HAL_DMA_IRQHandler+0x218>)
 800434a:	4299      	cmp	r1, r3
 800434c:	d014      	beq.n	8004378 <HAL_DMA_IRQHandler+0xac>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4619      	mov	r1, r3
 8004354:	4b64      	ldr	r3, [pc, #400]	; (80044e8 <HAL_DMA_IRQHandler+0x21c>)
 8004356:	4299      	cmp	r1, r3
 8004358:	d00b      	beq.n	8004372 <HAL_DMA_IRQHandler+0xa6>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4619      	mov	r1, r3
 8004360:	4b62      	ldr	r3, [pc, #392]	; (80044ec <HAL_DMA_IRQHandler+0x220>)
 8004362:	4299      	cmp	r1, r3
 8004364:	d102      	bne.n	800436c <HAL_DMA_IRQHandler+0xa0>
 8004366:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800436a:	e00e      	b.n	800438a <HAL_DMA_IRQHandler+0xbe>
 800436c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004370:	e00b      	b.n	800438a <HAL_DMA_IRQHandler+0xbe>
 8004372:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004376:	e008      	b.n	800438a <HAL_DMA_IRQHandler+0xbe>
 8004378:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800437c:	e005      	b.n	800438a <HAL_DMA_IRQHandler+0xbe>
 800437e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004382:	e002      	b.n	800438a <HAL_DMA_IRQHandler+0xbe>
 8004384:	2340      	movs	r3, #64	; 0x40
 8004386:	e000      	b.n	800438a <HAL_DMA_IRQHandler+0xbe>
 8004388:	2304      	movs	r3, #4
 800438a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 809a 	beq.w	80044ca <HAL_DMA_IRQHandler+0x1fe>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800439e:	e094      	b.n	80044ca <HAL_DMA_IRQHandler+0x1fe>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a4:	2202      	movs	r2, #2
 80043a6:	409a      	lsls	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4013      	ands	r3, r2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d05c      	beq.n	800446a <HAL_DMA_IRQHandler+0x19e>
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d057      	beq.n	800446a <HAL_DMA_IRQHandler+0x19e>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0320 	and.w	r3, r3, #32
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10b      	bne.n	80043e0 <HAL_DMA_IRQHandler+0x114>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6812      	ldr	r2, [r2, #0]
 80043d0:	6812      	ldr	r2, [r2, #0]
 80043d2:	f022 020a 	bic.w	r2, r2, #10
 80043d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80043e0:	4a3c      	ldr	r2, [pc, #240]	; (80044d4 <HAL_DMA_IRQHandler+0x208>)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4619      	mov	r1, r3
 80043e8:	4b3b      	ldr	r3, [pc, #236]	; (80044d8 <HAL_DMA_IRQHandler+0x20c>)
 80043ea:	4299      	cmp	r1, r3
 80043ec:	d02e      	beq.n	800444c <HAL_DMA_IRQHandler+0x180>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4619      	mov	r1, r3
 80043f4:	4b39      	ldr	r3, [pc, #228]	; (80044dc <HAL_DMA_IRQHandler+0x210>)
 80043f6:	4299      	cmp	r1, r3
 80043f8:	d026      	beq.n	8004448 <HAL_DMA_IRQHandler+0x17c>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4619      	mov	r1, r3
 8004400:	4b37      	ldr	r3, [pc, #220]	; (80044e0 <HAL_DMA_IRQHandler+0x214>)
 8004402:	4299      	cmp	r1, r3
 8004404:	d01d      	beq.n	8004442 <HAL_DMA_IRQHandler+0x176>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4619      	mov	r1, r3
 800440c:	4b35      	ldr	r3, [pc, #212]	; (80044e4 <HAL_DMA_IRQHandler+0x218>)
 800440e:	4299      	cmp	r1, r3
 8004410:	d014      	beq.n	800443c <HAL_DMA_IRQHandler+0x170>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4619      	mov	r1, r3
 8004418:	4b33      	ldr	r3, [pc, #204]	; (80044e8 <HAL_DMA_IRQHandler+0x21c>)
 800441a:	4299      	cmp	r1, r3
 800441c:	d00b      	beq.n	8004436 <HAL_DMA_IRQHandler+0x16a>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4619      	mov	r1, r3
 8004424:	4b31      	ldr	r3, [pc, #196]	; (80044ec <HAL_DMA_IRQHandler+0x220>)
 8004426:	4299      	cmp	r1, r3
 8004428:	d102      	bne.n	8004430 <HAL_DMA_IRQHandler+0x164>
 800442a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800442e:	e00e      	b.n	800444e <HAL_DMA_IRQHandler+0x182>
 8004430:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004434:	e00b      	b.n	800444e <HAL_DMA_IRQHandler+0x182>
 8004436:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800443a:	e008      	b.n	800444e <HAL_DMA_IRQHandler+0x182>
 800443c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004440:	e005      	b.n	800444e <HAL_DMA_IRQHandler+0x182>
 8004442:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004446:	e002      	b.n	800444e <HAL_DMA_IRQHandler+0x182>
 8004448:	2320      	movs	r3, #32
 800444a:	e000      	b.n	800444e <HAL_DMA_IRQHandler+0x182>
 800444c:	2302      	movs	r3, #2
 800444e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445c:	2b00      	cmp	r3, #0
 800445e:	d034      	beq.n	80044ca <HAL_DMA_IRQHandler+0x1fe>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004468:	e02f      	b.n	80044ca <HAL_DMA_IRQHandler+0x1fe>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	2208      	movs	r2, #8
 8004470:	409a      	lsls	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	4013      	ands	r3, r2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d028      	beq.n	80044cc <HAL_DMA_IRQHandler+0x200>
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	f003 0308 	and.w	r3, r3, #8
 8004480:	2b00      	cmp	r3, #0
 8004482:	d023      	beq.n	80044cc <HAL_DMA_IRQHandler+0x200>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	6812      	ldr	r2, [r2, #0]
 800448c:	6812      	ldr	r2, [r2, #0]
 800448e:	f022 020e 	bic.w	r2, r2, #14
 8004492:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800449c:	2101      	movs	r1, #1
 800449e:	fa01 f202 	lsl.w	r2, r1, r2
 80044a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d004      	beq.n	80044cc <HAL_DMA_IRQHandler+0x200>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	4798      	blx	r3
    }
  }
  return;
 80044ca:	bf00      	nop
 80044cc:	bf00      	nop
}
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	40020000 	.word	0x40020000
 80044d8:	40020008 	.word	0x40020008
 80044dc:	4002001c 	.word	0x4002001c
 80044e0:	40020030 	.word	0x40020030
 80044e4:	40020044 	.word	0x40020044
 80044e8:	40020058 	.word	0x40020058
 80044ec:	4002006c 	.word	0x4002006c

080044f0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
 80044fc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004506:	2101      	movs	r1, #1
 8004508:	fa01 f202 	lsl.w	r2, r1, r2
 800450c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	2b10      	cmp	r3, #16
 800451c:	d108      	bne.n	8004530 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800452e:	e007      	b.n	8004540 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	60da      	str	r2, [r3, #12]
}
 8004540:	bf00      	nop
 8004542:	3714      	adds	r7, #20
 8004544:	46bd      	mov	sp, r7
 8004546:	bc80      	pop	{r7}
 8004548:	4770      	bx	lr
	...

0800454c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b08a      	sub	sp, #40	; 0x28
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004556:	2300      	movs	r3, #0
 8004558:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 800455a:	2300      	movs	r3, #0
 800455c:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 800455e:	2300      	movs	r3, #0
 8004560:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8004562:	2300      	movs	r3, #0
 8004564:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8004566:	2300      	movs	r3, #0
 8004568:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a98      	ldr	r2, [pc, #608]	; (80047d0 <HAL_GPIO_Init+0x284>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d013      	beq.n	800459a <HAL_GPIO_Init+0x4e>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a97      	ldr	r2, [pc, #604]	; (80047d4 <HAL_GPIO_Init+0x288>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d00f      	beq.n	800459a <HAL_GPIO_Init+0x4e>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a96      	ldr	r2, [pc, #600]	; (80047d8 <HAL_GPIO_Init+0x28c>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d00b      	beq.n	800459a <HAL_GPIO_Init+0x4e>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a95      	ldr	r2, [pc, #596]	; (80047dc <HAL_GPIO_Init+0x290>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d007      	beq.n	800459a <HAL_GPIO_Init+0x4e>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a94      	ldr	r2, [pc, #592]	; (80047e0 <HAL_GPIO_Init+0x294>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d003      	beq.n	800459a <HAL_GPIO_Init+0x4e>
 8004592:	21cd      	movs	r1, #205	; 0xcd
 8004594:	4893      	ldr	r0, [pc, #588]	; (80047e4 <HAL_GPIO_Init+0x298>)
 8004596:	f7fd fe19 	bl	80021cc <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	b29b      	uxth	r3, r3
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d005      	beq.n	80045b0 <HAL_GPIO_Init+0x64>
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	0c1b      	lsrs	r3, r3, #16
 80045aa:	041b      	lsls	r3, r3, #16
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d003      	beq.n	80045b8 <HAL_GPIO_Init+0x6c>
 80045b0:	21ce      	movs	r1, #206	; 0xce
 80045b2:	488c      	ldr	r0, [pc, #560]	; (80047e4 <HAL_GPIO_Init+0x298>)
 80045b4:	f7fd fe0a 	bl	80021cc <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d035      	beq.n	800462c <HAL_GPIO_Init+0xe0>
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d031      	beq.n	800462c <HAL_GPIO_Init+0xe0>
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	2b11      	cmp	r3, #17
 80045ce:	d02d      	beq.n	800462c <HAL_GPIO_Init+0xe0>
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d029      	beq.n	800462c <HAL_GPIO_Init+0xe0>
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	2b12      	cmp	r3, #18
 80045de:	d025      	beq.n	800462c <HAL_GPIO_Init+0xe0>
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	4a80      	ldr	r2, [pc, #512]	; (80047e8 <HAL_GPIO_Init+0x29c>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d020      	beq.n	800462c <HAL_GPIO_Init+0xe0>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	4a7f      	ldr	r2, [pc, #508]	; (80047ec <HAL_GPIO_Init+0x2a0>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d01b      	beq.n	800462c <HAL_GPIO_Init+0xe0>
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	4a7d      	ldr	r2, [pc, #500]	; (80047f0 <HAL_GPIO_Init+0x2a4>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d016      	beq.n	800462c <HAL_GPIO_Init+0xe0>
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	4a7c      	ldr	r2, [pc, #496]	; (80047f4 <HAL_GPIO_Init+0x2a8>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d011      	beq.n	800462c <HAL_GPIO_Init+0xe0>
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	4a7a      	ldr	r2, [pc, #488]	; (80047f8 <HAL_GPIO_Init+0x2ac>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d00c      	beq.n	800462c <HAL_GPIO_Init+0xe0>
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	4a79      	ldr	r2, [pc, #484]	; (80047fc <HAL_GPIO_Init+0x2b0>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d007      	beq.n	800462c <HAL_GPIO_Init+0xe0>
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	2b03      	cmp	r3, #3
 8004622:	d003      	beq.n	800462c <HAL_GPIO_Init+0xe0>
 8004624:	21cf      	movs	r1, #207	; 0xcf
 8004626:	486f      	ldr	r0, [pc, #444]	; (80047e4 <HAL_GPIO_Init+0x298>)
 8004628:	f7fd fdd0 	bl	80021cc <assert_failed>

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800462c:	2300      	movs	r3, #0
 800462e:	627b      	str	r3, [r7, #36]	; 0x24
 8004630:	e1aa      	b.n	8004988 <HAL_GPIO_Init+0x43c>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8004632:	2201      	movs	r2, #1
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	fa02 f303 	lsl.w	r3, r2, r3
 800463a:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	4013      	ands	r3, r2
 8004644:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	429a      	cmp	r2, r3
 800464c:	f040 8199 	bne.w	8004982 <HAL_GPIO_Init+0x436>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a5f      	ldr	r2, [pc, #380]	; (80047d0 <HAL_GPIO_Init+0x284>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d013      	beq.n	8004680 <HAL_GPIO_Init+0x134>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a5e      	ldr	r2, [pc, #376]	; (80047d4 <HAL_GPIO_Init+0x288>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d00f      	beq.n	8004680 <HAL_GPIO_Init+0x134>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a5d      	ldr	r2, [pc, #372]	; (80047d8 <HAL_GPIO_Init+0x28c>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d00b      	beq.n	8004680 <HAL_GPIO_Init+0x134>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a5c      	ldr	r2, [pc, #368]	; (80047dc <HAL_GPIO_Init+0x290>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d007      	beq.n	8004680 <HAL_GPIO_Init+0x134>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a5b      	ldr	r2, [pc, #364]	; (80047e0 <HAL_GPIO_Init+0x294>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d003      	beq.n	8004680 <HAL_GPIO_Init+0x134>
 8004678:	21dd      	movs	r1, #221	; 0xdd
 800467a:	485a      	ldr	r0, [pc, #360]	; (80047e4 <HAL_GPIO_Init+0x298>)
 800467c:	f7fd fda6 	bl	80021cc <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	2b12      	cmp	r3, #18
 8004686:	d065      	beq.n	8004754 <HAL_GPIO_Init+0x208>
 8004688:	2b12      	cmp	r3, #18
 800468a:	d80e      	bhi.n	80046aa <HAL_GPIO_Init+0x15e>
 800468c:	2b02      	cmp	r3, #2
 800468e:	d04c      	beq.n	800472a <HAL_GPIO_Init+0x1de>
 8004690:	2b02      	cmp	r3, #2
 8004692:	d804      	bhi.n	800469e <HAL_GPIO_Init+0x152>
 8004694:	2b00      	cmp	r3, #0
 8004696:	d072      	beq.n	800477e <HAL_GPIO_Init+0x232>
 8004698:	2b01      	cmp	r3, #1
 800469a:	d01d      	beq.n	80046d8 <HAL_GPIO_Init+0x18c>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800469c:	e0b3      	b.n	8004806 <HAL_GPIO_Init+0x2ba>
      switch (GPIO_Init->Mode)
 800469e:	2b03      	cmp	r3, #3
 80046a0:	f000 80ae 	beq.w	8004800 <HAL_GPIO_Init+0x2b4>
 80046a4:	2b11      	cmp	r3, #17
 80046a6:	d02b      	beq.n	8004700 <HAL_GPIO_Init+0x1b4>
          break;
 80046a8:	e0ad      	b.n	8004806 <HAL_GPIO_Init+0x2ba>
      switch (GPIO_Init->Mode)
 80046aa:	4a50      	ldr	r2, [pc, #320]	; (80047ec <HAL_GPIO_Init+0x2a0>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d066      	beq.n	800477e <HAL_GPIO_Init+0x232>
 80046b0:	4a4e      	ldr	r2, [pc, #312]	; (80047ec <HAL_GPIO_Init+0x2a0>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d806      	bhi.n	80046c4 <HAL_GPIO_Init+0x178>
 80046b6:	4a4c      	ldr	r2, [pc, #304]	; (80047e8 <HAL_GPIO_Init+0x29c>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d060      	beq.n	800477e <HAL_GPIO_Init+0x232>
 80046bc:	4a4d      	ldr	r2, [pc, #308]	; (80047f4 <HAL_GPIO_Init+0x2a8>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d05d      	beq.n	800477e <HAL_GPIO_Init+0x232>
          break;
 80046c2:	e0a0      	b.n	8004806 <HAL_GPIO_Init+0x2ba>
      switch (GPIO_Init->Mode)
 80046c4:	4a4a      	ldr	r2, [pc, #296]	; (80047f0 <HAL_GPIO_Init+0x2a4>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d059      	beq.n	800477e <HAL_GPIO_Init+0x232>
 80046ca:	4a4c      	ldr	r2, [pc, #304]	; (80047fc <HAL_GPIO_Init+0x2b0>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d056      	beq.n	800477e <HAL_GPIO_Init+0x232>
 80046d0:	4a49      	ldr	r2, [pc, #292]	; (80047f8 <HAL_GPIO_Init+0x2ac>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d053      	beq.n	800477e <HAL_GPIO_Init+0x232>
          break;
 80046d6:	e096      	b.n	8004806 <HAL_GPIO_Init+0x2ba>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d00b      	beq.n	80046f8 <HAL_GPIO_Init+0x1ac>
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d007      	beq.n	80046f8 <HAL_GPIO_Init+0x1ac>
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	2b03      	cmp	r3, #3
 80046ee:	d003      	beq.n	80046f8 <HAL_GPIO_Init+0x1ac>
 80046f0:	21e5      	movs	r1, #229	; 0xe5
 80046f2:	483c      	ldr	r0, [pc, #240]	; (80047e4 <HAL_GPIO_Init+0x298>)
 80046f4:	f7fd fd6a 	bl	80021cc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	623b      	str	r3, [r7, #32]
          break;
 80046fe:	e082      	b.n	8004806 <HAL_GPIO_Init+0x2ba>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	2b02      	cmp	r3, #2
 8004706:	d00b      	beq.n	8004720 <HAL_GPIO_Init+0x1d4>
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d007      	beq.n	8004720 <HAL_GPIO_Init+0x1d4>
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	2b03      	cmp	r3, #3
 8004716:	d003      	beq.n	8004720 <HAL_GPIO_Init+0x1d4>
 8004718:	21ec      	movs	r1, #236	; 0xec
 800471a:	4832      	ldr	r0, [pc, #200]	; (80047e4 <HAL_GPIO_Init+0x298>)
 800471c:	f7fd fd56 	bl	80021cc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	3304      	adds	r3, #4
 8004726:	623b      	str	r3, [r7, #32]
          break;
 8004728:	e06d      	b.n	8004806 <HAL_GPIO_Init+0x2ba>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	2b02      	cmp	r3, #2
 8004730:	d00b      	beq.n	800474a <HAL_GPIO_Init+0x1fe>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d007      	beq.n	800474a <HAL_GPIO_Init+0x1fe>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	2b03      	cmp	r3, #3
 8004740:	d003      	beq.n	800474a <HAL_GPIO_Init+0x1fe>
 8004742:	21f3      	movs	r1, #243	; 0xf3
 8004744:	4827      	ldr	r0, [pc, #156]	; (80047e4 <HAL_GPIO_Init+0x298>)
 8004746:	f7fd fd41 	bl	80021cc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	3308      	adds	r3, #8
 8004750:	623b      	str	r3, [r7, #32]
          break;
 8004752:	e058      	b.n	8004806 <HAL_GPIO_Init+0x2ba>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	2b02      	cmp	r3, #2
 800475a:	d00b      	beq.n	8004774 <HAL_GPIO_Init+0x228>
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d007      	beq.n	8004774 <HAL_GPIO_Init+0x228>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	2b03      	cmp	r3, #3
 800476a:	d003      	beq.n	8004774 <HAL_GPIO_Init+0x228>
 800476c:	21fa      	movs	r1, #250	; 0xfa
 800476e:	481d      	ldr	r0, [pc, #116]	; (80047e4 <HAL_GPIO_Init+0x298>)
 8004770:	f7fd fd2c 	bl	80021cc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	330c      	adds	r3, #12
 800477a:	623b      	str	r3, [r7, #32]
          break;
 800477c:	e043      	b.n	8004806 <HAL_GPIO_Init+0x2ba>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00c      	beq.n	80047a0 <HAL_GPIO_Init+0x254>
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d008      	beq.n	80047a0 <HAL_GPIO_Init+0x254>
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	2b02      	cmp	r3, #2
 8004794:	d004      	beq.n	80047a0 <HAL_GPIO_Init+0x254>
 8004796:	f240 1107 	movw	r1, #263	; 0x107
 800479a:	4812      	ldr	r0, [pc, #72]	; (80047e4 <HAL_GPIO_Init+0x298>)
 800479c:	f7fd fd16 	bl	80021cc <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d102      	bne.n	80047ae <HAL_GPIO_Init+0x262>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80047a8:	2304      	movs	r3, #4
 80047aa:	623b      	str	r3, [r7, #32]
          break;
 80047ac:	e02b      	b.n	8004806 <HAL_GPIO_Init+0x2ba>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d105      	bne.n	80047c2 <HAL_GPIO_Init+0x276>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80047b6:	2308      	movs	r3, #8
 80047b8:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	69fa      	ldr	r2, [r7, #28]
 80047be:	611a      	str	r2, [r3, #16]
          break;
 80047c0:	e021      	b.n	8004806 <HAL_GPIO_Init+0x2ba>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80047c2:	2308      	movs	r3, #8
 80047c4:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	69fa      	ldr	r2, [r7, #28]
 80047ca:	615a      	str	r2, [r3, #20]
          break;
 80047cc:	e01b      	b.n	8004806 <HAL_GPIO_Init+0x2ba>
 80047ce:	bf00      	nop
 80047d0:	40010800 	.word	0x40010800
 80047d4:	40010c00 	.word	0x40010c00
 80047d8:	40011000 	.word	0x40011000
 80047dc:	40011400 	.word	0x40011400
 80047e0:	40011800 	.word	0x40011800
 80047e4:	08009994 	.word	0x08009994
 80047e8:	10110000 	.word	0x10110000
 80047ec:	10210000 	.word	0x10210000
 80047f0:	10310000 	.word	0x10310000
 80047f4:	10120000 	.word	0x10120000
 80047f8:	10220000 	.word	0x10220000
 80047fc:	10320000 	.word	0x10320000
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004800:	2300      	movs	r3, #0
 8004802:	623b      	str	r3, [r7, #32]
          break;
 8004804:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	2bff      	cmp	r3, #255	; 0xff
 800480a:	d801      	bhi.n	8004810 <HAL_GPIO_Init+0x2c4>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	e001      	b.n	8004814 <HAL_GPIO_Init+0x2c8>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	3304      	adds	r3, #4
 8004814:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	2bff      	cmp	r3, #255	; 0xff
 800481a:	d802      	bhi.n	8004822 <HAL_GPIO_Init+0x2d6>
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	e002      	b.n	8004828 <HAL_GPIO_Init+0x2dc>
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	3b08      	subs	r3, #8
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	210f      	movs	r1, #15
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	fa01 f303 	lsl.w	r3, r1, r3
 8004836:	43db      	mvns	r3, r3
 8004838:	401a      	ands	r2, r3
 800483a:	6a39      	ldr	r1, [r7, #32]
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	fa01 f303 	lsl.w	r3, r1, r3
 8004842:	431a      	orrs	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 8096 	beq.w	8004982 <HAL_GPIO_Init+0x436>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004856:	4a50      	ldr	r2, [pc, #320]	; (8004998 <HAL_GPIO_Init+0x44c>)
 8004858:	4b4f      	ldr	r3, [pc, #316]	; (8004998 <HAL_GPIO_Init+0x44c>)
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	f043 0301 	orr.w	r3, r3, #1
 8004860:	6193      	str	r3, [r2, #24]
 8004862:	4b4d      	ldr	r3, [pc, #308]	; (8004998 <HAL_GPIO_Init+0x44c>)
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	60bb      	str	r3, [r7, #8]
 800486c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 800486e:	4a4b      	ldr	r2, [pc, #300]	; (800499c <HAL_GPIO_Init+0x450>)
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	089b      	lsrs	r3, r3, #2
 8004874:	3302      	adds	r3, #2
 8004876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800487a:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	f003 0303 	and.w	r3, r3, #3
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	220f      	movs	r2, #15
 8004886:	fa02 f303 	lsl.w	r3, r2, r3
 800488a:	43db      	mvns	r3, r3
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	4013      	ands	r3, r2
 8004890:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a42      	ldr	r2, [pc, #264]	; (80049a0 <HAL_GPIO_Init+0x454>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d013      	beq.n	80048c2 <HAL_GPIO_Init+0x376>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a41      	ldr	r2, [pc, #260]	; (80049a4 <HAL_GPIO_Init+0x458>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d00d      	beq.n	80048be <HAL_GPIO_Init+0x372>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a40      	ldr	r2, [pc, #256]	; (80049a8 <HAL_GPIO_Init+0x45c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d007      	beq.n	80048ba <HAL_GPIO_Init+0x36e>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a3f      	ldr	r2, [pc, #252]	; (80049ac <HAL_GPIO_Init+0x460>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d101      	bne.n	80048b6 <HAL_GPIO_Init+0x36a>
 80048b2:	2303      	movs	r3, #3
 80048b4:	e006      	b.n	80048c4 <HAL_GPIO_Init+0x378>
 80048b6:	2304      	movs	r3, #4
 80048b8:	e004      	b.n	80048c4 <HAL_GPIO_Init+0x378>
 80048ba:	2302      	movs	r3, #2
 80048bc:	e002      	b.n	80048c4 <HAL_GPIO_Init+0x378>
 80048be:	2301      	movs	r3, #1
 80048c0:	e000      	b.n	80048c4 <HAL_GPIO_Init+0x378>
 80048c2:	2300      	movs	r3, #0
 80048c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048c6:	f002 0203 	and.w	r2, r2, #3
 80048ca:	0092      	lsls	r2, r2, #2
 80048cc:	4093      	lsls	r3, r2
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80048d4:	4931      	ldr	r1, [pc, #196]	; (800499c <HAL_GPIO_Init+0x450>)
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	089b      	lsrs	r3, r3, #2
 80048da:	3302      	adds	r3, #2
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d006      	beq.n	80048fc <HAL_GPIO_Init+0x3b0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80048ee:	4930      	ldr	r1, [pc, #192]	; (80049b0 <HAL_GPIO_Init+0x464>)
 80048f0:	4b2f      	ldr	r3, [pc, #188]	; (80049b0 <HAL_GPIO_Init+0x464>)
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	600b      	str	r3, [r1, #0]
 80048fa:	e006      	b.n	800490a <HAL_GPIO_Init+0x3be>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80048fc:	492c      	ldr	r1, [pc, #176]	; (80049b0 <HAL_GPIO_Init+0x464>)
 80048fe:	4b2c      	ldr	r3, [pc, #176]	; (80049b0 <HAL_GPIO_Init+0x464>)
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	43db      	mvns	r3, r3
 8004906:	4013      	ands	r3, r2
 8004908:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d006      	beq.n	8004924 <HAL_GPIO_Init+0x3d8>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004916:	4926      	ldr	r1, [pc, #152]	; (80049b0 <HAL_GPIO_Init+0x464>)
 8004918:	4b25      	ldr	r3, [pc, #148]	; (80049b0 <HAL_GPIO_Init+0x464>)
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	4313      	orrs	r3, r2
 8004920:	604b      	str	r3, [r1, #4]
 8004922:	e006      	b.n	8004932 <HAL_GPIO_Init+0x3e6>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004924:	4922      	ldr	r1, [pc, #136]	; (80049b0 <HAL_GPIO_Init+0x464>)
 8004926:	4b22      	ldr	r3, [pc, #136]	; (80049b0 <HAL_GPIO_Init+0x464>)
 8004928:	685a      	ldr	r2, [r3, #4]
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	43db      	mvns	r3, r3
 800492e:	4013      	ands	r3, r2
 8004930:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d006      	beq.n	800494c <HAL_GPIO_Init+0x400>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800493e:	491c      	ldr	r1, [pc, #112]	; (80049b0 <HAL_GPIO_Init+0x464>)
 8004940:	4b1b      	ldr	r3, [pc, #108]	; (80049b0 <HAL_GPIO_Init+0x464>)
 8004942:	689a      	ldr	r2, [r3, #8]
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	4313      	orrs	r3, r2
 8004948:	608b      	str	r3, [r1, #8]
 800494a:	e006      	b.n	800495a <HAL_GPIO_Init+0x40e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800494c:	4918      	ldr	r1, [pc, #96]	; (80049b0 <HAL_GPIO_Init+0x464>)
 800494e:	4b18      	ldr	r3, [pc, #96]	; (80049b0 <HAL_GPIO_Init+0x464>)
 8004950:	689a      	ldr	r2, [r3, #8]
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	43db      	mvns	r3, r3
 8004956:	4013      	ands	r3, r2
 8004958:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d006      	beq.n	8004974 <HAL_GPIO_Init+0x428>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004966:	4912      	ldr	r1, [pc, #72]	; (80049b0 <HAL_GPIO_Init+0x464>)
 8004968:	4b11      	ldr	r3, [pc, #68]	; (80049b0 <HAL_GPIO_Init+0x464>)
 800496a:	68da      	ldr	r2, [r3, #12]
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	4313      	orrs	r3, r2
 8004970:	60cb      	str	r3, [r1, #12]
 8004972:	e006      	b.n	8004982 <HAL_GPIO_Init+0x436>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004974:	490e      	ldr	r1, [pc, #56]	; (80049b0 <HAL_GPIO_Init+0x464>)
 8004976:	4b0e      	ldr	r3, [pc, #56]	; (80049b0 <HAL_GPIO_Init+0x464>)
 8004978:	68da      	ldr	r2, [r3, #12]
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	43db      	mvns	r3, r3
 800497e:	4013      	ands	r3, r2
 8004980:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8004982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004984:	3301      	adds	r3, #1
 8004986:	627b      	str	r3, [r7, #36]	; 0x24
 8004988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498a:	2b0f      	cmp	r3, #15
 800498c:	f67f ae51 	bls.w	8004632 <HAL_GPIO_Init+0xe6>
        }
      }
    }
  }
}
 8004990:	bf00      	nop
 8004992:	3728      	adds	r7, #40	; 0x28
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	40021000 	.word	0x40021000
 800499c:	40010000 	.word	0x40010000
 80049a0:	40010800 	.word	0x40010800
 80049a4:	40010c00 	.word	0x40010c00
 80049a8:	40011000 	.word	0x40011000
 80049ac:	40011400 	.word	0x40011400
 80049b0:	40010400 	.word	0x40010400

080049b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	460b      	mov	r3, r1
 80049be:	807b      	strh	r3, [r7, #2]
 80049c0:	4613      	mov	r3, r2
 80049c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80049c4:	887b      	ldrh	r3, [r7, #2]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d004      	beq.n	80049d4 <HAL_GPIO_WritePin+0x20>
 80049ca:	887b      	ldrh	r3, [r7, #2]
 80049cc:	0c1b      	lsrs	r3, r3, #16
 80049ce:	041b      	lsls	r3, r3, #16
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d004      	beq.n	80049de <HAL_GPIO_WritePin+0x2a>
 80049d4:	f240 11e3 	movw	r1, #483	; 0x1e3
 80049d8:	480e      	ldr	r0, [pc, #56]	; (8004a14 <HAL_GPIO_WritePin+0x60>)
 80049da:	f7fd fbf7 	bl	80021cc <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80049de:	787b      	ldrb	r3, [r7, #1]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d007      	beq.n	80049f4 <HAL_GPIO_WritePin+0x40>
 80049e4:	787b      	ldrb	r3, [r7, #1]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d004      	beq.n	80049f4 <HAL_GPIO_WritePin+0x40>
 80049ea:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 80049ee:	4809      	ldr	r0, [pc, #36]	; (8004a14 <HAL_GPIO_WritePin+0x60>)
 80049f0:	f7fd fbec 	bl	80021cc <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80049f4:	787b      	ldrb	r3, [r7, #1]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049fa:	887a      	ldrh	r2, [r7, #2]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a00:	e003      	b.n	8004a0a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a02:	887b      	ldrh	r3, [r7, #2]
 8004a04:	041a      	lsls	r2, r3, #16
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	611a      	str	r2, [r3, #16]
}
 8004a0a:	bf00      	nop
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	08009994 	.word	0x08009994

08004a18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	4603      	mov	r3, r0
 8004a20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004a22:	4b08      	ldr	r3, [pc, #32]	; (8004a44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a24:	695a      	ldr	r2, [r3, #20]
 8004a26:	88fb      	ldrh	r3, [r7, #6]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d006      	beq.n	8004a3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a2e:	4a05      	ldr	r2, [pc, #20]	; (8004a44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a30:	88fb      	ldrh	r3, [r7, #6]
 8004a32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a34:	88fb      	ldrh	r3, [r7, #6]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7fd fb3a 	bl	80020b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a3c:	bf00      	nop
 8004a3e:	3708      	adds	r7, #8
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	40010400 	.word	0x40010400

08004a48 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	460b      	mov	r3, r1
 8004a52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  /* No check on Regulator because parameter not used in SLEEP mode */
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));
 8004a54:	78fb      	ldrb	r3, [r7, #3]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d007      	beq.n	8004a6a <HAL_PWR_EnterSLEEPMode+0x22>
 8004a5a:	78fb      	ldrb	r3, [r7, #3]
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d004      	beq.n	8004a6a <HAL_PWR_EnterSLEEPMode+0x22>
 8004a60:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8004a64:	480a      	ldr	r0, [pc, #40]	; (8004a90 <HAL_PWR_EnterSLEEPMode+0x48>)
 8004a66:	f7fd fbb1 	bl	80021cc <assert_failed>

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004a6a:	4a0a      	ldr	r2, [pc, #40]	; (8004a94 <HAL_PWR_EnterSLEEPMode+0x4c>)
 8004a6c:	4b09      	ldr	r3, [pc, #36]	; (8004a94 <HAL_PWR_EnterSLEEPMode+0x4c>)
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	f023 0304 	bic.w	r3, r3, #4
 8004a74:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004a76:	78fb      	ldrb	r3, [r7, #3]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d101      	bne.n	8004a80 <HAL_PWR_EnterSLEEPMode+0x38>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8004a7c:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8004a7e:	e002      	b.n	8004a86 <HAL_PWR_EnterSLEEPMode+0x3e>
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 8004a80:	bf40      	sev
  __ASM volatile ("wfe");
 8004a82:	bf20      	wfe
 8004a84:	bf20      	wfe
 8004a86:	bf00      	nop
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	080099d4 	.word	0x080099d4
 8004a94:	e000ed00 	.word	0xe000ed00

08004a98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d104      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x1c>
 8004aaa:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8004aae:	489f      	ldr	r0, [pc, #636]	; (8004d2c <HAL_RCC_OscConfig+0x294>)
 8004ab0:	f7fd fb8c 	bl	80021cc <assert_failed>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d01c      	beq.n	8004af6 <HAL_RCC_OscConfig+0x5e>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d116      	bne.n	8004af6 <HAL_RCC_OscConfig+0x5e>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d110      	bne.n	8004af6 <HAL_RCC_OscConfig+0x5e>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0308 	and.w	r3, r3, #8
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10a      	bne.n	8004af6 <HAL_RCC_OscConfig+0x5e>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0304 	and.w	r3, r3, #4
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d104      	bne.n	8004af6 <HAL_RCC_OscConfig+0x5e>
 8004aec:	f240 1171 	movw	r1, #369	; 0x171
 8004af0:	488e      	ldr	r0, [pc, #568]	; (8004d2c <HAL_RCC_OscConfig+0x294>)
 8004af2:	f7fd fb6b 	bl	80021cc <assert_failed>
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f000 809a 	beq.w	8004c38 <HAL_RCC_OscConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00e      	beq.n	8004b2a <HAL_RCC_OscConfig+0x92>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b14:	d009      	beq.n	8004b2a <HAL_RCC_OscConfig+0x92>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b1e:	d004      	beq.n	8004b2a <HAL_RCC_OscConfig+0x92>
 8004b20:	f240 1177 	movw	r1, #375	; 0x177
 8004b24:	4881      	ldr	r0, [pc, #516]	; (8004d2c <HAL_RCC_OscConfig+0x294>)
 8004b26:	f7fd fb51 	bl	80021cc <assert_failed>
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004b2a:	4b81      	ldr	r3, [pc, #516]	; (8004d30 <HAL_RCC_OscConfig+0x298>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f003 030c 	and.w	r3, r3, #12
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d00c      	beq.n	8004b50 <HAL_RCC_OscConfig+0xb8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b36:	4b7e      	ldr	r3, [pc, #504]	; (8004d30 <HAL_RCC_OscConfig+0x298>)
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f003 030c 	and.w	r3, r3, #12
 8004b3e:	2b08      	cmp	r3, #8
 8004b40:	d112      	bne.n	8004b68 <HAL_RCC_OscConfig+0xd0>
 8004b42:	4b7b      	ldr	r3, [pc, #492]	; (8004d30 <HAL_RCC_OscConfig+0x298>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b4e:	d10b      	bne.n	8004b68 <HAL_RCC_OscConfig+0xd0>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b50:	4b77      	ldr	r3, [pc, #476]	; (8004d30 <HAL_RCC_OscConfig+0x298>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d06c      	beq.n	8004c36 <HAL_RCC_OscConfig+0x19e>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d168      	bne.n	8004c36 <HAL_RCC_OscConfig+0x19e>
      {
        return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e2e8      	b.n	800513a <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b70:	d106      	bne.n	8004b80 <HAL_RCC_OscConfig+0xe8>
 8004b72:	4a6f      	ldr	r2, [pc, #444]	; (8004d30 <HAL_RCC_OscConfig+0x298>)
 8004b74:	4b6e      	ldr	r3, [pc, #440]	; (8004d30 <HAL_RCC_OscConfig+0x298>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b7c:	6013      	str	r3, [r2, #0]
 8004b7e:	e02e      	b.n	8004bde <HAL_RCC_OscConfig+0x146>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d10c      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x10a>
 8004b88:	4a69      	ldr	r2, [pc, #420]	; (8004d30 <HAL_RCC_OscConfig+0x298>)
 8004b8a:	4b69      	ldr	r3, [pc, #420]	; (8004d30 <HAL_RCC_OscConfig+0x298>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b92:	6013      	str	r3, [r2, #0]
 8004b94:	4a66      	ldr	r2, [pc, #408]	; (8004d30 <HAL_RCC_OscConfig+0x298>)
 8004b96:	4b66      	ldr	r3, [pc, #408]	; (8004d30 <HAL_RCC_OscConfig+0x298>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b9e:	6013      	str	r3, [r2, #0]
 8004ba0:	e01d      	b.n	8004bde <HAL_RCC_OscConfig+0x146>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004baa:	d10c      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x12e>
 8004bac:	4a60      	ldr	r2, [pc, #384]	; (8004d30 <HAL_RCC_OscConfig+0x298>)
 8004bae:	4b60      	ldr	r3, [pc, #384]	; (8004d30 <HAL_RCC_OscConfig+0x298>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bb6:	6013      	str	r3, [r2, #0]
 8004bb8:	4a5d      	ldr	r2, [pc, #372]	; (8004d30 <HAL_RCC_OscConfig+0x298>)
 8004bba:	4b5d      	ldr	r3, [pc, #372]	; (8004d30 <HAL_RCC_OscConfig+0x298>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bc2:	6013      	str	r3, [r2, #0]
 8004bc4:	e00b      	b.n	8004bde <HAL_RCC_OscConfig+0x146>
 8004bc6:	4a5a      	ldr	r2, [pc, #360]	; (8004d30 <HAL_RCC_OscConfig+0x298>)
 8004bc8:	4b59      	ldr	r3, [pc, #356]	; (8004d30 <HAL_RCC_OscConfig+0x298>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bd0:	6013      	str	r3, [r2, #0]
 8004bd2:	4a57      	ldr	r2, [pc, #348]	; (8004d30 <HAL_RCC_OscConfig+0x298>)
 8004bd4:	4b56      	ldr	r3, [pc, #344]	; (8004d30 <HAL_RCC_OscConfig+0x298>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bdc:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d013      	beq.n	8004c0e <HAL_RCC_OscConfig+0x176>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be6:	f7fd ff91 	bl	8002b0c <HAL_GetTick>
 8004bea:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bec:	e008      	b.n	8004c00 <HAL_RCC_OscConfig+0x168>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bee:	f7fd ff8d 	bl	8002b0c <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	2b64      	cmp	r3, #100	; 0x64
 8004bfa:	d901      	bls.n	8004c00 <HAL_RCC_OscConfig+0x168>
          {
            return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e29c      	b.n	800513a <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c00:	4b4b      	ldr	r3, [pc, #300]	; (8004d30 <HAL_RCC_OscConfig+0x298>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d0f0      	beq.n	8004bee <HAL_RCC_OscConfig+0x156>
 8004c0c:	e014      	b.n	8004c38 <HAL_RCC_OscConfig+0x1a0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c0e:	f7fd ff7d 	bl	8002b0c <HAL_GetTick>
 8004c12:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c14:	e008      	b.n	8004c28 <HAL_RCC_OscConfig+0x190>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c16:	f7fd ff79 	bl	8002b0c <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b64      	cmp	r3, #100	; 0x64
 8004c22:	d901      	bls.n	8004c28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e288      	b.n	800513a <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c28:	4b41      	ldr	r3, [pc, #260]	; (8004d30 <HAL_RCC_OscConfig+0x298>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1f0      	bne.n	8004c16 <HAL_RCC_OscConfig+0x17e>
 8004c34:	e000      	b.n	8004c38 <HAL_RCC_OscConfig+0x1a0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c36:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d07f      	beq.n	8004d44 <HAL_RCC_OscConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d008      	beq.n	8004c5e <HAL_RCC_OscConfig+0x1c6>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d004      	beq.n	8004c5e <HAL_RCC_OscConfig+0x1c6>
 8004c54:	f240 11ab 	movw	r1, #427	; 0x1ab
 8004c58:	4834      	ldr	r0, [pc, #208]	; (8004d2c <HAL_RCC_OscConfig+0x294>)
 8004c5a:	f7fd fab7 	bl	80021cc <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	2b1f      	cmp	r3, #31
 8004c64:	d904      	bls.n	8004c70 <HAL_RCC_OscConfig+0x1d8>
 8004c66:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8004c6a:	4830      	ldr	r0, [pc, #192]	; (8004d2c <HAL_RCC_OscConfig+0x294>)
 8004c6c:	f7fd faae 	bl	80021cc <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004c70:	4b2f      	ldr	r3, [pc, #188]	; (8004d30 <HAL_RCC_OscConfig+0x298>)
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f003 030c 	and.w	r3, r3, #12
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00b      	beq.n	8004c94 <HAL_RCC_OscConfig+0x1fc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004c7c:	4b2c      	ldr	r3, [pc, #176]	; (8004d30 <HAL_RCC_OscConfig+0x298>)
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f003 030c 	and.w	r3, r3, #12
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	d11c      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x22a>
 8004c88:	4b29      	ldr	r3, [pc, #164]	; (8004d30 <HAL_RCC_OscConfig+0x298>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d116      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x22a>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c94:	4b26      	ldr	r3, [pc, #152]	; (8004d30 <HAL_RCC_OscConfig+0x298>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d005      	beq.n	8004cac <HAL_RCC_OscConfig+0x214>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d001      	beq.n	8004cac <HAL_RCC_OscConfig+0x214>
      {
        return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e246      	b.n	800513a <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cac:	4920      	ldr	r1, [pc, #128]	; (8004d30 <HAL_RCC_OscConfig+0x298>)
 8004cae:	4b20      	ldr	r3, [pc, #128]	; (8004d30 <HAL_RCC_OscConfig+0x298>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cc0:	e040      	b.n	8004d44 <HAL_RCC_OscConfig+0x2ac>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d020      	beq.n	8004d0c <HAL_RCC_OscConfig+0x274>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cca:	4b1a      	ldr	r3, [pc, #104]	; (8004d34 <HAL_RCC_OscConfig+0x29c>)
 8004ccc:	2201      	movs	r2, #1
 8004cce:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd0:	f7fd ff1c 	bl	8002b0c <HAL_GetTick>
 8004cd4:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cd6:	e008      	b.n	8004cea <HAL_RCC_OscConfig+0x252>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cd8:	f7fd ff18 	bl	8002b0c <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0x252>
          {
            return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e227      	b.n	800513a <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cea:	4b11      	ldr	r3, [pc, #68]	; (8004d30 <HAL_RCC_OscConfig+0x298>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d0f0      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x240>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf6:	490e      	ldr	r1, [pc, #56]	; (8004d30 <HAL_RCC_OscConfig+0x298>)
 8004cf8:	4b0d      	ldr	r3, [pc, #52]	; (8004d30 <HAL_RCC_OscConfig+0x298>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	00db      	lsls	r3, r3, #3
 8004d06:	4313      	orrs	r3, r2
 8004d08:	600b      	str	r3, [r1, #0]
 8004d0a:	e01b      	b.n	8004d44 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d0c:	4b09      	ldr	r3, [pc, #36]	; (8004d34 <HAL_RCC_OscConfig+0x29c>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d12:	f7fd fefb 	bl	8002b0c <HAL_GetTick>
 8004d16:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d18:	e00e      	b.n	8004d38 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d1a:	f7fd fef7 	bl	8002b0c <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d907      	bls.n	8004d38 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e206      	b.n	800513a <HAL_RCC_OscConfig+0x6a2>
 8004d2c:	08009a14 	.word	0x08009a14
 8004d30:	40021000 	.word	0x40021000
 8004d34:	42420000 	.word	0x42420000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d38:	4b7d      	ldr	r3, [pc, #500]	; (8004f30 <HAL_RCC_OscConfig+0x498>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1ea      	bne.n	8004d1a <HAL_RCC_OscConfig+0x282>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0308 	and.w	r3, r3, #8
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d040      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x33a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d008      	beq.n	8004d6a <HAL_RCC_OscConfig+0x2d2>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d004      	beq.n	8004d6a <HAL_RCC_OscConfig+0x2d2>
 8004d60:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8004d64:	4873      	ldr	r0, [pc, #460]	; (8004f34 <HAL_RCC_OscConfig+0x49c>)
 8004d66:	f7fd fa31 	bl	80021cc <assert_failed>
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d019      	beq.n	8004da6 <HAL_RCC_OscConfig+0x30e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d72:	4b71      	ldr	r3, [pc, #452]	; (8004f38 <HAL_RCC_OscConfig+0x4a0>)
 8004d74:	2201      	movs	r2, #1
 8004d76:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d78:	f7fd fec8 	bl	8002b0c <HAL_GetTick>
 8004d7c:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d7e:	e008      	b.n	8004d92 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d80:	f7fd fec4 	bl	8002b0c <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e1d3      	b.n	800513a <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d92:	4b67      	ldr	r3, [pc, #412]	; (8004f30 <HAL_RCC_OscConfig+0x498>)
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d0f0      	beq.n	8004d80 <HAL_RCC_OscConfig+0x2e8>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8004d9e:	2001      	movs	r0, #1
 8004da0:	f000 fc0c 	bl	80055bc <RCC_Delay>
 8004da4:	e015      	b.n	8004dd2 <HAL_RCC_OscConfig+0x33a>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004da6:	4b64      	ldr	r3, [pc, #400]	; (8004f38 <HAL_RCC_OscConfig+0x4a0>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dac:	f7fd feae 	bl	8002b0c <HAL_GetTick>
 8004db0:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004db2:	e008      	b.n	8004dc6 <HAL_RCC_OscConfig+0x32e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004db4:	f7fd feaa 	bl	8002b0c <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0x32e>
        {
          return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e1b9      	b.n	800513a <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dc6:	4b5a      	ldr	r3, [pc, #360]	; (8004f30 <HAL_RCC_OscConfig+0x498>)
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1f0      	bne.n	8004db4 <HAL_RCC_OscConfig+0x31c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0304 	and.w	r3, r3, #4
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f000 80bf 	beq.w	8004f5e <HAL_RCC_OscConfig+0x4c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004de0:	2300      	movs	r3, #0
 8004de2:	75fb      	strb	r3, [r7, #23]
    
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00c      	beq.n	8004e06 <HAL_RCC_OscConfig+0x36e>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d008      	beq.n	8004e06 <HAL_RCC_OscConfig+0x36e>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	2b05      	cmp	r3, #5
 8004dfa:	d004      	beq.n	8004e06 <HAL_RCC_OscConfig+0x36e>
 8004dfc:	f240 211b 	movw	r1, #539	; 0x21b
 8004e00:	484c      	ldr	r0, [pc, #304]	; (8004f34 <HAL_RCC_OscConfig+0x49c>)
 8004e02:	f7fd f9e3 	bl	80021cc <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e06:	4b4a      	ldr	r3, [pc, #296]	; (8004f30 <HAL_RCC_OscConfig+0x498>)
 8004e08:	69db      	ldr	r3, [r3, #28]
 8004e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10d      	bne.n	8004e2e <HAL_RCC_OscConfig+0x396>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e12:	4a47      	ldr	r2, [pc, #284]	; (8004f30 <HAL_RCC_OscConfig+0x498>)
 8004e14:	4b46      	ldr	r3, [pc, #280]	; (8004f30 <HAL_RCC_OscConfig+0x498>)
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e1c:	61d3      	str	r3, [r2, #28]
 8004e1e:	4b44      	ldr	r3, [pc, #272]	; (8004f30 <HAL_RCC_OscConfig+0x498>)
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e26:	60fb      	str	r3, [r7, #12]
 8004e28:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e2e:	4b43      	ldr	r3, [pc, #268]	; (8004f3c <HAL_RCC_OscConfig+0x4a4>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d118      	bne.n	8004e6c <HAL_RCC_OscConfig+0x3d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e3a:	4a40      	ldr	r2, [pc, #256]	; (8004f3c <HAL_RCC_OscConfig+0x4a4>)
 8004e3c:	4b3f      	ldr	r3, [pc, #252]	; (8004f3c <HAL_RCC_OscConfig+0x4a4>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e44:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e46:	f7fd fe61 	bl	8002b0c <HAL_GetTick>
 8004e4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e4c:	e008      	b.n	8004e60 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e4e:	f7fd fe5d 	bl	8002b0c <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	2b64      	cmp	r3, #100	; 0x64
 8004e5a:	d901      	bls.n	8004e60 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e16c      	b.n	800513a <HAL_RCC_OscConfig+0x6a2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e60:	4b36      	ldr	r3, [pc, #216]	; (8004f3c <HAL_RCC_OscConfig+0x4a4>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d0f0      	beq.n	8004e4e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d106      	bne.n	8004e82 <HAL_RCC_OscConfig+0x3ea>
 8004e74:	4a2e      	ldr	r2, [pc, #184]	; (8004f30 <HAL_RCC_OscConfig+0x498>)
 8004e76:	4b2e      	ldr	r3, [pc, #184]	; (8004f30 <HAL_RCC_OscConfig+0x498>)
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	f043 0301 	orr.w	r3, r3, #1
 8004e7e:	6213      	str	r3, [r2, #32]
 8004e80:	e02d      	b.n	8004ede <HAL_RCC_OscConfig+0x446>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10c      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x40c>
 8004e8a:	4a29      	ldr	r2, [pc, #164]	; (8004f30 <HAL_RCC_OscConfig+0x498>)
 8004e8c:	4b28      	ldr	r3, [pc, #160]	; (8004f30 <HAL_RCC_OscConfig+0x498>)
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	f023 0301 	bic.w	r3, r3, #1
 8004e94:	6213      	str	r3, [r2, #32]
 8004e96:	4a26      	ldr	r2, [pc, #152]	; (8004f30 <HAL_RCC_OscConfig+0x498>)
 8004e98:	4b25      	ldr	r3, [pc, #148]	; (8004f30 <HAL_RCC_OscConfig+0x498>)
 8004e9a:	6a1b      	ldr	r3, [r3, #32]
 8004e9c:	f023 0304 	bic.w	r3, r3, #4
 8004ea0:	6213      	str	r3, [r2, #32]
 8004ea2:	e01c      	b.n	8004ede <HAL_RCC_OscConfig+0x446>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	2b05      	cmp	r3, #5
 8004eaa:	d10c      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x42e>
 8004eac:	4a20      	ldr	r2, [pc, #128]	; (8004f30 <HAL_RCC_OscConfig+0x498>)
 8004eae:	4b20      	ldr	r3, [pc, #128]	; (8004f30 <HAL_RCC_OscConfig+0x498>)
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	f043 0304 	orr.w	r3, r3, #4
 8004eb6:	6213      	str	r3, [r2, #32]
 8004eb8:	4a1d      	ldr	r2, [pc, #116]	; (8004f30 <HAL_RCC_OscConfig+0x498>)
 8004eba:	4b1d      	ldr	r3, [pc, #116]	; (8004f30 <HAL_RCC_OscConfig+0x498>)
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	f043 0301 	orr.w	r3, r3, #1
 8004ec2:	6213      	str	r3, [r2, #32]
 8004ec4:	e00b      	b.n	8004ede <HAL_RCC_OscConfig+0x446>
 8004ec6:	4a1a      	ldr	r2, [pc, #104]	; (8004f30 <HAL_RCC_OscConfig+0x498>)
 8004ec8:	4b19      	ldr	r3, [pc, #100]	; (8004f30 <HAL_RCC_OscConfig+0x498>)
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	f023 0301 	bic.w	r3, r3, #1
 8004ed0:	6213      	str	r3, [r2, #32]
 8004ed2:	4a17      	ldr	r2, [pc, #92]	; (8004f30 <HAL_RCC_OscConfig+0x498>)
 8004ed4:	4b16      	ldr	r3, [pc, #88]	; (8004f30 <HAL_RCC_OscConfig+0x498>)
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	f023 0304 	bic.w	r3, r3, #4
 8004edc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d015      	beq.n	8004f12 <HAL_RCC_OscConfig+0x47a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ee6:	f7fd fe11 	bl	8002b0c <HAL_GetTick>
 8004eea:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eec:	e00a      	b.n	8004f04 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eee:	f7fd fe0d 	bl	8002b0c <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d901      	bls.n	8004f04 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e11a      	b.n	800513a <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f04:	4b0a      	ldr	r3, [pc, #40]	; (8004f30 <HAL_RCC_OscConfig+0x498>)
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	f003 0302 	and.w	r3, r3, #2
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d0ee      	beq.n	8004eee <HAL_RCC_OscConfig+0x456>
 8004f10:	e01c      	b.n	8004f4c <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f12:	f7fd fdfb 	bl	8002b0c <HAL_GetTick>
 8004f16:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f18:	e012      	b.n	8004f40 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f1a:	f7fd fdf7 	bl	8002b0c <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d909      	bls.n	8004f40 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e104      	b.n	800513a <HAL_RCC_OscConfig+0x6a2>
 8004f30:	40021000 	.word	0x40021000
 8004f34:	08009a14 	.word	0x08009a14
 8004f38:	42420480 	.word	0x42420480
 8004f3c:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f40:	4b80      	ldr	r3, [pc, #512]	; (8005144 <HAL_RCC_OscConfig+0x6ac>)
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1e6      	bne.n	8004f1a <HAL_RCC_OscConfig+0x482>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f4c:	7dfb      	ldrb	r3, [r7, #23]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d105      	bne.n	8004f5e <HAL_RCC_OscConfig+0x4c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f52:	4a7c      	ldr	r2, [pc, #496]	; (8005144 <HAL_RCC_OscConfig+0x6ac>)
 8004f54:	4b7b      	ldr	r3, [pc, #492]	; (8005144 <HAL_RCC_OscConfig+0x6ac>)
 8004f56:	69db      	ldr	r3, [r3, #28]
 8004f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f5c:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00c      	beq.n	8004f80 <HAL_RCC_OscConfig+0x4e8>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d008      	beq.n	8004f80 <HAL_RCC_OscConfig+0x4e8>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d004      	beq.n	8004f80 <HAL_RCC_OscConfig+0x4e8>
 8004f76:	f240 21b9 	movw	r1, #697	; 0x2b9
 8004f7a:	4873      	ldr	r0, [pc, #460]	; (8005148 <HAL_RCC_OscConfig+0x6b0>)
 8004f7c:	f7fd f926 	bl	80021cc <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 80d7 	beq.w	8005138 <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f8a:	4b6e      	ldr	r3, [pc, #440]	; (8005144 <HAL_RCC_OscConfig+0x6ac>)
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f003 030c 	and.w	r3, r3, #12
 8004f92:	2b08      	cmp	r3, #8
 8004f94:	f000 80ce 	beq.w	8005134 <HAL_RCC_OscConfig+0x69c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	69db      	ldr	r3, [r3, #28]
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	f040 80b2 	bne.w	8005106 <HAL_RCC_OscConfig+0x66e>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d009      	beq.n	8004fbe <HAL_RCC_OscConfig+0x526>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fb2:	d004      	beq.n	8004fbe <HAL_RCC_OscConfig+0x526>
 8004fb4:	f240 21c2 	movw	r1, #706	; 0x2c2
 8004fb8:	4863      	ldr	r0, [pc, #396]	; (8005148 <HAL_RCC_OscConfig+0x6b0>)
 8004fba:	f7fd f907 	bl	80021cc <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d04a      	beq.n	800505c <HAL_RCC_OscConfig+0x5c4>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fce:	d045      	beq.n	800505c <HAL_RCC_OscConfig+0x5c4>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004fd8:	d040      	beq.n	800505c <HAL_RCC_OscConfig+0x5c4>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fde:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004fe2:	d03b      	beq.n	800505c <HAL_RCC_OscConfig+0x5c4>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fec:	d036      	beq.n	800505c <HAL_RCC_OscConfig+0x5c4>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004ff6:	d031      	beq.n	800505c <HAL_RCC_OscConfig+0x5c4>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005000:	d02c      	beq.n	800505c <HAL_RCC_OscConfig+0x5c4>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005006:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800500a:	d027      	beq.n	800505c <HAL_RCC_OscConfig+0x5c4>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005014:	d022      	beq.n	800505c <HAL_RCC_OscConfig+0x5c4>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800501e:	d01d      	beq.n	800505c <HAL_RCC_OscConfig+0x5c4>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005024:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005028:	d018      	beq.n	800505c <HAL_RCC_OscConfig+0x5c4>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005032:	d013      	beq.n	800505c <HAL_RCC_OscConfig+0x5c4>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800503c:	d00e      	beq.n	800505c <HAL_RCC_OscConfig+0x5c4>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005042:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8005046:	d009      	beq.n	800505c <HAL_RCC_OscConfig+0x5c4>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504c:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8005050:	d004      	beq.n	800505c <HAL_RCC_OscConfig+0x5c4>
 8005052:	f240 21c3 	movw	r1, #707	; 0x2c3
 8005056:	483c      	ldr	r0, [pc, #240]	; (8005148 <HAL_RCC_OscConfig+0x6b0>)
 8005058:	f7fd f8b8 	bl	80021cc <assert_failed>
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800505c:	4b3b      	ldr	r3, [pc, #236]	; (800514c <HAL_RCC_OscConfig+0x6b4>)
 800505e:	2200      	movs	r2, #0
 8005060:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005062:	f7fd fd53 	bl	8002b0c <HAL_GetTick>
 8005066:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005068:	e008      	b.n	800507c <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800506a:	f7fd fd4f 	bl	8002b0c <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b02      	cmp	r3, #2
 8005076:	d901      	bls.n	800507c <HAL_RCC_OscConfig+0x5e4>
          {
            return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e05e      	b.n	800513a <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800507c:	4b31      	ldr	r3, [pc, #196]	; (8005144 <HAL_RCC_OscConfig+0x6ac>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1f0      	bne.n	800506a <HAL_RCC_OscConfig+0x5d2>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005090:	d116      	bne.n	80050c0 <HAL_RCC_OscConfig+0x628>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d009      	beq.n	80050ae <HAL_RCC_OscConfig+0x616>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050a2:	d004      	beq.n	80050ae <HAL_RCC_OscConfig+0x616>
 80050a4:	f240 21d9 	movw	r1, #729	; 0x2d9
 80050a8:	4827      	ldr	r0, [pc, #156]	; (8005148 <HAL_RCC_OscConfig+0x6b0>)
 80050aa:	f7fd f88f 	bl	80021cc <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80050ae:	4925      	ldr	r1, [pc, #148]	; (8005144 <HAL_RCC_OscConfig+0x6ac>)
 80050b0:	4b24      	ldr	r3, [pc, #144]	; (8005144 <HAL_RCC_OscConfig+0x6ac>)
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	4313      	orrs	r3, r2
 80050be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050c0:	4820      	ldr	r0, [pc, #128]	; (8005144 <HAL_RCC_OscConfig+0x6ac>)
 80050c2:	4b20      	ldr	r3, [pc, #128]	; (8005144 <HAL_RCC_OscConfig+0x6ac>)
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a19      	ldr	r1, [r3, #32]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d2:	430b      	orrs	r3, r1
 80050d4:	4313      	orrs	r3, r2
 80050d6:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050d8:	4b1c      	ldr	r3, [pc, #112]	; (800514c <HAL_RCC_OscConfig+0x6b4>)
 80050da:	2201      	movs	r2, #1
 80050dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050de:	f7fd fd15 	bl	8002b0c <HAL_GetTick>
 80050e2:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050e4:	e008      	b.n	80050f8 <HAL_RCC_OscConfig+0x660>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050e6:	f7fd fd11 	bl	8002b0c <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d901      	bls.n	80050f8 <HAL_RCC_OscConfig+0x660>
          {
            return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e020      	b.n	800513a <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050f8:	4b12      	ldr	r3, [pc, #72]	; (8005144 <HAL_RCC_OscConfig+0x6ac>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d0f0      	beq.n	80050e6 <HAL_RCC_OscConfig+0x64e>
 8005104:	e018      	b.n	8005138 <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005106:	4b11      	ldr	r3, [pc, #68]	; (800514c <HAL_RCC_OscConfig+0x6b4>)
 8005108:	2200      	movs	r2, #0
 800510a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800510c:	f7fd fcfe 	bl	8002b0c <HAL_GetTick>
 8005110:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005112:	e008      	b.n	8005126 <HAL_RCC_OscConfig+0x68e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005114:	f7fd fcfa 	bl	8002b0c <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b02      	cmp	r3, #2
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0x68e>
          {
            return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e009      	b.n	800513a <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005126:	4b07      	ldr	r3, [pc, #28]	; (8005144 <HAL_RCC_OscConfig+0x6ac>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1f0      	bne.n	8005114 <HAL_RCC_OscConfig+0x67c>
 8005132:	e001      	b.n	8005138 <HAL_RCC_OscConfig+0x6a0>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e000      	b.n	800513a <HAL_RCC_OscConfig+0x6a2>
    }
  }
  
  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3718      	adds	r7, #24
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	40021000 	.word	0x40021000
 8005148:	08009a14 	.word	0x08009a14
 800514c:	42420060 	.word	0x42420060

08005150 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800515a:	2300      	movs	r3, #0
 800515c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d104      	bne.n	800516e <HAL_RCC_ClockConfig+0x1e>
 8005164:	f240 312e 	movw	r1, #814	; 0x32e
 8005168:	488b      	ldr	r0, [pc, #556]	; (8005398 <HAL_RCC_ClockConfig+0x248>)
 800516a:	f7fd f82f 	bl	80021cc <assert_failed>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	2b00      	cmp	r3, #0
 8005178:	d116      	bne.n	80051a8 <HAL_RCC_ClockConfig+0x58>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d110      	bne.n	80051a8 <HAL_RCC_ClockConfig+0x58>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0304 	and.w	r3, r3, #4
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10a      	bne.n	80051a8 <HAL_RCC_ClockConfig+0x58>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0308 	and.w	r3, r3, #8
 800519a:	2b00      	cmp	r3, #0
 800519c:	d104      	bne.n	80051a8 <HAL_RCC_ClockConfig+0x58>
 800519e:	f240 312f 	movw	r1, #815	; 0x32f
 80051a2:	487d      	ldr	r0, [pc, #500]	; (8005398 <HAL_RCC_ClockConfig+0x248>)
 80051a4:	f7fd f812 	bl	80021cc <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00a      	beq.n	80051c4 <HAL_RCC_ClockConfig+0x74>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d007      	beq.n	80051c4 <HAL_RCC_ClockConfig+0x74>
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d004      	beq.n	80051c4 <HAL_RCC_ClockConfig+0x74>
 80051ba:	f44f 714c 	mov.w	r1, #816	; 0x330
 80051be:	4876      	ldr	r0, [pc, #472]	; (8005398 <HAL_RCC_ClockConfig+0x248>)
 80051c0:	f7fd f804 	bl	80021cc <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80051c4:	4b75      	ldr	r3, [pc, #468]	; (800539c <HAL_RCC_ClockConfig+0x24c>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0207 	and.w	r2, r3, #7
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d210      	bcs.n	80051f4 <HAL_RCC_ClockConfig+0xa4>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051d2:	4972      	ldr	r1, [pc, #456]	; (800539c <HAL_RCC_ClockConfig+0x24c>)
 80051d4:	4b71      	ldr	r3, [pc, #452]	; (800539c <HAL_RCC_ClockConfig+0x24c>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f023 0207 	bic.w	r2, r3, #7
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	4313      	orrs	r3, r2
 80051e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80051e2:	4b6e      	ldr	r3, [pc, #440]	; (800539c <HAL_RCC_ClockConfig+0x24c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0207 	and.w	r2, r3, #7
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d001      	beq.n	80051f4 <HAL_RCC_ClockConfig+0xa4>
    {
      return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e142      	b.n	800547a <HAL_RCC_ClockConfig+0x32a>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0302 	and.w	r3, r3, #2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d031      	beq.n	8005264 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d024      	beq.n	8005252 <HAL_RCC_ClockConfig+0x102>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	2b80      	cmp	r3, #128	; 0x80
 800520e:	d020      	beq.n	8005252 <HAL_RCC_ClockConfig+0x102>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	2b90      	cmp	r3, #144	; 0x90
 8005216:	d01c      	beq.n	8005252 <HAL_RCC_ClockConfig+0x102>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	2ba0      	cmp	r3, #160	; 0xa0
 800521e:	d018      	beq.n	8005252 <HAL_RCC_ClockConfig+0x102>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	2bb0      	cmp	r3, #176	; 0xb0
 8005226:	d014      	beq.n	8005252 <HAL_RCC_ClockConfig+0x102>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	2bc0      	cmp	r3, #192	; 0xc0
 800522e:	d010      	beq.n	8005252 <HAL_RCC_ClockConfig+0x102>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	2bd0      	cmp	r3, #208	; 0xd0
 8005236:	d00c      	beq.n	8005252 <HAL_RCC_ClockConfig+0x102>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	2be0      	cmp	r3, #224	; 0xe0
 800523e:	d008      	beq.n	8005252 <HAL_RCC_ClockConfig+0x102>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	2bf0      	cmp	r3, #240	; 0xf0
 8005246:	d004      	beq.n	8005252 <HAL_RCC_ClockConfig+0x102>
 8005248:	f240 3149 	movw	r1, #841	; 0x349
 800524c:	4852      	ldr	r0, [pc, #328]	; (8005398 <HAL_RCC_ClockConfig+0x248>)
 800524e:	f7fc ffbd 	bl	80021cc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005252:	4953      	ldr	r1, [pc, #332]	; (80053a0 <HAL_RCC_ClockConfig+0x250>)
 8005254:	4b52      	ldr	r3, [pc, #328]	; (80053a0 <HAL_RCC_ClockConfig+0x250>)
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	4313      	orrs	r3, r2
 8005262:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	2b00      	cmp	r3, #0
 800526e:	d07b      	beq.n	8005368 <HAL_RCC_ClockConfig+0x218>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00c      	beq.n	8005292 <HAL_RCC_ClockConfig+0x142>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d008      	beq.n	8005292 <HAL_RCC_ClockConfig+0x142>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	2b02      	cmp	r3, #2
 8005286:	d004      	beq.n	8005292 <HAL_RCC_ClockConfig+0x142>
 8005288:	f44f 7154 	mov.w	r1, #848	; 0x350
 800528c:	4842      	ldr	r0, [pc, #264]	; (8005398 <HAL_RCC_ClockConfig+0x248>)
 800528e:	f7fc ff9d 	bl	80021cc <assert_failed>
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d107      	bne.n	80052aa <HAL_RCC_ClockConfig+0x15a>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800529a:	4b41      	ldr	r3, [pc, #260]	; (80053a0 <HAL_RCC_ClockConfig+0x250>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d115      	bne.n	80052d2 <HAL_RCC_ClockConfig+0x182>
      {
        return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e0e7      	b.n	800547a <HAL_RCC_ClockConfig+0x32a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d107      	bne.n	80052c2 <HAL_RCC_ClockConfig+0x172>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052b2:	4b3b      	ldr	r3, [pc, #236]	; (80053a0 <HAL_RCC_ClockConfig+0x250>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d109      	bne.n	80052d2 <HAL_RCC_ClockConfig+0x182>
      {
        return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e0db      	b.n	800547a <HAL_RCC_ClockConfig+0x32a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052c2:	4b37      	ldr	r3, [pc, #220]	; (80053a0 <HAL_RCC_ClockConfig+0x250>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_RCC_ClockConfig+0x182>
      {
        return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e0d3      	b.n	800547a <HAL_RCC_ClockConfig+0x32a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052d2:	4933      	ldr	r1, [pc, #204]	; (80053a0 <HAL_RCC_ClockConfig+0x250>)
 80052d4:	4b32      	ldr	r3, [pc, #200]	; (80053a0 <HAL_RCC_ClockConfig+0x250>)
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f023 0203 	bic.w	r2, r3, #3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052e4:	f7fd fc12 	bl	8002b0c <HAL_GetTick>
 80052e8:	60f8      	str	r0, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d112      	bne.n	8005318 <HAL_RCC_ClockConfig+0x1c8>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80052f2:	e00a      	b.n	800530a <HAL_RCC_ClockConfig+0x1ba>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052f4:	f7fd fc0a 	bl	8002b0c <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005302:	4293      	cmp	r3, r2
 8005304:	d901      	bls.n	800530a <HAL_RCC_ClockConfig+0x1ba>
        {
          return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e0b7      	b.n	800547a <HAL_RCC_ClockConfig+0x32a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800530a:	4b25      	ldr	r3, [pc, #148]	; (80053a0 <HAL_RCC_ClockConfig+0x250>)
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f003 030c 	and.w	r3, r3, #12
 8005312:	2b04      	cmp	r3, #4
 8005314:	d1ee      	bne.n	80052f4 <HAL_RCC_ClockConfig+0x1a4>
 8005316:	e027      	b.n	8005368 <HAL_RCC_ClockConfig+0x218>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	2b02      	cmp	r3, #2
 800531e:	d11d      	bne.n	800535c <HAL_RCC_ClockConfig+0x20c>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005320:	e00a      	b.n	8005338 <HAL_RCC_ClockConfig+0x1e8>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005322:	f7fd fbf3 	bl	8002b0c <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005330:	4293      	cmp	r3, r2
 8005332:	d901      	bls.n	8005338 <HAL_RCC_ClockConfig+0x1e8>
        {
          return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e0a0      	b.n	800547a <HAL_RCC_ClockConfig+0x32a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005338:	4b19      	ldr	r3, [pc, #100]	; (80053a0 <HAL_RCC_ClockConfig+0x250>)
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f003 030c 	and.w	r3, r3, #12
 8005340:	2b08      	cmp	r3, #8
 8005342:	d1ee      	bne.n	8005322 <HAL_RCC_ClockConfig+0x1d2>
 8005344:	e010      	b.n	8005368 <HAL_RCC_ClockConfig+0x218>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005346:	f7fd fbe1 	bl	8002b0c <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	f241 3288 	movw	r2, #5000	; 0x1388
 8005354:	4293      	cmp	r3, r2
 8005356:	d901      	bls.n	800535c <HAL_RCC_ClockConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e08e      	b.n	800547a <HAL_RCC_ClockConfig+0x32a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800535c:	4b10      	ldr	r3, [pc, #64]	; (80053a0 <HAL_RCC_ClockConfig+0x250>)
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f003 030c 	and.w	r3, r3, #12
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1ee      	bne.n	8005346 <HAL_RCC_ClockConfig+0x1f6>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8005368:	4b0c      	ldr	r3, [pc, #48]	; (800539c <HAL_RCC_ClockConfig+0x24c>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0207 	and.w	r2, r3, #7
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	429a      	cmp	r2, r3
 8005374:	d916      	bls.n	80053a4 <HAL_RCC_ClockConfig+0x254>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005376:	4909      	ldr	r1, [pc, #36]	; (800539c <HAL_RCC_ClockConfig+0x24c>)
 8005378:	4b08      	ldr	r3, [pc, #32]	; (800539c <HAL_RCC_ClockConfig+0x24c>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f023 0207 	bic.w	r2, r3, #7
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	4313      	orrs	r3, r2
 8005384:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005386:	4b05      	ldr	r3, [pc, #20]	; (800539c <HAL_RCC_ClockConfig+0x24c>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0207 	and.w	r2, r3, #7
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	429a      	cmp	r2, r3
 8005392:	d007      	beq.n	80053a4 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e070      	b.n	800547a <HAL_RCC_ClockConfig+0x32a>
 8005398:	08009a14 	.word	0x08009a14
 800539c:	40022000 	.word	0x40022000
 80053a0:	40021000 	.word	0x40021000
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0304 	and.w	r3, r3, #4
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d025      	beq.n	80053fc <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d018      	beq.n	80053ea <HAL_RCC_ClockConfig+0x29a>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053c0:	d013      	beq.n	80053ea <HAL_RCC_ClockConfig+0x29a>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80053ca:	d00e      	beq.n	80053ea <HAL_RCC_ClockConfig+0x29a>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80053d4:	d009      	beq.n	80053ea <HAL_RCC_ClockConfig+0x29a>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053de:	d004      	beq.n	80053ea <HAL_RCC_ClockConfig+0x29a>
 80053e0:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 80053e4:	4827      	ldr	r0, [pc, #156]	; (8005484 <HAL_RCC_ClockConfig+0x334>)
 80053e6:	f7fc fef1 	bl	80021cc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053ea:	4927      	ldr	r1, [pc, #156]	; (8005488 <HAL_RCC_ClockConfig+0x338>)
 80053ec:	4b26      	ldr	r3, [pc, #152]	; (8005488 <HAL_RCC_ClockConfig+0x338>)
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0308 	and.w	r3, r3, #8
 8005404:	2b00      	cmp	r3, #0
 8005406:	d026      	beq.n	8005456 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d018      	beq.n	8005442 <HAL_RCC_ClockConfig+0x2f2>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005418:	d013      	beq.n	8005442 <HAL_RCC_ClockConfig+0x2f2>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005422:	d00e      	beq.n	8005442 <HAL_RCC_ClockConfig+0x2f2>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800542c:	d009      	beq.n	8005442 <HAL_RCC_ClockConfig+0x2f2>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005436:	d004      	beq.n	8005442 <HAL_RCC_ClockConfig+0x2f2>
 8005438:	f240 31ab 	movw	r1, #939	; 0x3ab
 800543c:	4811      	ldr	r0, [pc, #68]	; (8005484 <HAL_RCC_ClockConfig+0x334>)
 800543e:	f7fc fec5 	bl	80021cc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005442:	4911      	ldr	r1, [pc, #68]	; (8005488 <HAL_RCC_ClockConfig+0x338>)
 8005444:	4b10      	ldr	r3, [pc, #64]	; (8005488 <HAL_RCC_ClockConfig+0x338>)
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	00db      	lsls	r3, r3, #3
 8005452:	4313      	orrs	r3, r2
 8005454:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005456:	f000 f81d 	bl	8005494 <HAL_RCC_GetSysClockFreq>
 800545a:	4601      	mov	r1, r0
 800545c:	4b0a      	ldr	r3, [pc, #40]	; (8005488 <HAL_RCC_ClockConfig+0x338>)
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	091b      	lsrs	r3, r3, #4
 8005462:	f003 030f 	and.w	r3, r3, #15
 8005466:	4a09      	ldr	r2, [pc, #36]	; (800548c <HAL_RCC_ClockConfig+0x33c>)
 8005468:	5cd3      	ldrb	r3, [r2, r3]
 800546a:	fa21 f303 	lsr.w	r3, r1, r3
 800546e:	4a08      	ldr	r2, [pc, #32]	; (8005490 <HAL_RCC_ClockConfig+0x340>)
 8005470:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005472:	2000      	movs	r0, #0
 8005474:	f7fd fb08 	bl	8002a88 <HAL_InitTick>
  
  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	08009a14 	.word	0x08009a14
 8005488:	40021000 	.word	0x40021000
 800548c:	08009b84 	.word	0x08009b84
 8005490:	20000004 	.word	0x20000004

08005494 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005494:	b490      	push	{r4, r7}
 8005496:	b08a      	sub	sp, #40	; 0x28
 8005498:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800549a:	4b2a      	ldr	r3, [pc, #168]	; (8005544 <HAL_RCC_GetSysClockFreq+0xb0>)
 800549c:	1d3c      	adds	r4, r7, #4
 800549e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80054a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80054a4:	4b28      	ldr	r3, [pc, #160]	; (8005548 <HAL_RCC_GetSysClockFreq+0xb4>)
 80054a6:	881b      	ldrh	r3, [r3, #0]
 80054a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80054aa:	2300      	movs	r3, #0
 80054ac:	61fb      	str	r3, [r7, #28]
 80054ae:	2300      	movs	r3, #0
 80054b0:	61bb      	str	r3, [r7, #24]
 80054b2:	2300      	movs	r3, #0
 80054b4:	627b      	str	r3, [r7, #36]	; 0x24
 80054b6:	2300      	movs	r3, #0
 80054b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80054ba:	2300      	movs	r3, #0
 80054bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80054be:	4b23      	ldr	r3, [pc, #140]	; (800554c <HAL_RCC_GetSysClockFreq+0xb8>)
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	f003 030c 	and.w	r3, r3, #12
 80054ca:	2b04      	cmp	r3, #4
 80054cc:	d002      	beq.n	80054d4 <HAL_RCC_GetSysClockFreq+0x40>
 80054ce:	2b08      	cmp	r3, #8
 80054d0:	d003      	beq.n	80054da <HAL_RCC_GetSysClockFreq+0x46>
 80054d2:	e02d      	b.n	8005530 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80054d4:	4b1e      	ldr	r3, [pc, #120]	; (8005550 <HAL_RCC_GetSysClockFreq+0xbc>)
 80054d6:	623b      	str	r3, [r7, #32]
      break;
 80054d8:	e02d      	b.n	8005536 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	0c9b      	lsrs	r3, r3, #18
 80054de:	f003 030f 	and.w	r3, r3, #15
 80054e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80054e6:	4413      	add	r3, r2
 80054e8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80054ec:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d013      	beq.n	8005520 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80054f8:	4b14      	ldr	r3, [pc, #80]	; (800554c <HAL_RCC_GetSysClockFreq+0xb8>)
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	0c5b      	lsrs	r3, r3, #17
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005506:	4413      	add	r3, r2
 8005508:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800550c:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	4a0f      	ldr	r2, [pc, #60]	; (8005550 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005512:	fb02 f203 	mul.w	r2, r2, r3
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	fbb2 f3f3 	udiv	r3, r2, r3
 800551c:	627b      	str	r3, [r7, #36]	; 0x24
 800551e:	e004      	b.n	800552a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	4a0c      	ldr	r2, [pc, #48]	; (8005554 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005524:	fb02 f303 	mul.w	r3, r2, r3
 8005528:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	623b      	str	r3, [r7, #32]
      break;
 800552e:	e002      	b.n	8005536 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005530:	4b07      	ldr	r3, [pc, #28]	; (8005550 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005532:	623b      	str	r3, [r7, #32]
      break;
 8005534:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005536:	6a3b      	ldr	r3, [r7, #32]
}
 8005538:	4618      	mov	r0, r3
 800553a:	3728      	adds	r7, #40	; 0x28
 800553c:	46bd      	mov	sp, r7
 800553e:	bc90      	pop	{r4, r7}
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	08009a54 	.word	0x08009a54
 8005548:	08009a64 	.word	0x08009a64
 800554c:	40021000 	.word	0x40021000
 8005550:	007a1200 	.word	0x007a1200
 8005554:	003d0900 	.word	0x003d0900

08005558 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005558:	b480      	push	{r7}
 800555a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800555c:	4b02      	ldr	r3, [pc, #8]	; (8005568 <HAL_RCC_GetHCLKFreq+0x10>)
 800555e:	681b      	ldr	r3, [r3, #0]
}
 8005560:	4618      	mov	r0, r3
 8005562:	46bd      	mov	sp, r7
 8005564:	bc80      	pop	{r7}
 8005566:	4770      	bx	lr
 8005568:	20000004 	.word	0x20000004

0800556c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005570:	f7ff fff2 	bl	8005558 <HAL_RCC_GetHCLKFreq>
 8005574:	4601      	mov	r1, r0
 8005576:	4b05      	ldr	r3, [pc, #20]	; (800558c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	0a1b      	lsrs	r3, r3, #8
 800557c:	f003 0307 	and.w	r3, r3, #7
 8005580:	4a03      	ldr	r2, [pc, #12]	; (8005590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005582:	5cd3      	ldrb	r3, [r2, r3]
 8005584:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005588:	4618      	mov	r0, r3
 800558a:	bd80      	pop	{r7, pc}
 800558c:	40021000 	.word	0x40021000
 8005590:	08009b94 	.word	0x08009b94

08005594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005598:	f7ff ffde 	bl	8005558 <HAL_RCC_GetHCLKFreq>
 800559c:	4601      	mov	r1, r0
 800559e:	4b05      	ldr	r3, [pc, #20]	; (80055b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	0adb      	lsrs	r3, r3, #11
 80055a4:	f003 0307 	and.w	r3, r3, #7
 80055a8:	4a03      	ldr	r2, [pc, #12]	; (80055b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055aa:	5cd3      	ldrb	r3, [r2, r3]
 80055ac:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80055b0:	4618      	mov	r0, r3
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	40021000 	.word	0x40021000
 80055b8:	08009b94 	.word	0x08009b94

080055bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80055c4:	4b0a      	ldr	r3, [pc, #40]	; (80055f0 <RCC_Delay+0x34>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a0a      	ldr	r2, [pc, #40]	; (80055f4 <RCC_Delay+0x38>)
 80055ca:	fba2 2303 	umull	r2, r3, r2, r3
 80055ce:	0a5b      	lsrs	r3, r3, #9
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	fb02 f303 	mul.w	r3, r2, r3
 80055d6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("nop");
 80055d8:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	1e5a      	subs	r2, r3, #1
 80055de:	60fa      	str	r2, [r7, #12]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1f9      	bne.n	80055d8 <RCC_Delay+0x1c>
}
 80055e4:	bf00      	nop
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bc80      	pop	{r7}
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	20000004 	.word	0x20000004
 80055f4:	10624dd3 	.word	0x10624dd3

080055f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b086      	sub	sp, #24
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005600:	2300      	movs	r3, #0
 8005602:	613b      	str	r3, [r7, #16]
 8005604:	2300      	movs	r3, #0
 8005606:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0301 	and.w	r3, r3, #1
 8005610:	2b00      	cmp	r3, #0
 8005612:	d10f      	bne.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0302 	and.w	r3, r3, #2
 800561c:	2b00      	cmp	r3, #0
 800561e:	d109      	bne.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0310 	and.w	r3, r3, #16
 8005628:	2b00      	cmp	r3, #0
 800562a:	d103      	bne.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800562c:	217c      	movs	r1, #124	; 0x7c
 800562e:	4873      	ldr	r0, [pc, #460]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8005630:	f7fc fdcc 	bl	80021cc <assert_failed>
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0301 	and.w	r3, r3, #1
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 8095 	beq.w	800576c <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d012      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005652:	d00d      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800565c:	d008      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005666:	d003      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005668:	2182      	movs	r1, #130	; 0x82
 800566a:	4864      	ldr	r0, [pc, #400]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800566c:	f7fc fdae 	bl	80021cc <assert_failed>

    FlagStatus       pwrclkchanged = RESET;
 8005670:	2300      	movs	r3, #0
 8005672:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005674:	4b62      	ldr	r3, [pc, #392]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005676:	69db      	ldr	r3, [r3, #28]
 8005678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10d      	bne.n	800569c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005680:	4a5f      	ldr	r2, [pc, #380]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005682:	4b5f      	ldr	r3, [pc, #380]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800568a:	61d3      	str	r3, [r2, #28]
 800568c:	4b5c      	ldr	r3, [pc, #368]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800568e:	69db      	ldr	r3, [r3, #28]
 8005690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005694:	60bb      	str	r3, [r7, #8]
 8005696:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005698:	2301      	movs	r3, #1
 800569a:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800569c:	4b59      	ldr	r3, [pc, #356]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d118      	bne.n	80056da <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056a8:	4a56      	ldr	r2, [pc, #344]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80056aa:	4b56      	ldr	r3, [pc, #344]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056b2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056b4:	f7fd fa2a 	bl	8002b0c <HAL_GetTick>
 80056b8:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ba:	e008      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056bc:	f7fd fa26 	bl	8002b0c <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	2b64      	cmp	r3, #100	; 0x64
 80056c8:	d901      	bls.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e092      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ce:	4b4d      	ldr	r3, [pc, #308]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d0f0      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056da:	4b49      	ldr	r3, [pc, #292]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056e2:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d02e      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x150>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d027      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056f8:	4b41      	ldr	r3, [pc, #260]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80056fa:	6a1b      	ldr	r3, [r3, #32]
 80056fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005700:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005702:	4b41      	ldr	r3, [pc, #260]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005704:	2201      	movs	r2, #1
 8005706:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005708:	4b3f      	ldr	r3, [pc, #252]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800570a:	2200      	movs	r2, #0
 800570c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800570e:	4a3c      	ldr	r2, [pc, #240]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	2b00      	cmp	r3, #0
 800571c:	d014      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800571e:	f7fd f9f5 	bl	8002b0c <HAL_GetTick>
 8005722:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005724:	e00a      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005726:	f7fd f9f1 	bl	8002b0c <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	f241 3288 	movw	r2, #5000	; 0x1388
 8005734:	4293      	cmp	r3, r2
 8005736:	d901      	bls.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e05b      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800573c:	4b30      	ldr	r3, [pc, #192]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800573e:	6a1b      	ldr	r3, [r3, #32]
 8005740:	f003 0302 	and.w	r3, r3, #2
 8005744:	2b00      	cmp	r3, #0
 8005746:	d0ee      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005748:	492d      	ldr	r1, [pc, #180]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800574a:	4b2d      	ldr	r3, [pc, #180]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	4313      	orrs	r3, r2
 8005758:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800575a:	7dfb      	ldrb	r3, [r7, #23]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d105      	bne.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005760:	4a27      	ldr	r2, [pc, #156]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005762:	4b27      	ldr	r3, [pc, #156]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005764:	69db      	ldr	r3, [r3, #28]
 8005766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800576a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	2b00      	cmp	r3, #0
 8005776:	d01f      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d012      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005788:	d00d      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005792:	d008      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800579c:	d003      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800579e:	21c9      	movs	r1, #201	; 0xc9
 80057a0:	4816      	ldr	r0, [pc, #88]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80057a2:	f7fc fd13 	bl	80021cc <assert_failed>
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057a6:	4916      	ldr	r1, [pc, #88]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80057a8:	4b15      	ldr	r3, [pc, #84]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0310 	and.w	r3, r3, #16
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d016      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057cc:	d008      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d004      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80057d6:	f240 1125 	movw	r1, #293	; 0x125
 80057da:	4808      	ldr	r0, [pc, #32]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80057dc:	f7fc fcf6 	bl	80021cc <assert_failed>
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057e0:	4907      	ldr	r1, [pc, #28]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80057e2:	4b07      	ldr	r3, [pc, #28]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3718      	adds	r7, #24
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	08009a68 	.word	0x08009a68
 8005800:	40021000 	.word	0x40021000
 8005804:	40007000 	.word	0x40007000
 8005808:	42420440 	.word	0x42420440

0800580c <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e06b      	b.n	80058f6 <HAL_TIM_Base_Init+0xea>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a37      	ldr	r2, [pc, #220]	; (8005900 <HAL_TIM_Base_Init+0xf4>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d012      	beq.n	800584e <HAL_TIM_Base_Init+0x42>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005830:	d00d      	beq.n	800584e <HAL_TIM_Base_Init+0x42>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a33      	ldr	r2, [pc, #204]	; (8005904 <HAL_TIM_Base_Init+0xf8>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d008      	beq.n	800584e <HAL_TIM_Base_Init+0x42>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a31      	ldr	r2, [pc, #196]	; (8005908 <HAL_TIM_Base_Init+0xfc>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d003      	beq.n	800584e <HAL_TIM_Base_Init+0x42>
 8005846:	21d5      	movs	r1, #213	; 0xd5
 8005848:	4830      	ldr	r0, [pc, #192]	; (800590c <HAL_TIM_Base_Init+0x100>)
 800584a:	f7fc fcbf 	bl	80021cc <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d013      	beq.n	800587e <HAL_TIM_Base_Init+0x72>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	2b10      	cmp	r3, #16
 800585c:	d00f      	beq.n	800587e <HAL_TIM_Base_Init+0x72>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	2b20      	cmp	r3, #32
 8005864:	d00b      	beq.n	800587e <HAL_TIM_Base_Init+0x72>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	2b40      	cmp	r3, #64	; 0x40
 800586c:	d007      	beq.n	800587e <HAL_TIM_Base_Init+0x72>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	2b60      	cmp	r3, #96	; 0x60
 8005874:	d003      	beq.n	800587e <HAL_TIM_Base_Init+0x72>
 8005876:	21d6      	movs	r1, #214	; 0xd6
 8005878:	4824      	ldr	r0, [pc, #144]	; (800590c <HAL_TIM_Base_Init+0x100>)
 800587a:	f7fc fca7 	bl	80021cc <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00d      	beq.n	80058a2 <HAL_TIM_Base_Init+0x96>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800588e:	d008      	beq.n	80058a2 <HAL_TIM_Base_Init+0x96>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005898:	d003      	beq.n	80058a2 <HAL_TIM_Base_Init+0x96>
 800589a:	21d7      	movs	r1, #215	; 0xd7
 800589c:	481b      	ldr	r0, [pc, #108]	; (800590c <HAL_TIM_Base_Init+0x100>)
 800589e:	f7fc fc95 	bl	80021cc <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d007      	beq.n	80058ba <HAL_TIM_Base_Init+0xae>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	2b80      	cmp	r3, #128	; 0x80
 80058b0:	d003      	beq.n	80058ba <HAL_TIM_Base_Init+0xae>
 80058b2:	21d8      	movs	r1, #216	; 0xd8
 80058b4:	4815      	ldr	r0, [pc, #84]	; (800590c <HAL_TIM_Base_Init+0x100>)
 80058b6:	f7fc fc89 	bl	80021cc <assert_failed>

  if(htim->State == HAL_TIM_STATE_RESET)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d106      	bne.n	80058d4 <HAL_TIM_Base_Init+0xc8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f7fc ff12 	bl	80026f8 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2202      	movs	r2, #2
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	3304      	adds	r3, #4
 80058e4:	4619      	mov	r1, r3
 80058e6:	4610      	mov	r0, r2
 80058e8:	f001 fd36 	bl	8007358 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	40012c00 	.word	0x40012c00
 8005904:	40000400 	.word	0x40000400
 8005908:	40000800 	.word	0x40000800
 800590c:	08009ac0 	.word	0x08009ac0

08005910 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a15      	ldr	r2, [pc, #84]	; (8005974 <HAL_TIM_Base_Start_IT+0x64>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d013      	beq.n	800594a <HAL_TIM_Base_Start_IT+0x3a>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800592a:	d00e      	beq.n	800594a <HAL_TIM_Base_Start_IT+0x3a>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a11      	ldr	r2, [pc, #68]	; (8005978 <HAL_TIM_Base_Start_IT+0x68>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d009      	beq.n	800594a <HAL_TIM_Base_Start_IT+0x3a>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a10      	ldr	r2, [pc, #64]	; (800597c <HAL_TIM_Base_Start_IT+0x6c>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d004      	beq.n	800594a <HAL_TIM_Base_Start_IT+0x3a>
 8005940:	f240 115d 	movw	r1, #349	; 0x15d
 8005944:	480e      	ldr	r0, [pc, #56]	; (8005980 <HAL_TIM_Base_Start_IT+0x70>)
 8005946:	f7fc fc41 	bl	80021cc <assert_failed>

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	6812      	ldr	r2, [r2, #0]
 8005952:	68d2      	ldr	r2, [r2, #12]
 8005954:	f042 0201 	orr.w	r2, r2, #1
 8005958:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	6812      	ldr	r2, [r2, #0]
 8005962:	6812      	ldr	r2, [r2, #0]
 8005964:	f042 0201 	orr.w	r2, r2, #1
 8005968:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3708      	adds	r7, #8
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	40012c00 	.word	0x40012c00
 8005978:	40000400 	.word	0x40000400
 800597c:	40000800 	.word	0x40000800
 8005980:	08009ac0 	.word	0x08009ac0

08005984 <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e06f      	b.n	8005a76 <HAL_TIM_PWM_Init+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a39      	ldr	r2, [pc, #228]	; (8005a80 <HAL_TIM_PWM_Init+0xfc>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d013      	beq.n	80059c8 <HAL_TIM_PWM_Init+0x44>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059a8:	d00e      	beq.n	80059c8 <HAL_TIM_PWM_Init+0x44>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a35      	ldr	r2, [pc, #212]	; (8005a84 <HAL_TIM_PWM_Init+0x100>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d009      	beq.n	80059c8 <HAL_TIM_PWM_Init+0x44>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a33      	ldr	r2, [pc, #204]	; (8005a88 <HAL_TIM_PWM_Init+0x104>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d004      	beq.n	80059c8 <HAL_TIM_PWM_Init+0x44>
 80059be:	f240 31e2 	movw	r1, #994	; 0x3e2
 80059c2:	4832      	ldr	r0, [pc, #200]	; (8005a8c <HAL_TIM_PWM_Init+0x108>)
 80059c4:	f7fc fc02 	bl	80021cc <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d014      	beq.n	80059fa <HAL_TIM_PWM_Init+0x76>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	2b10      	cmp	r3, #16
 80059d6:	d010      	beq.n	80059fa <HAL_TIM_PWM_Init+0x76>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	2b20      	cmp	r3, #32
 80059de:	d00c      	beq.n	80059fa <HAL_TIM_PWM_Init+0x76>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	2b40      	cmp	r3, #64	; 0x40
 80059e6:	d008      	beq.n	80059fa <HAL_TIM_PWM_Init+0x76>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	2b60      	cmp	r3, #96	; 0x60
 80059ee:	d004      	beq.n	80059fa <HAL_TIM_PWM_Init+0x76>
 80059f0:	f240 31e3 	movw	r1, #995	; 0x3e3
 80059f4:	4825      	ldr	r0, [pc, #148]	; (8005a8c <HAL_TIM_PWM_Init+0x108>)
 80059f6:	f7fc fbe9 	bl	80021cc <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00e      	beq.n	8005a20 <HAL_TIM_PWM_Init+0x9c>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a0a:	d009      	beq.n	8005a20 <HAL_TIM_PWM_Init+0x9c>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a14:	d004      	beq.n	8005a20 <HAL_TIM_PWM_Init+0x9c>
 8005a16:	f44f 7179 	mov.w	r1, #996	; 0x3e4
 8005a1a:	481c      	ldr	r0, [pc, #112]	; (8005a8c <HAL_TIM_PWM_Init+0x108>)
 8005a1c:	f7fc fbd6 	bl	80021cc <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d008      	beq.n	8005a3a <HAL_TIM_PWM_Init+0xb6>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	2b80      	cmp	r3, #128	; 0x80
 8005a2e:	d004      	beq.n	8005a3a <HAL_TIM_PWM_Init+0xb6>
 8005a30:	f240 31e5 	movw	r1, #997	; 0x3e5
 8005a34:	4815      	ldr	r0, [pc, #84]	; (8005a8c <HAL_TIM_PWM_Init+0x108>)
 8005a36:	f7fc fbc9 	bl	80021cc <assert_failed>

  if(htim->State == HAL_TIM_STATE_RESET)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d106      	bne.n	8005a54 <HAL_TIM_PWM_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 f81e 	bl	8005a90 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2202      	movs	r2, #2
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	3304      	adds	r3, #4
 8005a64:	4619      	mov	r1, r3
 8005a66:	4610      	mov	r0, r2
 8005a68:	f001 fc76 	bl	8007358 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	40012c00 	.word	0x40012c00
 8005a84:	40000400 	.word	0x40000400
 8005a88:	40000800 	.word	0x40000800
 8005a8c:	08009ac0 	.word	0x08009ac0

08005a90 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bc80      	pop	{r7}
 8005aa0:	4770      	bx	lr
	...

08005aa4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a34      	ldr	r2, [pc, #208]	; (8005b84 <HAL_TIM_PWM_Start+0xe0>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d10b      	bne.n	8005ad0 <HAL_TIM_PWM_Start+0x2c>
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d040      	beq.n	8005b40 <HAL_TIM_PWM_Start+0x9c>
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b04      	cmp	r3, #4
 8005ac2:	d03d      	beq.n	8005b40 <HAL_TIM_PWM_Start+0x9c>
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	2b08      	cmp	r3, #8
 8005ac8:	d03a      	beq.n	8005b40 <HAL_TIM_PWM_Start+0x9c>
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b0c      	cmp	r3, #12
 8005ace:	d037      	beq.n	8005b40 <HAL_TIM_PWM_Start+0x9c>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad8:	d10b      	bne.n	8005af2 <HAL_TIM_PWM_Start+0x4e>
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d02f      	beq.n	8005b40 <HAL_TIM_PWM_Start+0x9c>
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	2b04      	cmp	r3, #4
 8005ae4:	d02c      	beq.n	8005b40 <HAL_TIM_PWM_Start+0x9c>
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	2b08      	cmp	r3, #8
 8005aea:	d029      	beq.n	8005b40 <HAL_TIM_PWM_Start+0x9c>
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	2b0c      	cmp	r3, #12
 8005af0:	d026      	beq.n	8005b40 <HAL_TIM_PWM_Start+0x9c>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a24      	ldr	r2, [pc, #144]	; (8005b88 <HAL_TIM_PWM_Start+0xe4>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d10b      	bne.n	8005b14 <HAL_TIM_PWM_Start+0x70>
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d01e      	beq.n	8005b40 <HAL_TIM_PWM_Start+0x9c>
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	2b04      	cmp	r3, #4
 8005b06:	d01b      	beq.n	8005b40 <HAL_TIM_PWM_Start+0x9c>
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	2b08      	cmp	r3, #8
 8005b0c:	d018      	beq.n	8005b40 <HAL_TIM_PWM_Start+0x9c>
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2b0c      	cmp	r3, #12
 8005b12:	d015      	beq.n	8005b40 <HAL_TIM_PWM_Start+0x9c>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a1c      	ldr	r2, [pc, #112]	; (8005b8c <HAL_TIM_PWM_Start+0xe8>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d10b      	bne.n	8005b36 <HAL_TIM_PWM_Start+0x92>
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00d      	beq.n	8005b40 <HAL_TIM_PWM_Start+0x9c>
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	2b04      	cmp	r3, #4
 8005b28:	d00a      	beq.n	8005b40 <HAL_TIM_PWM_Start+0x9c>
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	2b08      	cmp	r3, #8
 8005b2e:	d007      	beq.n	8005b40 <HAL_TIM_PWM_Start+0x9c>
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	2b0c      	cmp	r3, #12
 8005b34:	d004      	beq.n	8005b40 <HAL_TIM_PWM_Start+0x9c>
 8005b36:	f240 4141 	movw	r1, #1089	; 0x441
 8005b3a:	4815      	ldr	r0, [pc, #84]	; (8005b90 <HAL_TIM_PWM_Start+0xec>)
 8005b3c:	f7fc fb46 	bl	80021cc <assert_failed>

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2201      	movs	r2, #1
 8005b46:	6839      	ldr	r1, [r7, #0]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f002 fa53 	bl	8007ff4 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a0c      	ldr	r2, [pc, #48]	; (8005b84 <HAL_TIM_PWM_Start+0xe0>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d107      	bne.n	8005b68 <HAL_TIM_PWM_Start+0xc4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	6812      	ldr	r2, [r2, #0]
 8005b60:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005b62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b66:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	6812      	ldr	r2, [r2, #0]
 8005b70:	6812      	ldr	r2, [r2, #0]
 8005b72:	f042 0201 	orr.w	r2, r2, #1
 8005b76:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	40012c00 	.word	0x40012c00
 8005b88:	40000400 	.word	0x40000400
 8005b8c:	40000800 	.word	0x40000800
 8005b90:	08009ac0 	.word	0x08009ac0

08005b94 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a46      	ldr	r2, [pc, #280]	; (8005cbc <HAL_TIM_PWM_Stop+0x128>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d10b      	bne.n	8005bc0 <HAL_TIM_PWM_Stop+0x2c>
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d040      	beq.n	8005c30 <HAL_TIM_PWM_Stop+0x9c>
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b04      	cmp	r3, #4
 8005bb2:	d03d      	beq.n	8005c30 <HAL_TIM_PWM_Stop+0x9c>
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	2b08      	cmp	r3, #8
 8005bb8:	d03a      	beq.n	8005c30 <HAL_TIM_PWM_Stop+0x9c>
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	2b0c      	cmp	r3, #12
 8005bbe:	d037      	beq.n	8005c30 <HAL_TIM_PWM_Stop+0x9c>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bc8:	d10b      	bne.n	8005be2 <HAL_TIM_PWM_Stop+0x4e>
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d02f      	beq.n	8005c30 <HAL_TIM_PWM_Stop+0x9c>
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	2b04      	cmp	r3, #4
 8005bd4:	d02c      	beq.n	8005c30 <HAL_TIM_PWM_Stop+0x9c>
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	2b08      	cmp	r3, #8
 8005bda:	d029      	beq.n	8005c30 <HAL_TIM_PWM_Stop+0x9c>
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	2b0c      	cmp	r3, #12
 8005be0:	d026      	beq.n	8005c30 <HAL_TIM_PWM_Stop+0x9c>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a36      	ldr	r2, [pc, #216]	; (8005cc0 <HAL_TIM_PWM_Stop+0x12c>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d10b      	bne.n	8005c04 <HAL_TIM_PWM_Stop+0x70>
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d01e      	beq.n	8005c30 <HAL_TIM_PWM_Stop+0x9c>
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	2b04      	cmp	r3, #4
 8005bf6:	d01b      	beq.n	8005c30 <HAL_TIM_PWM_Stop+0x9c>
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	2b08      	cmp	r3, #8
 8005bfc:	d018      	beq.n	8005c30 <HAL_TIM_PWM_Stop+0x9c>
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2b0c      	cmp	r3, #12
 8005c02:	d015      	beq.n	8005c30 <HAL_TIM_PWM_Stop+0x9c>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a2e      	ldr	r2, [pc, #184]	; (8005cc4 <HAL_TIM_PWM_Stop+0x130>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d10b      	bne.n	8005c26 <HAL_TIM_PWM_Stop+0x92>
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00d      	beq.n	8005c30 <HAL_TIM_PWM_Stop+0x9c>
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	2b04      	cmp	r3, #4
 8005c18:	d00a      	beq.n	8005c30 <HAL_TIM_PWM_Stop+0x9c>
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	2b08      	cmp	r3, #8
 8005c1e:	d007      	beq.n	8005c30 <HAL_TIM_PWM_Stop+0x9c>
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	2b0c      	cmp	r3, #12
 8005c24:	d004      	beq.n	8005c30 <HAL_TIM_PWM_Stop+0x9c>
 8005c26:	f240 4161 	movw	r1, #1121	; 0x461
 8005c2a:	4827      	ldr	r0, [pc, #156]	; (8005cc8 <HAL_TIM_PWM_Stop+0x134>)
 8005c2c:	f7fc face 	bl	80021cc <assert_failed>

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2200      	movs	r2, #0
 8005c36:	6839      	ldr	r1, [r7, #0]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f002 f9db 	bl	8007ff4 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a1e      	ldr	r2, [pc, #120]	; (8005cbc <HAL_TIM_PWM_Stop+0x128>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d117      	bne.n	8005c78 <HAL_TIM_PWM_Stop+0xe4>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6a1a      	ldr	r2, [r3, #32]
 8005c4e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005c52:	4013      	ands	r3, r2
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d10f      	bne.n	8005c78 <HAL_TIM_PWM_Stop+0xe4>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6a1a      	ldr	r2, [r3, #32]
 8005c5e:	f240 4344 	movw	r3, #1092	; 0x444
 8005c62:	4013      	ands	r3, r2
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d107      	bne.n	8005c78 <HAL_TIM_PWM_Stop+0xe4>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	6812      	ldr	r2, [r2, #0]
 8005c70:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005c72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c76:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6a1a      	ldr	r2, [r3, #32]
 8005c7e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005c82:	4013      	ands	r3, r2
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10f      	bne.n	8005ca8 <HAL_TIM_PWM_Stop+0x114>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6a1a      	ldr	r2, [r3, #32]
 8005c8e:	f240 4344 	movw	r3, #1092	; 0x444
 8005c92:	4013      	ands	r3, r2
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d107      	bne.n	8005ca8 <HAL_TIM_PWM_Stop+0x114>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	6812      	ldr	r2, [r2, #0]
 8005ca0:	6812      	ldr	r2, [r2, #0]
 8005ca2:	f022 0201 	bic.w	r2, r2, #1
 8005ca6:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3708      	adds	r7, #8
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	40012c00 	.word	0x40012c00
 8005cc0:	40000400 	.word	0x40000400
 8005cc4:	40000800 	.word	0x40000800
 8005cc8:	08009ac0 	.word	0x08009ac0

08005ccc <HAL_TIM_IC_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d101      	bne.n	8005cde <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e06f      	b.n	8005dbe <HAL_TIM_IC_Init+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a39      	ldr	r2, [pc, #228]	; (8005dc8 <HAL_TIM_IC_Init+0xfc>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d013      	beq.n	8005d10 <HAL_TIM_IC_Init+0x44>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cf0:	d00e      	beq.n	8005d10 <HAL_TIM_IC_Init+0x44>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a35      	ldr	r2, [pc, #212]	; (8005dcc <HAL_TIM_IC_Init+0x100>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d009      	beq.n	8005d10 <HAL_TIM_IC_Init+0x44>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a33      	ldr	r2, [pc, #204]	; (8005dd0 <HAL_TIM_IC_Init+0x104>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d004      	beq.n	8005d10 <HAL_TIM_IC_Init+0x44>
 8005d06:	f240 51de 	movw	r1, #1502	; 0x5de
 8005d0a:	4832      	ldr	r0, [pc, #200]	; (8005dd4 <HAL_TIM_IC_Init+0x108>)
 8005d0c:	f7fc fa5e 	bl	80021cc <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d014      	beq.n	8005d42 <HAL_TIM_IC_Init+0x76>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	2b10      	cmp	r3, #16
 8005d1e:	d010      	beq.n	8005d42 <HAL_TIM_IC_Init+0x76>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	2b20      	cmp	r3, #32
 8005d26:	d00c      	beq.n	8005d42 <HAL_TIM_IC_Init+0x76>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	2b40      	cmp	r3, #64	; 0x40
 8005d2e:	d008      	beq.n	8005d42 <HAL_TIM_IC_Init+0x76>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	2b60      	cmp	r3, #96	; 0x60
 8005d36:	d004      	beq.n	8005d42 <HAL_TIM_IC_Init+0x76>
 8005d38:	f240 51df 	movw	r1, #1503	; 0x5df
 8005d3c:	4825      	ldr	r0, [pc, #148]	; (8005dd4 <HAL_TIM_IC_Init+0x108>)
 8005d3e:	f7fc fa45 	bl	80021cc <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00e      	beq.n	8005d68 <HAL_TIM_IC_Init+0x9c>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d52:	d009      	beq.n	8005d68 <HAL_TIM_IC_Init+0x9c>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d5c:	d004      	beq.n	8005d68 <HAL_TIM_IC_Init+0x9c>
 8005d5e:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8005d62:	481c      	ldr	r0, [pc, #112]	; (8005dd4 <HAL_TIM_IC_Init+0x108>)
 8005d64:	f7fc fa32 	bl	80021cc <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d008      	beq.n	8005d82 <HAL_TIM_IC_Init+0xb6>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	2b80      	cmp	r3, #128	; 0x80
 8005d76:	d004      	beq.n	8005d82 <HAL_TIM_IC_Init+0xb6>
 8005d78:	f240 51e1 	movw	r1, #1505	; 0x5e1
 8005d7c:	4815      	ldr	r0, [pc, #84]	; (8005dd4 <HAL_TIM_IC_Init+0x108>)
 8005d7e:	f7fc fa25 	bl	80021cc <assert_failed>

  if(htim->State == HAL_TIM_STATE_RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d106      	bne.n	8005d9c <HAL_TIM_IC_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f81e 	bl	8005dd8 <HAL_TIM_IC_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2202      	movs	r2, #2
 8005da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	3304      	adds	r3, #4
 8005dac:	4619      	mov	r1, r3
 8005dae:	4610      	mov	r0, r2
 8005db0:	f001 fad2 	bl	8007358 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3708      	adds	r7, #8
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	40012c00 	.word	0x40012c00
 8005dcc:	40000400 	.word	0x40000400
 8005dd0:	40000800 	.word	0x40000800
 8005dd4:	08009ac0 	.word	0x08009ac0

08005dd8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005de0:	bf00      	nop
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bc80      	pop	{r7}
 8005de8:	4770      	bx	lr
	...

08005dec <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_IC_Start_IT (TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a50      	ldr	r2, [pc, #320]	; (8005f3c <HAL_TIM_IC_Start_IT+0x150>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d10b      	bne.n	8005e18 <HAL_TIM_IC_Start_IT+0x2c>
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d040      	beq.n	8005e88 <HAL_TIM_IC_Start_IT+0x9c>
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	2b04      	cmp	r3, #4
 8005e0a:	d03d      	beq.n	8005e88 <HAL_TIM_IC_Start_IT+0x9c>
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	2b08      	cmp	r3, #8
 8005e10:	d03a      	beq.n	8005e88 <HAL_TIM_IC_Start_IT+0x9c>
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	2b0c      	cmp	r3, #12
 8005e16:	d037      	beq.n	8005e88 <HAL_TIM_IC_Start_IT+0x9c>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e20:	d10b      	bne.n	8005e3a <HAL_TIM_IC_Start_IT+0x4e>
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d02f      	beq.n	8005e88 <HAL_TIM_IC_Start_IT+0x9c>
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	2b04      	cmp	r3, #4
 8005e2c:	d02c      	beq.n	8005e88 <HAL_TIM_IC_Start_IT+0x9c>
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	2b08      	cmp	r3, #8
 8005e32:	d029      	beq.n	8005e88 <HAL_TIM_IC_Start_IT+0x9c>
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	2b0c      	cmp	r3, #12
 8005e38:	d026      	beq.n	8005e88 <HAL_TIM_IC_Start_IT+0x9c>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a40      	ldr	r2, [pc, #256]	; (8005f40 <HAL_TIM_IC_Start_IT+0x154>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d10b      	bne.n	8005e5c <HAL_TIM_IC_Start_IT+0x70>
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d01e      	beq.n	8005e88 <HAL_TIM_IC_Start_IT+0x9c>
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	2b04      	cmp	r3, #4
 8005e4e:	d01b      	beq.n	8005e88 <HAL_TIM_IC_Start_IT+0x9c>
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	2b08      	cmp	r3, #8
 8005e54:	d018      	beq.n	8005e88 <HAL_TIM_IC_Start_IT+0x9c>
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	2b0c      	cmp	r3, #12
 8005e5a:	d015      	beq.n	8005e88 <HAL_TIM_IC_Start_IT+0x9c>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a38      	ldr	r2, [pc, #224]	; (8005f44 <HAL_TIM_IC_Start_IT+0x158>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d10b      	bne.n	8005e7e <HAL_TIM_IC_Start_IT+0x92>
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00d      	beq.n	8005e88 <HAL_TIM_IC_Start_IT+0x9c>
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	2b04      	cmp	r3, #4
 8005e70:	d00a      	beq.n	8005e88 <HAL_TIM_IC_Start_IT+0x9c>
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	2b08      	cmp	r3, #8
 8005e76:	d007      	beq.n	8005e88 <HAL_TIM_IC_Start_IT+0x9c>
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	2b0c      	cmp	r3, #12
 8005e7c:	d004      	beq.n	8005e88 <HAL_TIM_IC_Start_IT+0x9c>
 8005e7e:	f240 6171 	movw	r1, #1649	; 0x671
 8005e82:	4831      	ldr	r0, [pc, #196]	; (8005f48 <HAL_TIM_IC_Start_IT+0x15c>)
 8005e84:	f7fc f9a2 	bl	80021cc <assert_failed>

  switch (Channel)
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	2b0c      	cmp	r3, #12
 8005e8c:	d840      	bhi.n	8005f10 <HAL_TIM_IC_Start_IT+0x124>
 8005e8e:	a201      	add	r2, pc, #4	; (adr r2, 8005e94 <HAL_TIM_IC_Start_IT+0xa8>)
 8005e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e94:	08005ec9 	.word	0x08005ec9
 8005e98:	08005f11 	.word	0x08005f11
 8005e9c:	08005f11 	.word	0x08005f11
 8005ea0:	08005f11 	.word	0x08005f11
 8005ea4:	08005edb 	.word	0x08005edb
 8005ea8:	08005f11 	.word	0x08005f11
 8005eac:	08005f11 	.word	0x08005f11
 8005eb0:	08005f11 	.word	0x08005f11
 8005eb4:	08005eed 	.word	0x08005eed
 8005eb8:	08005f11 	.word	0x08005f11
 8005ebc:	08005f11 	.word	0x08005f11
 8005ec0:	08005f11 	.word	0x08005f11
 8005ec4:	08005eff 	.word	0x08005eff
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	6812      	ldr	r2, [r2, #0]
 8005ed0:	68d2      	ldr	r2, [r2, #12]
 8005ed2:	f042 0202 	orr.w	r2, r2, #2
 8005ed6:	60da      	str	r2, [r3, #12]
    }
    break;
 8005ed8:	e01b      	b.n	8005f12 <HAL_TIM_IC_Start_IT+0x126>

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	6812      	ldr	r2, [r2, #0]
 8005ee2:	68d2      	ldr	r2, [r2, #12]
 8005ee4:	f042 0204 	orr.w	r2, r2, #4
 8005ee8:	60da      	str	r2, [r3, #12]
    }
    break;
 8005eea:	e012      	b.n	8005f12 <HAL_TIM_IC_Start_IT+0x126>

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	6812      	ldr	r2, [r2, #0]
 8005ef4:	68d2      	ldr	r2, [r2, #12]
 8005ef6:	f042 0208 	orr.w	r2, r2, #8
 8005efa:	60da      	str	r2, [r3, #12]
    }
    break;
 8005efc:	e009      	b.n	8005f12 <HAL_TIM_IC_Start_IT+0x126>

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	6812      	ldr	r2, [r2, #0]
 8005f06:	68d2      	ldr	r2, [r2, #12]
 8005f08:	f042 0210 	orr.w	r2, r2, #16
 8005f0c:	60da      	str	r2, [r3, #12]
    }
    break;
 8005f0e:	e000      	b.n	8005f12 <HAL_TIM_IC_Start_IT+0x126>

    default:
    break;
 8005f10:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2201      	movs	r2, #1
 8005f18:	6839      	ldr	r1, [r7, #0]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f002 f86a 	bl	8007ff4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	6812      	ldr	r2, [r2, #0]
 8005f28:	6812      	ldr	r2, [r2, #0]
 8005f2a:	f042 0201 	orr.w	r2, r2, #1
 8005f2e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3708      	adds	r7, #8
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	40012c00 	.word	0x40012c00
 8005f40:	40000400 	.word	0x40000400
 8005f44:	40000800 	.word	0x40000800
 8005f48:	08009ac0 	.word	0x08009ac0

08005f4c <HAL_TIM_Encoder_Init>:
  * @param  htim : TIM Encoder Interface handle
  * @param  sConfig : TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b086      	sub	sp, #24
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8005f56:	2300      	movs	r3, #0
 8005f58:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0U;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60fb      	str	r3, [r7, #12]

  /* Check the TIM handle allocation */
  if(htim == NULL)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d101      	bne.n	8005f6c <HAL_TIM_Encoder_Init+0x20>
  {
    return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e166      	b.n	800623a <HAL_TIM_Encoder_Init+0x2ee>
  }

  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a73      	ldr	r2, [pc, #460]	; (8006140 <HAL_TIM_Encoder_Init+0x1f4>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d013      	beq.n	8005f9e <HAL_TIM_Encoder_Init+0x52>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f7e:	d00e      	beq.n	8005f9e <HAL_TIM_Encoder_Init+0x52>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a6f      	ldr	r2, [pc, #444]	; (8006144 <HAL_TIM_Encoder_Init+0x1f8>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d009      	beq.n	8005f9e <HAL_TIM_Encoder_Init+0x52>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a6e      	ldr	r2, [pc, #440]	; (8006148 <HAL_TIM_Encoder_Init+0x1fc>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d004      	beq.n	8005f9e <HAL_TIM_Encoder_Init+0x52>
 8005f94:	f640 01d7 	movw	r1, #2263	; 0x8d7
 8005f98:	486c      	ldr	r0, [pc, #432]	; (800614c <HAL_TIM_Encoder_Init+0x200>)
 8005f9a:	f7fc f917 	bl	80021cc <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d014      	beq.n	8005fd0 <HAL_TIM_Encoder_Init+0x84>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	2b10      	cmp	r3, #16
 8005fac:	d010      	beq.n	8005fd0 <HAL_TIM_Encoder_Init+0x84>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	2b20      	cmp	r3, #32
 8005fb4:	d00c      	beq.n	8005fd0 <HAL_TIM_Encoder_Init+0x84>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	2b40      	cmp	r3, #64	; 0x40
 8005fbc:	d008      	beq.n	8005fd0 <HAL_TIM_Encoder_Init+0x84>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	2b60      	cmp	r3, #96	; 0x60
 8005fc4:	d004      	beq.n	8005fd0 <HAL_TIM_Encoder_Init+0x84>
 8005fc6:	f640 01d8 	movw	r1, #2264	; 0x8d8
 8005fca:	4860      	ldr	r0, [pc, #384]	; (800614c <HAL_TIM_Encoder_Init+0x200>)
 8005fcc:	f7fc f8fe 	bl	80021cc <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00e      	beq.n	8005ff6 <HAL_TIM_Encoder_Init+0xaa>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fe0:	d009      	beq.n	8005ff6 <HAL_TIM_Encoder_Init+0xaa>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fea:	d004      	beq.n	8005ff6 <HAL_TIM_Encoder_Init+0xaa>
 8005fec:	f640 01d9 	movw	r1, #2265	; 0x8d9
 8005ff0:	4856      	ldr	r0, [pc, #344]	; (800614c <HAL_TIM_Encoder_Init+0x200>)
 8005ff2:	f7fc f8eb 	bl	80021cc <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d008      	beq.n	8006010 <HAL_TIM_Encoder_Init+0xc4>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	2b80      	cmp	r3, #128	; 0x80
 8006004:	d004      	beq.n	8006010 <HAL_TIM_Encoder_Init+0xc4>
 8006006:	f640 01da 	movw	r1, #2266	; 0x8da
 800600a:	4850      	ldr	r0, [pc, #320]	; (800614c <HAL_TIM_Encoder_Init+0x200>)
 800600c:	f7fc f8de 	bl	80021cc <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d00c      	beq.n	8006032 <HAL_TIM_Encoder_Init+0xe6>
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2b02      	cmp	r3, #2
 800601e:	d008      	beq.n	8006032 <HAL_TIM_Encoder_Init+0xe6>
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2b03      	cmp	r3, #3
 8006026:	d004      	beq.n	8006032 <HAL_TIM_Encoder_Init+0xe6>
 8006028:	f640 01db 	movw	r1, #2267	; 0x8db
 800602c:	4847      	ldr	r0, [pc, #284]	; (800614c <HAL_TIM_Encoder_Init+0x200>)
 800602e:	f7fc f8cd 	bl	80021cc <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	2b01      	cmp	r3, #1
 8006038:	d00c      	beq.n	8006054 <HAL_TIM_Encoder_Init+0x108>
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	2b02      	cmp	r3, #2
 8006040:	d008      	beq.n	8006054 <HAL_TIM_Encoder_Init+0x108>
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	2b03      	cmp	r3, #3
 8006048:	d004      	beq.n	8006054 <HAL_TIM_Encoder_Init+0x108>
 800604a:	f640 01dc 	movw	r1, #2268	; 0x8dc
 800604e:	483f      	ldr	r0, [pc, #252]	; (800614c <HAL_TIM_Encoder_Init+0x200>)
 8006050:	f7fc f8bc 	bl	80021cc <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d00c      	beq.n	8006076 <HAL_TIM_Encoder_Init+0x12a>
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	2b02      	cmp	r3, #2
 8006062:	d008      	beq.n	8006076 <HAL_TIM_Encoder_Init+0x12a>
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	699b      	ldr	r3, [r3, #24]
 8006068:	2b03      	cmp	r3, #3
 800606a:	d004      	beq.n	8006076 <HAL_TIM_Encoder_Init+0x12a>
 800606c:	f640 01dd 	movw	r1, #2269	; 0x8dd
 8006070:	4836      	ldr	r0, [pc, #216]	; (800614c <HAL_TIM_Encoder_Init+0x200>)
 8006072:	f7fc f8ab 	bl	80021cc <assert_failed>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d008      	beq.n	8006090 <HAL_TIM_Encoder_Init+0x144>
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	2b02      	cmp	r3, #2
 8006084:	d004      	beq.n	8006090 <HAL_TIM_Encoder_Init+0x144>
 8006086:	f640 01de 	movw	r1, #2270	; 0x8de
 800608a:	4830      	ldr	r0, [pc, #192]	; (800614c <HAL_TIM_Encoder_Init+0x200>)
 800608c:	f7fc f89e 	bl	80021cc <assert_failed>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC2Polarity));
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	695b      	ldr	r3, [r3, #20]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d008      	beq.n	80060aa <HAL_TIM_Encoder_Init+0x15e>
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	2b02      	cmp	r3, #2
 800609e:	d004      	beq.n	80060aa <HAL_TIM_Encoder_Init+0x15e>
 80060a0:	f640 01df 	movw	r1, #2271	; 0x8df
 80060a4:	4829      	ldr	r0, [pc, #164]	; (800614c <HAL_TIM_Encoder_Init+0x200>)
 80060a6:	f7fc f891 	bl	80021cc <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d010      	beq.n	80060d4 <HAL_TIM_Encoder_Init+0x188>
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	2b04      	cmp	r3, #4
 80060b8:	d00c      	beq.n	80060d4 <HAL_TIM_Encoder_Init+0x188>
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	2b08      	cmp	r3, #8
 80060c0:	d008      	beq.n	80060d4 <HAL_TIM_Encoder_Init+0x188>
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	2b0c      	cmp	r3, #12
 80060c8:	d004      	beq.n	80060d4 <HAL_TIM_Encoder_Init+0x188>
 80060ca:	f44f 610e 	mov.w	r1, #2272	; 0x8e0
 80060ce:	481f      	ldr	r0, [pc, #124]	; (800614c <HAL_TIM_Encoder_Init+0x200>)
 80060d0:	f7fc f87c 	bl	80021cc <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	69db      	ldr	r3, [r3, #28]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d010      	beq.n	80060fe <HAL_TIM_Encoder_Init+0x1b2>
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	69db      	ldr	r3, [r3, #28]
 80060e0:	2b04      	cmp	r3, #4
 80060e2:	d00c      	beq.n	80060fe <HAL_TIM_Encoder_Init+0x1b2>
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	69db      	ldr	r3, [r3, #28]
 80060e8:	2b08      	cmp	r3, #8
 80060ea:	d008      	beq.n	80060fe <HAL_TIM_Encoder_Init+0x1b2>
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	69db      	ldr	r3, [r3, #28]
 80060f0:	2b0c      	cmp	r3, #12
 80060f2:	d004      	beq.n	80060fe <HAL_TIM_Encoder_Init+0x1b2>
 80060f4:	f640 01e1 	movw	r1, #2273	; 0x8e1
 80060f8:	4814      	ldr	r0, [pc, #80]	; (800614c <HAL_TIM_Encoder_Init+0x200>)
 80060fa:	f7fc f867 	bl	80021cc <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	2b0f      	cmp	r3, #15
 8006104:	d904      	bls.n	8006110 <HAL_TIM_Encoder_Init+0x1c4>
 8006106:	f640 01e2 	movw	r1, #2274	; 0x8e2
 800610a:	4810      	ldr	r0, [pc, #64]	; (800614c <HAL_TIM_Encoder_Init+0x200>)
 800610c:	f7fc f85e 	bl	80021cc <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	6a1b      	ldr	r3, [r3, #32]
 8006114:	2b0f      	cmp	r3, #15
 8006116:	d904      	bls.n	8006122 <HAL_TIM_Encoder_Init+0x1d6>
 8006118:	f640 01e3 	movw	r1, #2275	; 0x8e3
 800611c:	480b      	ldr	r0, [pc, #44]	; (800614c <HAL_TIM_Encoder_Init+0x200>)
 800611e:	f7fc f855 	bl	80021cc <assert_failed>

  if(htim->State == HAL_TIM_STATE_RESET)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b00      	cmp	r3, #0
 800612c:	d110      	bne.n	8006150 <HAL_TIM_Encoder_Init+0x204>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f7fc fb2c 	bl	8002794 <HAL_TIM_Encoder_MspInit>
 800613c:	e008      	b.n	8006150 <HAL_TIM_Encoder_Init+0x204>
 800613e:	bf00      	nop
 8006140:	40012c00 	.word	0x40012c00
 8006144:	40000400 	.word	0x40000400
 8006148:	40000800 	.word	0x40000800
 800614c:	08009ac0 	.word	0x08009ac0
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2202      	movs	r2, #2
 8006154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	6812      	ldr	r2, [r2, #0]
 8006160:	6892      	ldr	r2, [r2, #8]
 8006162:	f022 0207 	bic.w	r2, r2, #7
 8006166:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	3304      	adds	r3, #4
 8006170:	4619      	mov	r1, r3
 8006172:	4610      	mov	r0, r2
 8006174:	f001 f8f0 	bl	8007358 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	4313      	orrs	r3, r2
 8006198:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061a0:	f023 0303 	bic.w	r3, r3, #3
 80061a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	689a      	ldr	r2, [r3, #8]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	021b      	lsls	r3, r3, #8
 80061b0:	4313      	orrs	r3, r2
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	613b      	str	r3, [r7, #16]

  /* Set the the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80061be:	f023 030c 	bic.w	r3, r3, #12
 80061c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	68da      	ldr	r2, [r3, #12]
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	69db      	ldr	r3, [r3, #28]
 80061d8:	021b      	lsls	r3, r3, #8
 80061da:	4313      	orrs	r3, r2
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	4313      	orrs	r3, r2
 80061e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	011a      	lsls	r2, r3, #4
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	6a1b      	ldr	r3, [r3, #32]
 80061ec:	031b      	lsls	r3, r3, #12
 80061ee:	4313      	orrs	r3, r2
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80061fc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006204:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	685a      	ldr	r2, [r3, #4]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	011b      	lsls	r3, r3, #4
 8006210:	4313      	orrs	r3, r2
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	4313      	orrs	r3, r2
 8006216:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	693a      	ldr	r2, [r7, #16]
 8006226:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3718      	adds	r7, #24
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop

08006244 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a24      	ldr	r2, [pc, #144]	; (80062e4 <HAL_TIM_Encoder_Start+0xa0>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d013      	beq.n	8006280 <HAL_TIM_Encoder_Start+0x3c>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006260:	d00e      	beq.n	8006280 <HAL_TIM_Encoder_Start+0x3c>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a20      	ldr	r2, [pc, #128]	; (80062e8 <HAL_TIM_Encoder_Start+0xa4>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d009      	beq.n	8006280 <HAL_TIM_Encoder_Start+0x3c>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a1e      	ldr	r2, [pc, #120]	; (80062ec <HAL_TIM_Encoder_Start+0xa8>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d004      	beq.n	8006280 <HAL_TIM_Encoder_Start+0x3c>
 8006276:	f640 1166 	movw	r1, #2406	; 0x966
 800627a:	481d      	ldr	r0, [pc, #116]	; (80062f0 <HAL_TIM_Encoder_Start+0xac>)
 800627c:	f7fb ffa6 	bl	80021cc <assert_failed>

  /* Enable the encoder interface channels */
  switch (Channel)
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d002      	beq.n	800628c <HAL_TIM_Encoder_Start+0x48>
 8006286:	2b04      	cmp	r3, #4
 8006288:	d008      	beq.n	800629c <HAL_TIM_Encoder_Start+0x58>
 800628a:	e00f      	b.n	80062ac <HAL_TIM_Encoder_Start+0x68>
  {
    case TIM_CHANNEL_1:
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2201      	movs	r2, #1
 8006292:	2100      	movs	r1, #0
 8006294:	4618      	mov	r0, r3
 8006296:	f001 fead 	bl	8007ff4 <TIM_CCxChannelCmd>
      break;
 800629a:	e016      	b.n	80062ca <HAL_TIM_Encoder_Start+0x86>
  }
    case TIM_CHANNEL_2:
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2201      	movs	r2, #1
 80062a2:	2104      	movs	r1, #4
 80062a4:	4618      	mov	r0, r3
 80062a6:	f001 fea5 	bl	8007ff4 <TIM_CCxChannelCmd>
      break;
 80062aa:	e00e      	b.n	80062ca <HAL_TIM_Encoder_Start+0x86>
  }
    default :
  {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2201      	movs	r2, #1
 80062b2:	2100      	movs	r1, #0
 80062b4:	4618      	mov	r0, r3
 80062b6:	f001 fe9d 	bl	8007ff4 <TIM_CCxChannelCmd>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2201      	movs	r2, #1
 80062c0:	2104      	movs	r1, #4
 80062c2:	4618      	mov	r0, r3
 80062c4:	f001 fe96 	bl	8007ff4 <TIM_CCxChannelCmd>
     break;
 80062c8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	6812      	ldr	r2, [r2, #0]
 80062d2:	6812      	ldr	r2, [r2, #0]
 80062d4:	f042 0201 	orr.w	r2, r2, #1
 80062d8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	40012c00 	.word	0x40012c00
 80062e8:	40000400 	.word	0x40000400
 80062ec:	40000800 	.word	0x40000800
 80062f0:	08009ac0 	.word	0x08009ac0

080062f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	f003 0302 	and.w	r3, r3, #2
 8006306:	2b02      	cmp	r3, #2
 8006308:	d122      	bne.n	8006350 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	f003 0302 	and.w	r3, r3, #2
 8006314:	2b02      	cmp	r3, #2
 8006316:	d11b      	bne.n	8006350 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f06f 0202 	mvn.w	r2, #2
 8006320:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2201      	movs	r2, #1
 8006326:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	f003 0303 	and.w	r3, r3, #3
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f7fb fe84 	bl	8002044 <HAL_TIM_IC_CaptureCallback>
 800633c:	e005      	b.n	800634a <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 ffee 	bl	8007320 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 fff4 	bl	8007332 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	f003 0304 	and.w	r3, r3, #4
 800635a:	2b04      	cmp	r3, #4
 800635c:	d122      	bne.n	80063a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	f003 0304 	and.w	r3, r3, #4
 8006368:	2b04      	cmp	r3, #4
 800636a:	d11b      	bne.n	80063a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f06f 0204 	mvn.w	r2, #4
 8006374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2202      	movs	r2, #2
 800637a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006386:	2b00      	cmp	r3, #0
 8006388:	d003      	beq.n	8006392 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f7fb fe5a 	bl	8002044 <HAL_TIM_IC_CaptureCallback>
 8006390:	e005      	b.n	800639e <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 ffc4 	bl	8007320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 ffca 	bl	8007332 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	f003 0308 	and.w	r3, r3, #8
 80063ae:	2b08      	cmp	r3, #8
 80063b0:	d122      	bne.n	80063f8 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	f003 0308 	and.w	r3, r3, #8
 80063bc:	2b08      	cmp	r3, #8
 80063be:	d11b      	bne.n	80063f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f06f 0208 	mvn.w	r2, #8
 80063c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2204      	movs	r2, #4
 80063ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	69db      	ldr	r3, [r3, #28]
 80063d6:	f003 0303 	and.w	r3, r3, #3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d003      	beq.n	80063e6 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f7fb fe30 	bl	8002044 <HAL_TIM_IC_CaptureCallback>
 80063e4:	e005      	b.n	80063f2 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 ff9a 	bl	8007320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 ffa0 	bl	8007332 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	f003 0310 	and.w	r3, r3, #16
 8006402:	2b10      	cmp	r3, #16
 8006404:	d122      	bne.n	800644c <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	f003 0310 	and.w	r3, r3, #16
 8006410:	2b10      	cmp	r3, #16
 8006412:	d11b      	bne.n	800644c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f06f 0210 	mvn.w	r2, #16
 800641c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2208      	movs	r2, #8
 8006422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	69db      	ldr	r3, [r3, #28]
 800642a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800642e:	2b00      	cmp	r3, #0
 8006430:	d003      	beq.n	800643a <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7fb fe06 	bl	8002044 <HAL_TIM_IC_CaptureCallback>
 8006438:	e005      	b.n	8006446 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 ff70 	bl	8007320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 ff76 	bl	8007332 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	2b01      	cmp	r3, #1
 8006458:	d10e      	bne.n	8006478 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	f003 0301 	and.w	r3, r3, #1
 8006464:	2b01      	cmp	r3, #1
 8006466:	d107      	bne.n	8006478 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f06f 0201 	mvn.w	r2, #1
 8006470:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f7fb fd5a 	bl	8001f2c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006482:	2b80      	cmp	r3, #128	; 0x80
 8006484:	d10e      	bne.n	80064a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006490:	2b80      	cmp	r3, #128	; 0x80
 8006492:	d107      	bne.n	80064a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800649c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f001 ff65 	bl	800836e <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ae:	2b40      	cmp	r3, #64	; 0x40
 80064b0:	d10e      	bne.n	80064d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064bc:	2b40      	cmp	r3, #64	; 0x40
 80064be:	d107      	bne.n	80064d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80064c8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 ff3a 	bl	8007344 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	f003 0320 	and.w	r3, r3, #32
 80064da:	2b20      	cmp	r3, #32
 80064dc:	d10e      	bne.n	80064fc <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	f003 0320 	and.w	r3, r3, #32
 80064e8:	2b20      	cmp	r3, #32
 80064ea:	d107      	bne.n	80064fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f06f 0220 	mvn.w	r2, #32
 80064f4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f001 ff30 	bl	800835c <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80064fc:	bf00      	nop
 80064fe:	3708      	adds	r7, #8
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef* sConfig, uint32_t Channel)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a78      	ldr	r2, [pc, #480]	; (80066f8 <HAL_TIM_IC_ConfigChannel+0x1f4>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d013      	beq.n	8006542 <HAL_TIM_IC_ConfigChannel+0x3e>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006522:	d00e      	beq.n	8006542 <HAL_TIM_IC_ConfigChannel+0x3e>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a74      	ldr	r2, [pc, #464]	; (80066fc <HAL_TIM_IC_ConfigChannel+0x1f8>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d009      	beq.n	8006542 <HAL_TIM_IC_ConfigChannel+0x3e>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a73      	ldr	r2, [pc, #460]	; (8006700 <HAL_TIM_IC_ConfigChannel+0x1fc>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d004      	beq.n	8006542 <HAL_TIM_IC_ConfigChannel+0x3e>
 8006538:	f640 31bd 	movw	r1, #3005	; 0xbbd
 800653c:	4871      	ldr	r0, [pc, #452]	; (8006704 <HAL_TIM_IC_ConfigChannel+0x200>)
 800653e:	f7fb fe45 	bl	80021cc <assert_failed>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d008      	beq.n	800655c <HAL_TIM_IC_ConfigChannel+0x58>
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2b02      	cmp	r3, #2
 8006550:	d004      	beq.n	800655c <HAL_TIM_IC_ConfigChannel+0x58>
 8006552:	f640 31be 	movw	r1, #3006	; 0xbbe
 8006556:	486b      	ldr	r0, [pc, #428]	; (8006704 <HAL_TIM_IC_ConfigChannel+0x200>)
 8006558:	f7fb fe38 	bl	80021cc <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d00c      	beq.n	800657e <HAL_TIM_IC_ConfigChannel+0x7a>
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	2b02      	cmp	r3, #2
 800656a:	d008      	beq.n	800657e <HAL_TIM_IC_ConfigChannel+0x7a>
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	2b03      	cmp	r3, #3
 8006572:	d004      	beq.n	800657e <HAL_TIM_IC_ConfigChannel+0x7a>
 8006574:	f640 31bf 	movw	r1, #3007	; 0xbbf
 8006578:	4862      	ldr	r0, [pc, #392]	; (8006704 <HAL_TIM_IC_ConfigChannel+0x200>)
 800657a:	f7fb fe27 	bl	80021cc <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d010      	beq.n	80065a8 <HAL_TIM_IC_ConfigChannel+0xa4>
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	2b04      	cmp	r3, #4
 800658c:	d00c      	beq.n	80065a8 <HAL_TIM_IC_ConfigChannel+0xa4>
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	2b08      	cmp	r3, #8
 8006594:	d008      	beq.n	80065a8 <HAL_TIM_IC_ConfigChannel+0xa4>
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	2b0c      	cmp	r3, #12
 800659c:	d004      	beq.n	80065a8 <HAL_TIM_IC_ConfigChannel+0xa4>
 800659e:	f44f 613c 	mov.w	r1, #3008	; 0xbc0
 80065a2:	4858      	ldr	r0, [pc, #352]	; (8006704 <HAL_TIM_IC_ConfigChannel+0x200>)
 80065a4:	f7fb fe12 	bl	80021cc <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	2b0f      	cmp	r3, #15
 80065ae:	d904      	bls.n	80065ba <HAL_TIM_IC_ConfigChannel+0xb6>
 80065b0:	f640 31c1 	movw	r1, #3009	; 0xbc1
 80065b4:	4853      	ldr	r0, [pc, #332]	; (8006704 <HAL_TIM_IC_ConfigChannel+0x200>)
 80065b6:	f7fb fe09 	bl	80021cc <assert_failed>

  __HAL_LOCK(htim);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d101      	bne.n	80065c8 <HAL_TIM_IC_ConfigChannel+0xc4>
 80065c4:	2302      	movs	r3, #2
 80065c6:	e0dd      	b.n	8006784 <HAL_TIM_IC_ConfigChannel+0x280>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2202      	movs	r2, #2
 80065d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d11b      	bne.n	8006616 <HAL_TIM_IC_ConfigChannel+0x112>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6818      	ldr	r0, [r3, #0]
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	6819      	ldr	r1, [r3, #0]
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	685a      	ldr	r2, [r3, #4]
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	f001 fb3f 	bl	8007c70 <TIM_TI1_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	6812      	ldr	r2, [r2, #0]
 80065fa:	6992      	ldr	r2, [r2, #24]
 80065fc:	f022 020c 	bic.w	r2, r2, #12
 8006600:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	6812      	ldr	r2, [r2, #0]
 800660a:	6991      	ldr	r1, [r2, #24]
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	6892      	ldr	r2, [r2, #8]
 8006610:	430a      	orrs	r2, r1
 8006612:	619a      	str	r2, [r3, #24]
 8006614:	e0ad      	b.n	8006772 <HAL_TIM_IC_ConfigChannel+0x26e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2b04      	cmp	r3, #4
 800661a:	d135      	bne.n	8006688 <HAL_TIM_IC_ConfigChannel+0x184>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a35      	ldr	r2, [pc, #212]	; (80066f8 <HAL_TIM_IC_ConfigChannel+0x1f4>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d013      	beq.n	800664e <HAL_TIM_IC_ConfigChannel+0x14a>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800662e:	d00e      	beq.n	800664e <HAL_TIM_IC_ConfigChannel+0x14a>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a31      	ldr	r2, [pc, #196]	; (80066fc <HAL_TIM_IC_ConfigChannel+0x1f8>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d009      	beq.n	800664e <HAL_TIM_IC_ConfigChannel+0x14a>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a30      	ldr	r2, [pc, #192]	; (8006700 <HAL_TIM_IC_ConfigChannel+0x1fc>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d004      	beq.n	800664e <HAL_TIM_IC_ConfigChannel+0x14a>
 8006644:	f640 31d8 	movw	r1, #3032	; 0xbd8
 8006648:	482e      	ldr	r0, [pc, #184]	; (8006704 <HAL_TIM_IC_ConfigChannel+0x200>)
 800664a:	f7fb fdbf 	bl	80021cc <assert_failed>

    TIM_TI2_SetConfig(htim->Instance,
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6818      	ldr	r0, [r3, #0]
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	6819      	ldr	r1, [r3, #0]
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	f001 fb97 	bl	8007d90 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	6812      	ldr	r2, [r2, #0]
 800666a:	6992      	ldr	r2, [r2, #24]
 800666c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006670:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	6812      	ldr	r2, [r2, #0]
 800667a:	6991      	ldr	r1, [r2, #24]
 800667c:	68ba      	ldr	r2, [r7, #8]
 800667e:	6892      	ldr	r2, [r2, #8]
 8006680:	0212      	lsls	r2, r2, #8
 8006682:	430a      	orrs	r2, r1
 8006684:	619a      	str	r2, [r3, #24]
 8006686:	e074      	b.n	8006772 <HAL_TIM_IC_ConfigChannel+0x26e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b08      	cmp	r3, #8
 800668c:	d13c      	bne.n	8006708 <HAL_TIM_IC_ConfigChannel+0x204>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a19      	ldr	r2, [pc, #100]	; (80066f8 <HAL_TIM_IC_ConfigChannel+0x1f4>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d013      	beq.n	80066c0 <HAL_TIM_IC_ConfigChannel+0x1bc>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066a0:	d00e      	beq.n	80066c0 <HAL_TIM_IC_ConfigChannel+0x1bc>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a15      	ldr	r2, [pc, #84]	; (80066fc <HAL_TIM_IC_ConfigChannel+0x1f8>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d009      	beq.n	80066c0 <HAL_TIM_IC_ConfigChannel+0x1bc>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a13      	ldr	r2, [pc, #76]	; (8006700 <HAL_TIM_IC_ConfigChannel+0x1fc>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d004      	beq.n	80066c0 <HAL_TIM_IC_ConfigChannel+0x1bc>
 80066b6:	f640 31e8 	movw	r1, #3048	; 0xbe8
 80066ba:	4812      	ldr	r0, [pc, #72]	; (8006704 <HAL_TIM_IC_ConfigChannel+0x200>)
 80066bc:	f7fb fd86 	bl	80021cc <assert_failed>

    TIM_TI3_SetConfig(htim->Instance,
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6818      	ldr	r0, [r3, #0]
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	6819      	ldr	r1, [r3, #0]
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	f001 fbd1 	bl	8007e76 <TIM_TI3_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	6812      	ldr	r2, [r2, #0]
 80066dc:	69d2      	ldr	r2, [r2, #28]
 80066de:	f022 020c 	bic.w	r2, r2, #12
 80066e2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	6812      	ldr	r2, [r2, #0]
 80066ec:	69d1      	ldr	r1, [r2, #28]
 80066ee:	68ba      	ldr	r2, [r7, #8]
 80066f0:	6892      	ldr	r2, [r2, #8]
 80066f2:	430a      	orrs	r2, r1
 80066f4:	61da      	str	r2, [r3, #28]
 80066f6:	e03c      	b.n	8006772 <HAL_TIM_IC_ConfigChannel+0x26e>
 80066f8:	40012c00 	.word	0x40012c00
 80066fc:	40000400 	.word	0x40000400
 8006700:	40000800 	.word	0x40000800
 8006704:	08009ac0 	.word	0x08009ac0
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a1f      	ldr	r2, [pc, #124]	; (800678c <HAL_TIM_IC_ConfigChannel+0x288>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d013      	beq.n	800673a <HAL_TIM_IC_ConfigChannel+0x236>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800671a:	d00e      	beq.n	800673a <HAL_TIM_IC_ConfigChannel+0x236>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a1b      	ldr	r2, [pc, #108]	; (8006790 <HAL_TIM_IC_ConfigChannel+0x28c>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d009      	beq.n	800673a <HAL_TIM_IC_ConfigChannel+0x236>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a1a      	ldr	r2, [pc, #104]	; (8006794 <HAL_TIM_IC_ConfigChannel+0x290>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d004      	beq.n	800673a <HAL_TIM_IC_ConfigChannel+0x236>
 8006730:	f640 31f8 	movw	r1, #3064	; 0xbf8
 8006734:	4818      	ldr	r0, [pc, #96]	; (8006798 <HAL_TIM_IC_ConfigChannel+0x294>)
 8006736:	f7fb fd49 	bl	80021cc <assert_failed>

    TIM_TI4_SetConfig(htim->Instance,
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6818      	ldr	r0, [r3, #0]
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	6819      	ldr	r1, [r3, #0]
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	685a      	ldr	r2, [r3, #4]
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	f001 fbd3 	bl	8007ef4 <TIM_TI4_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	6812      	ldr	r2, [r2, #0]
 8006756:	69d2      	ldr	r2, [r2, #28]
 8006758:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800675c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	6812      	ldr	r2, [r2, #0]
 8006766:	69d1      	ldr	r1, [r2, #28]
 8006768:	68ba      	ldr	r2, [r7, #8]
 800676a:	6892      	ldr	r2, [r2, #8]
 800676c:	0212      	lsls	r2, r2, #8
 800676e:	430a      	orrs	r2, r1
 8006770:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	40012c00 	.word	0x40012c00
 8006790:	40000400 	.word	0x40000400
 8006794:	40000800 	.word	0x40000800
 8006798:	08009ac0 	.word	0x08009ac0

0800679c <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d101      	bne.n	80067b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80067b2:	2302      	movs	r3, #2
 80067b4:	e15c      	b.n	8006a70 <HAL_TIM_PWM_ConfigChannel+0x2d4>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d010      	beq.n	80067e6 <HAL_TIM_PWM_ConfigChannel+0x4a>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b04      	cmp	r3, #4
 80067c8:	d00d      	beq.n	80067e6 <HAL_TIM_PWM_ConfigChannel+0x4a>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2b08      	cmp	r3, #8
 80067ce:	d00a      	beq.n	80067e6 <HAL_TIM_PWM_ConfigChannel+0x4a>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b0c      	cmp	r3, #12
 80067d4:	d007      	beq.n	80067e6 <HAL_TIM_PWM_ConfigChannel+0x4a>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2b18      	cmp	r3, #24
 80067da:	d004      	beq.n	80067e6 <HAL_TIM_PWM_ConfigChannel+0x4a>
 80067dc:	f640 411f 	movw	r1, #3103	; 0xc1f
 80067e0:	489a      	ldr	r0, [pc, #616]	; (8006a4c <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 80067e2:	f7fb fcf3 	bl	80021cc <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2b60      	cmp	r3, #96	; 0x60
 80067ec:	d008      	beq.n	8006800 <HAL_TIM_PWM_ConfigChannel+0x64>
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2b70      	cmp	r3, #112	; 0x70
 80067f4:	d004      	beq.n	8006800 <HAL_TIM_PWM_ConfigChannel+0x64>
 80067f6:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 80067fa:	4894      	ldr	r0, [pc, #592]	; (8006a4c <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 80067fc:	f7fb fce6 	bl	80021cc <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d008      	beq.n	800681a <HAL_TIM_PWM_ConfigChannel+0x7e>
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	2b02      	cmp	r3, #2
 800680e:	d004      	beq.n	800681a <HAL_TIM_PWM_ConfigChannel+0x7e>
 8006810:	f640 4121 	movw	r1, #3105	; 0xc21
 8006814:	488d      	ldr	r0, [pc, #564]	; (8006a4c <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8006816:	f7fb fcd9 	bl	80021cc <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d008      	beq.n	8006834 <HAL_TIM_PWM_ConfigChannel+0x98>
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	2b04      	cmp	r3, #4
 8006828:	d004      	beq.n	8006834 <HAL_TIM_PWM_ConfigChannel+0x98>
 800682a:	f640 4122 	movw	r1, #3106	; 0xc22
 800682e:	4887      	ldr	r0, [pc, #540]	; (8006a4c <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8006830:	f7fb fccc 	bl	80021cc <assert_failed>

  htim->State = HAL_TIM_STATE_BUSY;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2202      	movs	r2, #2
 8006838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2b0c      	cmp	r3, #12
 8006840:	f200 810c 	bhi.w	8006a5c <HAL_TIM_PWM_ConfigChannel+0x2c0>
 8006844:	a201      	add	r2, pc, #4	; (adr r2, 800684c <HAL_TIM_PWM_ConfigChannel+0xb0>)
 8006846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800684a:	bf00      	nop
 800684c:	08006881 	.word	0x08006881
 8006850:	08006a5d 	.word	0x08006a5d
 8006854:	08006a5d 	.word	0x08006a5d
 8006858:	08006a5d 	.word	0x08006a5d
 800685c:	080068f3 	.word	0x080068f3
 8006860:	08006a5d 	.word	0x08006a5d
 8006864:	08006a5d 	.word	0x08006a5d
 8006868:	08006a5d 	.word	0x08006a5d
 800686c:	08006967 	.word	0x08006967
 8006870:	08006a5d 	.word	0x08006a5d
 8006874:	08006a5d 	.word	0x08006a5d
 8006878:	08006a5d 	.word	0x08006a5d
 800687c:	080069d9 	.word	0x080069d9
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a72      	ldr	r2, [pc, #456]	; (8006a50 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d013      	beq.n	80068b2 <HAL_TIM_PWM_ConfigChannel+0x116>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006892:	d00e      	beq.n	80068b2 <HAL_TIM_PWM_ConfigChannel+0x116>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a6e      	ldr	r2, [pc, #440]	; (8006a54 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d009      	beq.n	80068b2 <HAL_TIM_PWM_ConfigChannel+0x116>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a6d      	ldr	r2, [pc, #436]	; (8006a58 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d004      	beq.n	80068b2 <HAL_TIM_PWM_ConfigChannel+0x116>
 80068a8:	f640 412a 	movw	r1, #3114	; 0xc2a
 80068ac:	4867      	ldr	r0, [pc, #412]	; (8006a4c <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 80068ae:	f7fb fc8d 	bl	80021cc <assert_failed>
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68b9      	ldr	r1, [r7, #8]
 80068b8:	4618      	mov	r0, r3
 80068ba:	f000 fdb3 	bl	8007424 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	6812      	ldr	r2, [r2, #0]
 80068c6:	6992      	ldr	r2, [r2, #24]
 80068c8:	f042 0208 	orr.w	r2, r2, #8
 80068cc:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	6812      	ldr	r2, [r2, #0]
 80068d6:	6992      	ldr	r2, [r2, #24]
 80068d8:	f022 0204 	bic.w	r2, r2, #4
 80068dc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	6812      	ldr	r2, [r2, #0]
 80068e6:	6991      	ldr	r1, [r2, #24]
 80068e8:	68ba      	ldr	r2, [r7, #8]
 80068ea:	6912      	ldr	r2, [r2, #16]
 80068ec:	430a      	orrs	r2, r1
 80068ee:	619a      	str	r2, [r3, #24]
    }
    break;
 80068f0:	e0b5      	b.n	8006a5e <HAL_TIM_PWM_ConfigChannel+0x2c2>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a56      	ldr	r2, [pc, #344]	; (8006a50 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d013      	beq.n	8006924 <HAL_TIM_PWM_ConfigChannel+0x188>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006904:	d00e      	beq.n	8006924 <HAL_TIM_PWM_ConfigChannel+0x188>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a52      	ldr	r2, [pc, #328]	; (8006a54 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d009      	beq.n	8006924 <HAL_TIM_PWM_ConfigChannel+0x188>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a50      	ldr	r2, [pc, #320]	; (8006a58 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d004      	beq.n	8006924 <HAL_TIM_PWM_ConfigChannel+0x188>
 800691a:	f640 4139 	movw	r1, #3129	; 0xc39
 800691e:	484b      	ldr	r0, [pc, #300]	; (8006a4c <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8006920:	f7fb fc54 	bl	80021cc <assert_failed>
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68b9      	ldr	r1, [r7, #8]
 800692a:	4618      	mov	r0, r3
 800692c:	f000 fe10 	bl	8007550 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	6812      	ldr	r2, [r2, #0]
 8006938:	6992      	ldr	r2, [r2, #24]
 800693a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800693e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	6812      	ldr	r2, [r2, #0]
 8006948:	6992      	ldr	r2, [r2, #24]
 800694a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800694e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	6812      	ldr	r2, [r2, #0]
 8006958:	6991      	ldr	r1, [r2, #24]
 800695a:	68ba      	ldr	r2, [r7, #8]
 800695c:	6912      	ldr	r2, [r2, #16]
 800695e:	0212      	lsls	r2, r2, #8
 8006960:	430a      	orrs	r2, r1
 8006962:	619a      	str	r2, [r3, #24]
    }
    break;
 8006964:	e07b      	b.n	8006a5e <HAL_TIM_PWM_ConfigChannel+0x2c2>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a39      	ldr	r2, [pc, #228]	; (8006a50 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d013      	beq.n	8006998 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006978:	d00e      	beq.n	8006998 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a35      	ldr	r2, [pc, #212]	; (8006a54 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d009      	beq.n	8006998 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a33      	ldr	r2, [pc, #204]	; (8006a58 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d004      	beq.n	8006998 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800698e:	f640 4148 	movw	r1, #3144	; 0xc48
 8006992:	482e      	ldr	r0, [pc, #184]	; (8006a4c <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8006994:	f7fb fc1a 	bl	80021cc <assert_failed>
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68b9      	ldr	r1, [r7, #8]
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 fe70 	bl	8007684 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	6812      	ldr	r2, [r2, #0]
 80069ac:	69d2      	ldr	r2, [r2, #28]
 80069ae:	f042 0208 	orr.w	r2, r2, #8
 80069b2:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	6812      	ldr	r2, [r2, #0]
 80069bc:	69d2      	ldr	r2, [r2, #28]
 80069be:	f022 0204 	bic.w	r2, r2, #4
 80069c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	6812      	ldr	r2, [r2, #0]
 80069cc:	69d1      	ldr	r1, [r2, #28]
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	6912      	ldr	r2, [r2, #16]
 80069d2:	430a      	orrs	r2, r1
 80069d4:	61da      	str	r2, [r3, #28]
    }
    break;
 80069d6:	e042      	b.n	8006a5e <HAL_TIM_PWM_ConfigChannel+0x2c2>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a1c      	ldr	r2, [pc, #112]	; (8006a50 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d013      	beq.n	8006a0a <HAL_TIM_PWM_ConfigChannel+0x26e>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069ea:	d00e      	beq.n	8006a0a <HAL_TIM_PWM_ConfigChannel+0x26e>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a18      	ldr	r2, [pc, #96]	; (8006a54 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d009      	beq.n	8006a0a <HAL_TIM_PWM_ConfigChannel+0x26e>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a17      	ldr	r2, [pc, #92]	; (8006a58 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d004      	beq.n	8006a0a <HAL_TIM_PWM_ConfigChannel+0x26e>
 8006a00:	f640 4157 	movw	r1, #3159	; 0xc57
 8006a04:	4811      	ldr	r0, [pc, #68]	; (8006a4c <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8006a06:	f7fb fbe1 	bl	80021cc <assert_failed>
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68b9      	ldr	r1, [r7, #8]
 8006a10:	4618      	mov	r0, r3
 8006a12:	f000 fed1 	bl	80077b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	6812      	ldr	r2, [r2, #0]
 8006a1e:	69d2      	ldr	r2, [r2, #28]
 8006a20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a24:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	6812      	ldr	r2, [r2, #0]
 8006a2e:	69d2      	ldr	r2, [r2, #28]
 8006a30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	6812      	ldr	r2, [r2, #0]
 8006a3e:	69d1      	ldr	r1, [r2, #28]
 8006a40:	68ba      	ldr	r2, [r7, #8]
 8006a42:	6912      	ldr	r2, [r2, #16]
 8006a44:	0212      	lsls	r2, r2, #8
 8006a46:	430a      	orrs	r2, r1
 8006a48:	61da      	str	r2, [r3, #28]
    }
    break;
 8006a4a:	e008      	b.n	8006a5e <HAL_TIM_PWM_ConfigChannel+0x2c2>
 8006a4c:	08009ac0 	.word	0x08009ac0
 8006a50:	40012c00 	.word	0x40012c00
 8006a54:	40000400 	.word	0x40000400
 8006a58:	40000800 	.word	0x40000800

    default:
    break;
 8006a5c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2201      	movs	r2, #1
 8006a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8006a82:	2300      	movs	r3, #0
 8006a84:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d101      	bne.n	8006a94 <HAL_TIM_ConfigClockSource+0x1c>
 8006a90:	2302      	movs	r3, #2
 8006a92:	e2e6      	b.n	8007062 <HAL_TIM_ConfigClockSource+0x5ea>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aac:	d029      	beq.n	8006b02 <HAL_TIM_ConfigClockSource+0x8a>
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ab6:	d024      	beq.n	8006b02 <HAL_TIM_ConfigClockSource+0x8a>
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d020      	beq.n	8006b02 <HAL_TIM_ConfigClockSource+0x8a>
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2b10      	cmp	r3, #16
 8006ac6:	d01c      	beq.n	8006b02 <HAL_TIM_ConfigClockSource+0x8a>
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2b20      	cmp	r3, #32
 8006ace:	d018      	beq.n	8006b02 <HAL_TIM_ConfigClockSource+0x8a>
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2b30      	cmp	r3, #48	; 0x30
 8006ad6:	d014      	beq.n	8006b02 <HAL_TIM_ConfigClockSource+0x8a>
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b40      	cmp	r3, #64	; 0x40
 8006ade:	d010      	beq.n	8006b02 <HAL_TIM_ConfigClockSource+0x8a>
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2b50      	cmp	r3, #80	; 0x50
 8006ae6:	d00c      	beq.n	8006b02 <HAL_TIM_ConfigClockSource+0x8a>
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2b60      	cmp	r3, #96	; 0x60
 8006aee:	d008      	beq.n	8006b02 <HAL_TIM_ConfigClockSource+0x8a>
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2b70      	cmp	r3, #112	; 0x70
 8006af6:	d004      	beq.n	8006b02 <HAL_TIM_ConfigClockSource+0x8a>
 8006af8:	f640 7159 	movw	r1, #3929	; 0xf59
 8006afc:	489a      	ldr	r0, [pc, #616]	; (8006d68 <HAL_TIM_ConfigClockSource+0x2f0>)
 8006afe:	f7fb fb65 	bl	80021cc <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b10:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b18:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2b40      	cmp	r3, #64	; 0x40
 8006b28:	f000 81be 	beq.w	8006ea8 <HAL_TIM_ConfigClockSource+0x430>
 8006b2c:	2b40      	cmp	r3, #64	; 0x40
 8006b2e:	d80f      	bhi.n	8006b50 <HAL_TIM_ConfigClockSource+0xd8>
 8006b30:	2b10      	cmp	r3, #16
 8006b32:	f000 8225 	beq.w	8006f80 <HAL_TIM_ConfigClockSource+0x508>
 8006b36:	2b10      	cmp	r3, #16
 8006b38:	d803      	bhi.n	8006b42 <HAL_TIM_ConfigClockSource+0xca>
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f000 8200 	beq.w	8006f40 <HAL_TIM_ConfigClockSource+0x4c8>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8006b40:	e286      	b.n	8007050 <HAL_TIM_ConfigClockSource+0x5d8>
  switch (sClockSourceConfig->ClockSource)
 8006b42:	2b20      	cmp	r3, #32
 8006b44:	f000 8244 	beq.w	8006fd0 <HAL_TIM_ConfigClockSource+0x558>
 8006b48:	2b30      	cmp	r3, #48	; 0x30
 8006b4a:	f000 8261 	beq.w	8007010 <HAL_TIM_ConfigClockSource+0x598>
    break;
 8006b4e:	e27f      	b.n	8007050 <HAL_TIM_ConfigClockSource+0x5d8>
  switch (sClockSourceConfig->ClockSource)
 8006b50:	2b70      	cmp	r3, #112	; 0x70
 8006b52:	d032      	beq.n	8006bba <HAL_TIM_ConfigClockSource+0x142>
 8006b54:	2b70      	cmp	r3, #112	; 0x70
 8006b56:	d806      	bhi.n	8006b66 <HAL_TIM_ConfigClockSource+0xee>
 8006b58:	2b50      	cmp	r3, #80	; 0x50
 8006b5a:	f000 810d 	beq.w	8006d78 <HAL_TIM_ConfigClockSource+0x300>
 8006b5e:	2b60      	cmp	r3, #96	; 0x60
 8006b60:	f000 8156 	beq.w	8006e10 <HAL_TIM_ConfigClockSource+0x398>
    break;
 8006b64:	e274      	b.n	8007050 <HAL_TIM_ConfigClockSource+0x5d8>
  switch (sClockSourceConfig->ClockSource)
 8006b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b6a:	d004      	beq.n	8006b76 <HAL_TIM_ConfigClockSource+0xfe>
 8006b6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b70:	f000 8092 	beq.w	8006c98 <HAL_TIM_ConfigClockSource+0x220>
    break;
 8006b74:	e26c      	b.n	8007050 <HAL_TIM_ConfigClockSource+0x5d8>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a7c      	ldr	r2, [pc, #496]	; (8006d6c <HAL_TIM_ConfigClockSource+0x2f4>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d013      	beq.n	8006ba8 <HAL_TIM_ConfigClockSource+0x130>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b88:	d00e      	beq.n	8006ba8 <HAL_TIM_ConfigClockSource+0x130>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a78      	ldr	r2, [pc, #480]	; (8006d70 <HAL_TIM_ConfigClockSource+0x2f8>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d009      	beq.n	8006ba8 <HAL_TIM_ConfigClockSource+0x130>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a76      	ldr	r2, [pc, #472]	; (8006d74 <HAL_TIM_ConfigClockSource+0x2fc>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d004      	beq.n	8006ba8 <HAL_TIM_ConfigClockSource+0x130>
 8006b9e:	f640 7165 	movw	r1, #3941	; 0xf65
 8006ba2:	4871      	ldr	r0, [pc, #452]	; (8006d68 <HAL_TIM_ConfigClockSource+0x2f0>)
 8006ba4:	f7fb fb12 	bl	80021cc <assert_failed>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	6812      	ldr	r2, [r2, #0]
 8006bb0:	6892      	ldr	r2, [r2, #8]
 8006bb2:	f022 0207 	bic.w	r2, r2, #7
 8006bb6:	609a      	str	r2, [r3, #8]
    break;
 8006bb8:	e24a      	b.n	8007050 <HAL_TIM_ConfigClockSource+0x5d8>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a6b      	ldr	r2, [pc, #428]	; (8006d6c <HAL_TIM_ConfigClockSource+0x2f4>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d013      	beq.n	8006bec <HAL_TIM_ConfigClockSource+0x174>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bcc:	d00e      	beq.n	8006bec <HAL_TIM_ConfigClockSource+0x174>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a67      	ldr	r2, [pc, #412]	; (8006d70 <HAL_TIM_ConfigClockSource+0x2f8>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d009      	beq.n	8006bec <HAL_TIM_ConfigClockSource+0x174>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a65      	ldr	r2, [pc, #404]	; (8006d74 <HAL_TIM_ConfigClockSource+0x2fc>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d004      	beq.n	8006bec <HAL_TIM_ConfigClockSource+0x174>
 8006be2:	f640 716e 	movw	r1, #3950	; 0xf6e
 8006be6:	4860      	ldr	r0, [pc, #384]	; (8006d68 <HAL_TIM_ConfigClockSource+0x2f0>)
 8006be8:	f7fb faf0 	bl	80021cc <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d013      	beq.n	8006c1c <HAL_TIM_ConfigClockSource+0x1a4>
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bfc:	d00e      	beq.n	8006c1c <HAL_TIM_ConfigClockSource+0x1a4>
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c06:	d009      	beq.n	8006c1c <HAL_TIM_ConfigClockSource+0x1a4>
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c10:	d004      	beq.n	8006c1c <HAL_TIM_ConfigClockSource+0x1a4>
 8006c12:	f640 7171 	movw	r1, #3953	; 0xf71
 8006c16:	4854      	ldr	r0, [pc, #336]	; (8006d68 <HAL_TIM_ConfigClockSource+0x2f0>)
 8006c18:	f7fb fad8 	bl	80021cc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c24:	d014      	beq.n	8006c50 <HAL_TIM_ConfigClockSource+0x1d8>
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d010      	beq.n	8006c50 <HAL_TIM_ConfigClockSource+0x1d8>
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00c      	beq.n	8006c50 <HAL_TIM_ConfigClockSource+0x1d8>
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d008      	beq.n	8006c50 <HAL_TIM_ConfigClockSource+0x1d8>
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	2b0a      	cmp	r3, #10
 8006c44:	d004      	beq.n	8006c50 <HAL_TIM_ConfigClockSource+0x1d8>
 8006c46:	f640 7172 	movw	r1, #3954	; 0xf72
 8006c4a:	4847      	ldr	r0, [pc, #284]	; (8006d68 <HAL_TIM_ConfigClockSource+0x2f0>)
 8006c4c:	f7fb fabe 	bl	80021cc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	2b0f      	cmp	r3, #15
 8006c56:	d904      	bls.n	8006c62 <HAL_TIM_ConfigClockSource+0x1ea>
 8006c58:	f640 7173 	movw	r1, #3955	; 0xf73
 8006c5c:	4842      	ldr	r0, [pc, #264]	; (8006d68 <HAL_TIM_ConfigClockSource+0x2f0>)
 8006c5e:	f7fb fab5 	bl	80021cc <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6818      	ldr	r0, [r3, #0]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	6899      	ldr	r1, [r3, #8]
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	685a      	ldr	r2, [r3, #4]
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	f001 f99e 	bl	8007fb2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c84:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c8c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	609a      	str	r2, [r3, #8]
    break;
 8006c96:	e1db      	b.n	8007050 <HAL_TIM_ConfigClockSource+0x5d8>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a33      	ldr	r2, [pc, #204]	; (8006d6c <HAL_TIM_ConfigClockSource+0x2f4>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d013      	beq.n	8006cca <HAL_TIM_ConfigClockSource+0x252>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006caa:	d00e      	beq.n	8006cca <HAL_TIM_ConfigClockSource+0x252>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a2f      	ldr	r2, [pc, #188]	; (8006d70 <HAL_TIM_ConfigClockSource+0x2f8>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d009      	beq.n	8006cca <HAL_TIM_ConfigClockSource+0x252>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a2e      	ldr	r2, [pc, #184]	; (8006d74 <HAL_TIM_ConfigClockSource+0x2fc>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d004      	beq.n	8006cca <HAL_TIM_ConfigClockSource+0x252>
 8006cc0:	f640 7188 	movw	r1, #3976	; 0xf88
 8006cc4:	4828      	ldr	r0, [pc, #160]	; (8006d68 <HAL_TIM_ConfigClockSource+0x2f0>)
 8006cc6:	f7fb fa81 	bl	80021cc <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d013      	beq.n	8006cfa <HAL_TIM_ConfigClockSource+0x282>
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cda:	d00e      	beq.n	8006cfa <HAL_TIM_ConfigClockSource+0x282>
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ce4:	d009      	beq.n	8006cfa <HAL_TIM_ConfigClockSource+0x282>
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006cee:	d004      	beq.n	8006cfa <HAL_TIM_ConfigClockSource+0x282>
 8006cf0:	f640 718b 	movw	r1, #3979	; 0xf8b
 8006cf4:	481c      	ldr	r0, [pc, #112]	; (8006d68 <HAL_TIM_ConfigClockSource+0x2f0>)
 8006cf6:	f7fb fa69 	bl	80021cc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d02:	d014      	beq.n	8006d2e <HAL_TIM_ConfigClockSource+0x2b6>
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d010      	beq.n	8006d2e <HAL_TIM_ConfigClockSource+0x2b6>
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00c      	beq.n	8006d2e <HAL_TIM_ConfigClockSource+0x2b6>
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d008      	beq.n	8006d2e <HAL_TIM_ConfigClockSource+0x2b6>
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	2b0a      	cmp	r3, #10
 8006d22:	d004      	beq.n	8006d2e <HAL_TIM_ConfigClockSource+0x2b6>
 8006d24:	f640 718c 	movw	r1, #3980	; 0xf8c
 8006d28:	480f      	ldr	r0, [pc, #60]	; (8006d68 <HAL_TIM_ConfigClockSource+0x2f0>)
 8006d2a:	f7fb fa4f 	bl	80021cc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	2b0f      	cmp	r3, #15
 8006d34:	d904      	bls.n	8006d40 <HAL_TIM_ConfigClockSource+0x2c8>
 8006d36:	f640 718d 	movw	r1, #3981	; 0xf8d
 8006d3a:	480b      	ldr	r0, [pc, #44]	; (8006d68 <HAL_TIM_ConfigClockSource+0x2f0>)
 8006d3c:	f7fb fa46 	bl	80021cc <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6818      	ldr	r0, [r3, #0]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	6899      	ldr	r1, [r3, #8]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	685a      	ldr	r2, [r3, #4]
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	f001 f92f 	bl	8007fb2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	6812      	ldr	r2, [r2, #0]
 8006d5c:	6892      	ldr	r2, [r2, #8]
 8006d5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d62:	609a      	str	r2, [r3, #8]
    break;
 8006d64:	e174      	b.n	8007050 <HAL_TIM_ConfigClockSource+0x5d8>
 8006d66:	bf00      	nop
 8006d68:	08009ac0 	.word	0x08009ac0
 8006d6c:	40012c00 	.word	0x40012c00
 8006d70:	40000400 	.word	0x40000400
 8006d74:	40000800 	.word	0x40000800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a90      	ldr	r2, [pc, #576]	; (8006fc0 <HAL_TIM_ConfigClockSource+0x548>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d013      	beq.n	8006daa <HAL_TIM_ConfigClockSource+0x332>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d8a:	d00e      	beq.n	8006daa <HAL_TIM_ConfigClockSource+0x332>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a8c      	ldr	r2, [pc, #560]	; (8006fc4 <HAL_TIM_ConfigClockSource+0x54c>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d009      	beq.n	8006daa <HAL_TIM_ConfigClockSource+0x332>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a8b      	ldr	r2, [pc, #556]	; (8006fc8 <HAL_TIM_ConfigClockSource+0x550>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d004      	beq.n	8006daa <HAL_TIM_ConfigClockSource+0x332>
 8006da0:	f640 719c 	movw	r1, #3996	; 0xf9c
 8006da4:	4889      	ldr	r0, [pc, #548]	; (8006fcc <HAL_TIM_ConfigClockSource+0x554>)
 8006da6:	f7fb fa11 	bl	80021cc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006db2:	d014      	beq.n	8006dde <HAL_TIM_ConfigClockSource+0x366>
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d010      	beq.n	8006dde <HAL_TIM_ConfigClockSource+0x366>
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00c      	beq.n	8006dde <HAL_TIM_ConfigClockSource+0x366>
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d008      	beq.n	8006dde <HAL_TIM_ConfigClockSource+0x366>
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	2b0a      	cmp	r3, #10
 8006dd2:	d004      	beq.n	8006dde <HAL_TIM_ConfigClockSource+0x366>
 8006dd4:	f640 719f 	movw	r1, #3999	; 0xf9f
 8006dd8:	487c      	ldr	r0, [pc, #496]	; (8006fcc <HAL_TIM_ConfigClockSource+0x554>)
 8006dda:	f7fb f9f7 	bl	80021cc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	2b0f      	cmp	r3, #15
 8006de4:	d904      	bls.n	8006df0 <HAL_TIM_ConfigClockSource+0x378>
 8006de6:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8006dea:	4878      	ldr	r0, [pc, #480]	; (8006fcc <HAL_TIM_ConfigClockSource+0x554>)
 8006dec:	f7fb f9ee 	bl	80021cc <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6818      	ldr	r0, [r3, #0]
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	6859      	ldr	r1, [r3, #4]
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	f000 ff95 	bl	8007d2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2150      	movs	r1, #80	; 0x50
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f001 f8b3 	bl	8007f74 <TIM_ITRx_SetConfig>
    break;
 8006e0e:	e11f      	b.n	8007050 <HAL_TIM_ConfigClockSource+0x5d8>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a6a      	ldr	r2, [pc, #424]	; (8006fc0 <HAL_TIM_ConfigClockSource+0x548>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d013      	beq.n	8006e42 <HAL_TIM_ConfigClockSource+0x3ca>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e22:	d00e      	beq.n	8006e42 <HAL_TIM_ConfigClockSource+0x3ca>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a66      	ldr	r2, [pc, #408]	; (8006fc4 <HAL_TIM_ConfigClockSource+0x54c>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d009      	beq.n	8006e42 <HAL_TIM_ConfigClockSource+0x3ca>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a65      	ldr	r2, [pc, #404]	; (8006fc8 <HAL_TIM_ConfigClockSource+0x550>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d004      	beq.n	8006e42 <HAL_TIM_ConfigClockSource+0x3ca>
 8006e38:	f640 71ab 	movw	r1, #4011	; 0xfab
 8006e3c:	4863      	ldr	r0, [pc, #396]	; (8006fcc <HAL_TIM_ConfigClockSource+0x554>)
 8006e3e:	f7fb f9c5 	bl	80021cc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e4a:	d014      	beq.n	8006e76 <HAL_TIM_ConfigClockSource+0x3fe>
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d010      	beq.n	8006e76 <HAL_TIM_ConfigClockSource+0x3fe>
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d00c      	beq.n	8006e76 <HAL_TIM_ConfigClockSource+0x3fe>
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	d008      	beq.n	8006e76 <HAL_TIM_ConfigClockSource+0x3fe>
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	2b0a      	cmp	r3, #10
 8006e6a:	d004      	beq.n	8006e76 <HAL_TIM_ConfigClockSource+0x3fe>
 8006e6c:	f640 71ae 	movw	r1, #4014	; 0xfae
 8006e70:	4856      	ldr	r0, [pc, #344]	; (8006fcc <HAL_TIM_ConfigClockSource+0x554>)
 8006e72:	f7fb f9ab 	bl	80021cc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	2b0f      	cmp	r3, #15
 8006e7c:	d904      	bls.n	8006e88 <HAL_TIM_ConfigClockSource+0x410>
 8006e7e:	f640 71af 	movw	r1, #4015	; 0xfaf
 8006e82:	4852      	ldr	r0, [pc, #328]	; (8006fcc <HAL_TIM_ConfigClockSource+0x554>)
 8006e84:	f7fb f9a2 	bl	80021cc <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6818      	ldr	r0, [r3, #0]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	6859      	ldr	r1, [r3, #4]
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	461a      	mov	r2, r3
 8006e96:	f000 ffbb 	bl	8007e10 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2160      	movs	r1, #96	; 0x60
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f001 f867 	bl	8007f74 <TIM_ITRx_SetConfig>
    break;
 8006ea6:	e0d3      	b.n	8007050 <HAL_TIM_ConfigClockSource+0x5d8>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a44      	ldr	r2, [pc, #272]	; (8006fc0 <HAL_TIM_ConfigClockSource+0x548>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d013      	beq.n	8006eda <HAL_TIM_ConfigClockSource+0x462>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eba:	d00e      	beq.n	8006eda <HAL_TIM_ConfigClockSource+0x462>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a40      	ldr	r2, [pc, #256]	; (8006fc4 <HAL_TIM_ConfigClockSource+0x54c>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d009      	beq.n	8006eda <HAL_TIM_ConfigClockSource+0x462>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a3f      	ldr	r2, [pc, #252]	; (8006fc8 <HAL_TIM_ConfigClockSource+0x550>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d004      	beq.n	8006eda <HAL_TIM_ConfigClockSource+0x462>
 8006ed0:	f640 71ba 	movw	r1, #4026	; 0xfba
 8006ed4:	483d      	ldr	r0, [pc, #244]	; (8006fcc <HAL_TIM_ConfigClockSource+0x554>)
 8006ed6:	f7fb f979 	bl	80021cc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ee2:	d014      	beq.n	8006f0e <HAL_TIM_ConfigClockSource+0x496>
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d010      	beq.n	8006f0e <HAL_TIM_ConfigClockSource+0x496>
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00c      	beq.n	8006f0e <HAL_TIM_ConfigClockSource+0x496>
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	d008      	beq.n	8006f0e <HAL_TIM_ConfigClockSource+0x496>
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	2b0a      	cmp	r3, #10
 8006f02:	d004      	beq.n	8006f0e <HAL_TIM_ConfigClockSource+0x496>
 8006f04:	f640 71bd 	movw	r1, #4029	; 0xfbd
 8006f08:	4830      	ldr	r0, [pc, #192]	; (8006fcc <HAL_TIM_ConfigClockSource+0x554>)
 8006f0a:	f7fb f95f 	bl	80021cc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	2b0f      	cmp	r3, #15
 8006f14:	d904      	bls.n	8006f20 <HAL_TIM_ConfigClockSource+0x4a8>
 8006f16:	f640 71be 	movw	r1, #4030	; 0xfbe
 8006f1a:	482c      	ldr	r0, [pc, #176]	; (8006fcc <HAL_TIM_ConfigClockSource+0x554>)
 8006f1c:	f7fb f956 	bl	80021cc <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6818      	ldr	r0, [r3, #0]
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	6859      	ldr	r1, [r3, #4]
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	f000 fefd 	bl	8007d2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2140      	movs	r1, #64	; 0x40
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f001 f81b 	bl	8007f74 <TIM_ITRx_SetConfig>
    break;
 8006f3e:	e087      	b.n	8007050 <HAL_TIM_ConfigClockSource+0x5d8>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a1e      	ldr	r2, [pc, #120]	; (8006fc0 <HAL_TIM_ConfigClockSource+0x548>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d013      	beq.n	8006f72 <HAL_TIM_ConfigClockSource+0x4fa>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f52:	d00e      	beq.n	8006f72 <HAL_TIM_ConfigClockSource+0x4fa>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a1a      	ldr	r2, [pc, #104]	; (8006fc4 <HAL_TIM_ConfigClockSource+0x54c>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d009      	beq.n	8006f72 <HAL_TIM_ConfigClockSource+0x4fa>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a19      	ldr	r2, [pc, #100]	; (8006fc8 <HAL_TIM_ConfigClockSource+0x550>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d004      	beq.n	8006f72 <HAL_TIM_ConfigClockSource+0x4fa>
 8006f68:	f640 71c9 	movw	r1, #4041	; 0xfc9
 8006f6c:	4817      	ldr	r0, [pc, #92]	; (8006fcc <HAL_TIM_ConfigClockSource+0x554>)
 8006f6e:	f7fb f92d 	bl	80021cc <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2100      	movs	r1, #0
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f000 fffb 	bl	8007f74 <TIM_ITRx_SetConfig>
    break;
 8006f7e:	e067      	b.n	8007050 <HAL_TIM_ConfigClockSource+0x5d8>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a0e      	ldr	r2, [pc, #56]	; (8006fc0 <HAL_TIM_ConfigClockSource+0x548>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d013      	beq.n	8006fb2 <HAL_TIM_ConfigClockSource+0x53a>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f92:	d00e      	beq.n	8006fb2 <HAL_TIM_ConfigClockSource+0x53a>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a0a      	ldr	r2, [pc, #40]	; (8006fc4 <HAL_TIM_ConfigClockSource+0x54c>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d009      	beq.n	8006fb2 <HAL_TIM_ConfigClockSource+0x53a>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a09      	ldr	r2, [pc, #36]	; (8006fc8 <HAL_TIM_ConfigClockSource+0x550>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d004      	beq.n	8006fb2 <HAL_TIM_ConfigClockSource+0x53a>
 8006fa8:	f640 71d1 	movw	r1, #4049	; 0xfd1
 8006fac:	4807      	ldr	r0, [pc, #28]	; (8006fcc <HAL_TIM_ConfigClockSource+0x554>)
 8006fae:	f7fb f90d 	bl	80021cc <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2110      	movs	r1, #16
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f000 ffdb 	bl	8007f74 <TIM_ITRx_SetConfig>
    break;
 8006fbe:	e047      	b.n	8007050 <HAL_TIM_ConfigClockSource+0x5d8>
 8006fc0:	40012c00 	.word	0x40012c00
 8006fc4:	40000400 	.word	0x40000400
 8006fc8:	40000800 	.word	0x40000800
 8006fcc:	08009ac0 	.word	0x08009ac0
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a25      	ldr	r2, [pc, #148]	; (800706c <HAL_TIM_ConfigClockSource+0x5f4>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d013      	beq.n	8007002 <HAL_TIM_ConfigClockSource+0x58a>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fe2:	d00e      	beq.n	8007002 <HAL_TIM_ConfigClockSource+0x58a>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a21      	ldr	r2, [pc, #132]	; (8007070 <HAL_TIM_ConfigClockSource+0x5f8>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d009      	beq.n	8007002 <HAL_TIM_ConfigClockSource+0x58a>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a20      	ldr	r2, [pc, #128]	; (8007074 <HAL_TIM_ConfigClockSource+0x5fc>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d004      	beq.n	8007002 <HAL_TIM_ConfigClockSource+0x58a>
 8006ff8:	f640 71d9 	movw	r1, #4057	; 0xfd9
 8006ffc:	481e      	ldr	r0, [pc, #120]	; (8007078 <HAL_TIM_ConfigClockSource+0x600>)
 8006ffe:	f7fb f8e5 	bl	80021cc <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2120      	movs	r1, #32
 8007008:	4618      	mov	r0, r3
 800700a:	f000 ffb3 	bl	8007f74 <TIM_ITRx_SetConfig>
    break;
 800700e:	e01f      	b.n	8007050 <HAL_TIM_ConfigClockSource+0x5d8>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a15      	ldr	r2, [pc, #84]	; (800706c <HAL_TIM_ConfigClockSource+0x5f4>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d013      	beq.n	8007042 <HAL_TIM_ConfigClockSource+0x5ca>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007022:	d00e      	beq.n	8007042 <HAL_TIM_ConfigClockSource+0x5ca>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a11      	ldr	r2, [pc, #68]	; (8007070 <HAL_TIM_ConfigClockSource+0x5f8>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d009      	beq.n	8007042 <HAL_TIM_ConfigClockSource+0x5ca>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a10      	ldr	r2, [pc, #64]	; (8007074 <HAL_TIM_ConfigClockSource+0x5fc>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d004      	beq.n	8007042 <HAL_TIM_ConfigClockSource+0x5ca>
 8007038:	f640 71e1 	movw	r1, #4065	; 0xfe1
 800703c:	480e      	ldr	r0, [pc, #56]	; (8007078 <HAL_TIM_ConfigClockSource+0x600>)
 800703e:	f7fb f8c5 	bl	80021cc <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2130      	movs	r1, #48	; 0x30
 8007048:	4618      	mov	r0, r3
 800704a:	f000 ff93 	bl	8007f74 <TIM_ITRx_SetConfig>
    break;
 800704e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3710      	adds	r7, #16
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	40012c00 	.word	0x40012c00
 8007070:	40000400 	.word	0x40000400
 8007074:	40000800 	.word	0x40000800
 8007078:	08009ac0 	.word	0x08009ac0

0800707c <HAL_TIM_SlaveConfigSynchronization>:
  *         timer input or external trigger input) and the ) and the Slave 
  *         mode (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchronization(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef * sSlaveConfig)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a42      	ldr	r2, [pc, #264]	; (8007194 <HAL_TIM_SlaveConfigSynchronization+0x118>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d013      	beq.n	80070b8 <HAL_TIM_SlaveConfigSynchronization+0x3c>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007098:	d00e      	beq.n	80070b8 <HAL_TIM_SlaveConfigSynchronization+0x3c>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a3e      	ldr	r2, [pc, #248]	; (8007198 <HAL_TIM_SlaveConfigSynchronization+0x11c>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d009      	beq.n	80070b8 <HAL_TIM_SlaveConfigSynchronization+0x3c>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a3c      	ldr	r2, [pc, #240]	; (800719c <HAL_TIM_SlaveConfigSynchronization+0x120>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d004      	beq.n	80070b8 <HAL_TIM_SlaveConfigSynchronization+0x3c>
 80070ae:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 80070b2:	483b      	ldr	r0, [pc, #236]	; (80071a0 <HAL_TIM_SlaveConfigSynchronization+0x124>)
 80070b4:	f7fb f88a 	bl	80021cc <assert_failed>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d014      	beq.n	80070ea <HAL_TIM_SlaveConfigSynchronization+0x6e>
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2b05      	cmp	r3, #5
 80070c6:	d010      	beq.n	80070ea <HAL_TIM_SlaveConfigSynchronization+0x6e>
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2b04      	cmp	r3, #4
 80070ce:	d00c      	beq.n	80070ea <HAL_TIM_SlaveConfigSynchronization+0x6e>
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2b06      	cmp	r3, #6
 80070d6:	d008      	beq.n	80070ea <HAL_TIM_SlaveConfigSynchronization+0x6e>
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2b07      	cmp	r3, #7
 80070de:	d004      	beq.n	80070ea <HAL_TIM_SlaveConfigSynchronization+0x6e>
 80070e0:	f241 0121 	movw	r1, #4129	; 0x1021
 80070e4:	482e      	ldr	r0, [pc, #184]	; (80071a0 <HAL_TIM_SlaveConfigSynchronization+0x124>)
 80070e6:	f7fb f871 	bl	80021cc <assert_failed>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d020      	beq.n	8007134 <HAL_TIM_SlaveConfigSynchronization+0xb8>
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	2b10      	cmp	r3, #16
 80070f8:	d01c      	beq.n	8007134 <HAL_TIM_SlaveConfigSynchronization+0xb8>
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	2b20      	cmp	r3, #32
 8007100:	d018      	beq.n	8007134 <HAL_TIM_SlaveConfigSynchronization+0xb8>
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	2b30      	cmp	r3, #48	; 0x30
 8007108:	d014      	beq.n	8007134 <HAL_TIM_SlaveConfigSynchronization+0xb8>
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	2b40      	cmp	r3, #64	; 0x40
 8007110:	d010      	beq.n	8007134 <HAL_TIM_SlaveConfigSynchronization+0xb8>
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	2b50      	cmp	r3, #80	; 0x50
 8007118:	d00c      	beq.n	8007134 <HAL_TIM_SlaveConfigSynchronization+0xb8>
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	2b60      	cmp	r3, #96	; 0x60
 8007120:	d008      	beq.n	8007134 <HAL_TIM_SlaveConfigSynchronization+0xb8>
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	2b70      	cmp	r3, #112	; 0x70
 8007128:	d004      	beq.n	8007134 <HAL_TIM_SlaveConfigSynchronization+0xb8>
 800712a:	f241 0122 	movw	r1, #4130	; 0x1022
 800712e:	481c      	ldr	r0, [pc, #112]	; (80071a0 <HAL_TIM_SlaveConfigSynchronization+0x124>)
 8007130:	f7fb f84c 	bl	80021cc <assert_failed>

  __HAL_LOCK(htim);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800713a:	2b01      	cmp	r3, #1
 800713c:	d101      	bne.n	8007142 <HAL_TIM_SlaveConfigSynchronization+0xc6>
 800713e:	2302      	movs	r3, #2
 8007140:	e024      	b.n	800718c <HAL_TIM_SlaveConfigSynchronization+0x110>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2202      	movs	r2, #2
 800714e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 8007152:	6839      	ldr	r1, [r7, #0]
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 fb93 	bl	8007880 <TIM_SlaveTimer_SetConfig>

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	6812      	ldr	r2, [r2, #0]
 8007162:	68d2      	ldr	r2, [r2, #12]
 8007164:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007168:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	6812      	ldr	r2, [r2, #0]
 8007172:	68d2      	ldr	r2, [r2, #12]
 8007174:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007178:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800718a:	2300      	movs	r3, #0
    }
 800718c:	4618      	mov	r0, r3
 800718e:	3708      	adds	r7, #8
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}
 8007194:	40012c00 	.word	0x40012c00
 8007198:	40000400 	.word	0x40000400
 800719c:	40000800 	.word	0x40000800
 80071a0:	08009ac0 	.word	0x08009ac0

080071a4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3 : TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4 : TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80071ae:	2300      	movs	r3, #0
 80071b0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(htim);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d101      	bne.n	80071c0 <HAL_TIM_ReadCapturedValue+0x1c>
 80071bc:	2302      	movs	r3, #2
 80071be:	e0a3      	b.n	8007308 <HAL_TIM_ReadCapturedValue+0x164>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	2b0c      	cmp	r3, #12
 80071cc:	f200 8096 	bhi.w	80072fc <HAL_TIM_ReadCapturedValue+0x158>
 80071d0:	a201      	add	r2, pc, #4	; (adr r2, 80071d8 <HAL_TIM_ReadCapturedValue+0x34>)
 80071d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d6:	bf00      	nop
 80071d8:	0800720d 	.word	0x0800720d
 80071dc:	080072fd 	.word	0x080072fd
 80071e0:	080072fd 	.word	0x080072fd
 80071e4:	080072fd 	.word	0x080072fd
 80071e8:	08007249 	.word	0x08007249
 80071ec:	080072fd 	.word	0x080072fd
 80071f0:	080072fd 	.word	0x080072fd
 80071f4:	080072fd 	.word	0x080072fd
 80071f8:	08007285 	.word	0x08007285
 80071fc:	080072fd 	.word	0x080072fd
 8007200:	080072fd 	.word	0x080072fd
 8007204:	080072fd 	.word	0x080072fd
 8007208:	080072c1 	.word	0x080072c1
  {
  case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a3f      	ldr	r2, [pc, #252]	; (8007310 <HAL_TIM_ReadCapturedValue+0x16c>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d013      	beq.n	800723e <HAL_TIM_ReadCapturedValue+0x9a>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800721e:	d00e      	beq.n	800723e <HAL_TIM_ReadCapturedValue+0x9a>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a3b      	ldr	r2, [pc, #236]	; (8007314 <HAL_TIM_ReadCapturedValue+0x170>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d009      	beq.n	800723e <HAL_TIM_ReadCapturedValue+0x9a>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a3a      	ldr	r2, [pc, #232]	; (8007318 <HAL_TIM_ReadCapturedValue+0x174>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d004      	beq.n	800723e <HAL_TIM_ReadCapturedValue+0x9a>
 8007234:	f241 0171 	movw	r1, #4209	; 0x1071
 8007238:	4838      	ldr	r0, [pc, #224]	; (800731c <HAL_TIM_ReadCapturedValue+0x178>)
 800723a:	f7fa ffc7 	bl	80021cc <assert_failed>

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007244:	60fb      	str	r3, [r7, #12]

      break;
 8007246:	e05a      	b.n	80072fe <HAL_TIM_ReadCapturedValue+0x15a>
    }
  case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a30      	ldr	r2, [pc, #192]	; (8007310 <HAL_TIM_ReadCapturedValue+0x16c>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d013      	beq.n	800727a <HAL_TIM_ReadCapturedValue+0xd6>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800725a:	d00e      	beq.n	800727a <HAL_TIM_ReadCapturedValue+0xd6>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a2c      	ldr	r2, [pc, #176]	; (8007314 <HAL_TIM_ReadCapturedValue+0x170>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d009      	beq.n	800727a <HAL_TIM_ReadCapturedValue+0xd6>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a2b      	ldr	r2, [pc, #172]	; (8007318 <HAL_TIM_ReadCapturedValue+0x174>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d004      	beq.n	800727a <HAL_TIM_ReadCapturedValue+0xd6>
 8007270:	f241 017b 	movw	r1, #4219	; 0x107b
 8007274:	4829      	ldr	r0, [pc, #164]	; (800731c <HAL_TIM_ReadCapturedValue+0x178>)
 8007276:	f7fa ffa9 	bl	80021cc <assert_failed>

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007280:	60fb      	str	r3, [r7, #12]

      break;
 8007282:	e03c      	b.n	80072fe <HAL_TIM_ReadCapturedValue+0x15a>
    }

  case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a21      	ldr	r2, [pc, #132]	; (8007310 <HAL_TIM_ReadCapturedValue+0x16c>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d013      	beq.n	80072b6 <HAL_TIM_ReadCapturedValue+0x112>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007296:	d00e      	beq.n	80072b6 <HAL_TIM_ReadCapturedValue+0x112>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a1d      	ldr	r2, [pc, #116]	; (8007314 <HAL_TIM_ReadCapturedValue+0x170>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d009      	beq.n	80072b6 <HAL_TIM_ReadCapturedValue+0x112>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a1c      	ldr	r2, [pc, #112]	; (8007318 <HAL_TIM_ReadCapturedValue+0x174>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d004      	beq.n	80072b6 <HAL_TIM_ReadCapturedValue+0x112>
 80072ac:	f241 0186 	movw	r1, #4230	; 0x1086
 80072b0:	481a      	ldr	r0, [pc, #104]	; (800731c <HAL_TIM_ReadCapturedValue+0x178>)
 80072b2:	f7fa ff8b 	bl	80021cc <assert_failed>

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072bc:	60fb      	str	r3, [r7, #12]

      break;
 80072be:	e01e      	b.n	80072fe <HAL_TIM_ReadCapturedValue+0x15a>
    }

  case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a12      	ldr	r2, [pc, #72]	; (8007310 <HAL_TIM_ReadCapturedValue+0x16c>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d013      	beq.n	80072f2 <HAL_TIM_ReadCapturedValue+0x14e>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072d2:	d00e      	beq.n	80072f2 <HAL_TIM_ReadCapturedValue+0x14e>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a0e      	ldr	r2, [pc, #56]	; (8007314 <HAL_TIM_ReadCapturedValue+0x170>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d009      	beq.n	80072f2 <HAL_TIM_ReadCapturedValue+0x14e>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a0d      	ldr	r2, [pc, #52]	; (8007318 <HAL_TIM_ReadCapturedValue+0x174>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d004      	beq.n	80072f2 <HAL_TIM_ReadCapturedValue+0x14e>
 80072e8:	f241 0191 	movw	r1, #4241	; 0x1091
 80072ec:	480b      	ldr	r0, [pc, #44]	; (800731c <HAL_TIM_ReadCapturedValue+0x178>)
 80072ee:	f7fa ff6d 	bl	80021cc <assert_failed>

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f8:	60fb      	str	r3, [r7, #12]

      break;
 80072fa:	e000      	b.n	80072fe <HAL_TIM_ReadCapturedValue+0x15a>
    }

  default:
    break;
 80072fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  return tmpreg;
 8007306:	68fb      	ldr	r3, [r7, #12]
}
 8007308:	4618      	mov	r0, r3
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}
 8007310:	40012c00 	.word	0x40012c00
 8007314:	40000400 	.word	0x40000400
 8007318:	40000800 	.word	0x40000800
 800731c:	08009ac0 	.word	0x08009ac0

08007320 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007328:	bf00      	nop
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	bc80      	pop	{r7}
 8007330:	4770      	bx	lr

08007332 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007332:	b480      	push	{r7}
 8007334:	b083      	sub	sp, #12
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800733a:	bf00      	nop
 800733c:	370c      	adds	r7, #12
 800733e:	46bd      	mov	sp, r7
 8007340:	bc80      	pop	{r7}
 8007342:	4770      	bx	lr

08007344 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800734c:	bf00      	nop
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	bc80      	pop	{r7}
 8007354:	4770      	bx	lr
	...

08007358 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8007362:	2300      	movs	r3, #0
 8007364:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a2a      	ldr	r2, [pc, #168]	; (8007418 <TIM_Base_SetConfig+0xc0>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d00b      	beq.n	800738c <TIM_Base_SetConfig+0x34>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800737a:	d007      	beq.n	800738c <TIM_Base_SetConfig+0x34>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	4a27      	ldr	r2, [pc, #156]	; (800741c <TIM_Base_SetConfig+0xc4>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d003      	beq.n	800738c <TIM_Base_SetConfig+0x34>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a26      	ldr	r2, [pc, #152]	; (8007420 <TIM_Base_SetConfig+0xc8>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d108      	bne.n	800739e <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	4313      	orrs	r3, r2
 800739c:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4a1d      	ldr	r2, [pc, #116]	; (8007418 <TIM_Base_SetConfig+0xc0>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d00b      	beq.n	80073be <TIM_Base_SetConfig+0x66>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073ac:	d007      	beq.n	80073be <TIM_Base_SetConfig+0x66>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4a1a      	ldr	r2, [pc, #104]	; (800741c <TIM_Base_SetConfig+0xc4>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d003      	beq.n	80073be <TIM_Base_SetConfig+0x66>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a19      	ldr	r2, [pc, #100]	; (8007420 <TIM_Base_SetConfig+0xc8>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d108      	bne.n	80073d0 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073d6:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	695b      	ldr	r3, [r3, #20]
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	4313      	orrs	r3, r2
 80073e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	68fa      	ldr	r2, [r7, #12]
 80073e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	689a      	ldr	r2, [r3, #8]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4a07      	ldr	r2, [pc, #28]	; (8007418 <TIM_Base_SetConfig+0xc0>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d103      	bne.n	8007408 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	691a      	ldr	r2, [r3, #16]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	615a      	str	r2, [r3, #20]
}
 800740e:	bf00      	nop
 8007410:	3714      	adds	r7, #20
 8007412:	46bd      	mov	sp, r7
 8007414:	bc80      	pop	{r7}
 8007416:	4770      	bx	lr
 8007418:	40012c00 	.word	0x40012c00
 800741c:	40000400 	.word	0x40000400
 8007420:	40000800 	.word	0x40000800

08007424 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b086      	sub	sp, #24
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800742e:	2300      	movs	r3, #0
 8007430:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8007432:	2300      	movs	r3, #0
 8007434:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8007436:	2300      	movs	r3, #0
 8007438:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a1b      	ldr	r3, [r3, #32]
 800743e:	f023 0201 	bic.w	r2, r3, #1
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6a1b      	ldr	r3, [r3, #32]
 800744a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	699b      	ldr	r3, [r3, #24]
 8007456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800745e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f023 0303 	bic.w	r3, r3, #3
 8007466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	4313      	orrs	r3, r2
 8007470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	f023 0302 	bic.w	r3, r3, #2
 8007478:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	697a      	ldr	r2, [r7, #20]
 8007480:	4313      	orrs	r3, r2
 8007482:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a30      	ldr	r2, [pc, #192]	; (8007548 <TIM_OC1_SetConfig+0x124>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d119      	bne.n	80074c0 <TIM_OC1_SetConfig+0x9c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d008      	beq.n	80074a6 <TIM_OC1_SetConfig+0x82>
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	2b08      	cmp	r3, #8
 800749a:	d004      	beq.n	80074a6 <TIM_OC1_SetConfig+0x82>
 800749c:	f241 2127 	movw	r1, #4647	; 0x1227
 80074a0:	482a      	ldr	r0, [pc, #168]	; (800754c <TIM_OC1_SetConfig+0x128>)
 80074a2:	f7fa fe93 	bl	80021cc <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f023 0308 	bic.w	r3, r3, #8
 80074ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	697a      	ldr	r2, [r7, #20]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	f023 0304 	bic.w	r3, r3, #4
 80074be:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4a21      	ldr	r2, [pc, #132]	; (8007548 <TIM_OC1_SetConfig+0x124>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d12d      	bne.n	8007524 <TIM_OC1_SetConfig+0x100>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074d0:	d008      	beq.n	80074e4 <TIM_OC1_SetConfig+0xc0>
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	699b      	ldr	r3, [r3, #24]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d004      	beq.n	80074e4 <TIM_OC1_SetConfig+0xc0>
 80074da:	f241 2134 	movw	r1, #4660	; 0x1234
 80074de:	481b      	ldr	r0, [pc, #108]	; (800754c <TIM_OC1_SetConfig+0x128>)
 80074e0:	f7fa fe74 	bl	80021cc <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	695b      	ldr	r3, [r3, #20]
 80074e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074ec:	d008      	beq.n	8007500 <TIM_OC1_SetConfig+0xdc>
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	695b      	ldr	r3, [r3, #20]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d004      	beq.n	8007500 <TIM_OC1_SetConfig+0xdc>
 80074f6:	f241 2135 	movw	r1, #4661	; 0x1235
 80074fa:	4814      	ldr	r0, [pc, #80]	; (800754c <TIM_OC1_SetConfig+0x128>)
 80074fc:	f7fa fe66 	bl	80021cc <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007506:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800750e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	695b      	ldr	r3, [r3, #20]
 8007514:	693a      	ldr	r2, [r7, #16]
 8007516:	4313      	orrs	r3, r2
 8007518:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	699b      	ldr	r3, [r3, #24]
 800751e:	693a      	ldr	r2, [r7, #16]
 8007520:	4313      	orrs	r3, r2
 8007522:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	693a      	ldr	r2, [r7, #16]
 8007528:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	68fa      	ldr	r2, [r7, #12]
 800752e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	685a      	ldr	r2, [r3, #4]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	697a      	ldr	r2, [r7, #20]
 800753c:	621a      	str	r2, [r3, #32]
}
 800753e:	bf00      	nop
 8007540:	3718      	adds	r7, #24
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	40012c00 	.word	0x40012c00
 800754c:	08009ac0 	.word	0x08009ac0

08007550 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b086      	sub	sp, #24
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800755a:	2300      	movs	r3, #0
 800755c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800755e:	2300      	movs	r3, #0
 8007560:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8007562:	2300      	movs	r3, #0
 8007564:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6a1b      	ldr	r3, [r3, #32]
 800756a:	f023 0210 	bic.w	r2, r3, #16
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a1b      	ldr	r3, [r3, #32]
 8007576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	699b      	ldr	r3, [r3, #24]
 8007582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800758a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007592:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	021b      	lsls	r3, r3, #8
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	4313      	orrs	r3, r2
 800759e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	f023 0320 	bic.w	r3, r3, #32
 80075a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	011b      	lsls	r3, r3, #4
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4a31      	ldr	r2, [pc, #196]	; (800767c <TIM_OC2_SetConfig+0x12c>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d11a      	bne.n	80075f2 <TIM_OC2_SetConfig+0xa2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d008      	beq.n	80075d6 <TIM_OC2_SetConfig+0x86>
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	2b08      	cmp	r3, #8
 80075ca:	d004      	beq.n	80075d6 <TIM_OC2_SetConfig+0x86>
 80075cc:	f241 2171 	movw	r1, #4721	; 0x1271
 80075d0:	482b      	ldr	r0, [pc, #172]	; (8007680 <TIM_OC2_SetConfig+0x130>)
 80075d2:	f7fa fdfb 	bl	80021cc <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	011b      	lsls	r3, r3, #4
 80075e4:	697a      	ldr	r2, [r7, #20]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075f0:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a21      	ldr	r2, [pc, #132]	; (800767c <TIM_OC2_SetConfig+0x12c>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d12f      	bne.n	800765a <TIM_OC2_SetConfig+0x10a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	699b      	ldr	r3, [r3, #24]
 80075fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007602:	d008      	beq.n	8007616 <TIM_OC2_SetConfig+0xc6>
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d004      	beq.n	8007616 <TIM_OC2_SetConfig+0xc6>
 800760c:	f241 217f 	movw	r1, #4735	; 0x127f
 8007610:	481b      	ldr	r0, [pc, #108]	; (8007680 <TIM_OC2_SetConfig+0x130>)
 8007612:	f7fa fddb 	bl	80021cc <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	695b      	ldr	r3, [r3, #20]
 800761a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800761e:	d008      	beq.n	8007632 <TIM_OC2_SetConfig+0xe2>
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	695b      	ldr	r3, [r3, #20]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d004      	beq.n	8007632 <TIM_OC2_SetConfig+0xe2>
 8007628:	f44f 5194 	mov.w	r1, #4736	; 0x1280
 800762c:	4814      	ldr	r0, [pc, #80]	; (8007680 <TIM_OC2_SetConfig+0x130>)
 800762e:	f7fa fdcd 	bl	80021cc <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007638:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007640:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	693a      	ldr	r2, [r7, #16]
 800764a:	4313      	orrs	r3, r2
 800764c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	699b      	ldr	r3, [r3, #24]
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	693a      	ldr	r2, [r7, #16]
 8007656:	4313      	orrs	r3, r2
 8007658:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	693a      	ldr	r2, [r7, #16]
 800765e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	685a      	ldr	r2, [r3, #4]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	697a      	ldr	r2, [r7, #20]
 8007672:	621a      	str	r2, [r3, #32]
}
 8007674:	bf00      	nop
 8007676:	3718      	adds	r7, #24
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}
 800767c:	40012c00 	.word	0x40012c00
 8007680:	08009ac0 	.word	0x08009ac0

08007684 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b086      	sub	sp, #24
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800768e:	2300      	movs	r3, #0
 8007690:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8007692:	2300      	movs	r3, #0
 8007694:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8007696:	2300      	movs	r3, #0
 8007698:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a1b      	ldr	r3, [r3, #32]
 800769e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a1b      	ldr	r3, [r3, #32]
 80076aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	69db      	ldr	r3, [r3, #28]
 80076b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f023 0303 	bic.w	r3, r3, #3
 80076c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	021b      	lsls	r3, r3, #8
 80076e0:	697a      	ldr	r2, [r7, #20]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a31      	ldr	r2, [pc, #196]	; (80077b0 <TIM_OC3_SetConfig+0x12c>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d11a      	bne.n	8007724 <TIM_OC3_SetConfig+0xa0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d008      	beq.n	8007708 <TIM_OC3_SetConfig+0x84>
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	2b08      	cmp	r3, #8
 80076fc:	d004      	beq.n	8007708 <TIM_OC3_SetConfig+0x84>
 80076fe:	f241 21bc 	movw	r1, #4796	; 0x12bc
 8007702:	482c      	ldr	r0, [pc, #176]	; (80077b4 <TIM_OC3_SetConfig+0x130>)
 8007704:	f7fa fd62 	bl	80021cc <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800770e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	021b      	lsls	r3, r3, #8
 8007716:	697a      	ldr	r2, [r7, #20]
 8007718:	4313      	orrs	r3, r2
 800771a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007722:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a22      	ldr	r2, [pc, #136]	; (80077b0 <TIM_OC3_SetConfig+0x12c>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d12f      	bne.n	800778c <TIM_OC3_SetConfig+0x108>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	699b      	ldr	r3, [r3, #24]
 8007730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007734:	d008      	beq.n	8007748 <TIM_OC3_SetConfig+0xc4>
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	699b      	ldr	r3, [r3, #24]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d004      	beq.n	8007748 <TIM_OC3_SetConfig+0xc4>
 800773e:	f241 21c9 	movw	r1, #4809	; 0x12c9
 8007742:	481c      	ldr	r0, [pc, #112]	; (80077b4 <TIM_OC3_SetConfig+0x130>)
 8007744:	f7fa fd42 	bl	80021cc <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	695b      	ldr	r3, [r3, #20]
 800774c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007750:	d008      	beq.n	8007764 <TIM_OC3_SetConfig+0xe0>
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	695b      	ldr	r3, [r3, #20]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d004      	beq.n	8007764 <TIM_OC3_SetConfig+0xe0>
 800775a:	f241 21ca 	movw	r1, #4810	; 0x12ca
 800775e:	4815      	ldr	r0, [pc, #84]	; (80077b4 <TIM_OC3_SetConfig+0x130>)
 8007760:	f7fa fd34 	bl	80021cc <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800776a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007772:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	695b      	ldr	r3, [r3, #20]
 8007778:	011b      	lsls	r3, r3, #4
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	4313      	orrs	r3, r2
 800777e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	699b      	ldr	r3, [r3, #24]
 8007784:	011b      	lsls	r3, r3, #4
 8007786:	693a      	ldr	r2, [r7, #16]
 8007788:	4313      	orrs	r3, r2
 800778a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	693a      	ldr	r2, [r7, #16]
 8007790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	685a      	ldr	r2, [r3, #4]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	697a      	ldr	r2, [r7, #20]
 80077a4:	621a      	str	r2, [r3, #32]
}
 80077a6:	bf00      	nop
 80077a8:	3718      	adds	r7, #24
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	40012c00 	.word	0x40012c00
 80077b4:	08009ac0 	.word	0x08009ac0

080077b8 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b086      	sub	sp, #24
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80077c2:	2300      	movs	r3, #0
 80077c4:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80077c6:	2300      	movs	r3, #0
 80077c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 80077ca:	2300      	movs	r3, #0
 80077cc:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a1b      	ldr	r3, [r3, #32]
 80077d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6a1b      	ldr	r3, [r3, #32]
 80077de:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	69db      	ldr	r3, [r3, #28]
 80077ea:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077f2:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077fa:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	021b      	lsls	r3, r3, #8
 8007802:	693a      	ldr	r2, [r7, #16]
 8007804:	4313      	orrs	r3, r2
 8007806:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800780e:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	031b      	lsls	r3, r3, #12
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	4313      	orrs	r3, r2
 800781a:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a16      	ldr	r2, [pc, #88]	; (8007878 <TIM_OC4_SetConfig+0xc0>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d117      	bne.n	8007854 <TIM_OC4_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	695b      	ldr	r3, [r3, #20]
 8007828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800782c:	d008      	beq.n	8007840 <TIM_OC4_SetConfig+0x88>
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	695b      	ldr	r3, [r3, #20]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d004      	beq.n	8007840 <TIM_OC4_SetConfig+0x88>
 8007836:	f241 3107 	movw	r1, #4871	; 0x1307
 800783a:	4810      	ldr	r0, [pc, #64]	; (800787c <TIM_OC4_SetConfig+0xc4>)
 800783c:	f7fa fcc6 	bl	80021cc <assert_failed>

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007846:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	695b      	ldr	r3, [r3, #20]
 800784c:	019b      	lsls	r3, r3, #6
 800784e:	697a      	ldr	r2, [r7, #20]
 8007850:	4313      	orrs	r3, r2
 8007852:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	697a      	ldr	r2, [r7, #20]
 8007858:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	693a      	ldr	r2, [r7, #16]
 800785e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	685a      	ldr	r2, [r3, #4]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	621a      	str	r2, [r3, #32]
}
 800786e:	bf00      	nop
 8007870:	3718      	adds	r7, #24
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	40012c00 	.word	0x40012c00
 800787c:	08009ac0 	.word	0x08009ac0

08007880 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig: The slave configuration structure
  * @retval None
  */
static void TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                              TIM_SlaveConfigTypeDef * sSlaveConfig)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b086      	sub	sp, #24
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800788a:	2300      	movs	r3, #0
 800788c:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0U;
 800788e:	2300      	movs	r3, #0
 8007890:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8007892:	2300      	movs	r3, #0
 8007894:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078a4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	697a      	ldr	r2, [r7, #20]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	f023 0307 	bic.w	r3, r3, #7
 80078b6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	697a      	ldr	r2, [r7, #20]
 80078be:	4313      	orrs	r3, r2
 80078c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	697a      	ldr	r2, [r7, #20]
 80078c8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	2b30      	cmp	r3, #48	; 0x30
 80078d0:	f000 81a0 	beq.w	8007c14 <TIM_SlaveTimer_SetConfig+0x394>
 80078d4:	2b30      	cmp	r3, #48	; 0x30
 80078d6:	d809      	bhi.n	80078ec <TIM_SlaveTimer_SetConfig+0x6c>
 80078d8:	2b10      	cmp	r3, #16
 80078da:	f000 8167 	beq.w	8007bac <TIM_SlaveTimer_SetConfig+0x32c>
 80078de:	2b20      	cmp	r3, #32
 80078e0:	f000 817e 	beq.w	8007be0 <TIM_SlaveTimer_SetConfig+0x360>
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f000 8147 	beq.w	8007b78 <TIM_SlaveTimer_SetConfig+0x2f8>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
    }
    break;

  default:
    break;
 80078ea:	e1b4      	b.n	8007c56 <TIM_SlaveTimer_SetConfig+0x3d6>
  switch (sSlaveConfig->InputTrigger)
 80078ec:	2b50      	cmp	r3, #80	; 0x50
 80078ee:	f000 80af 	beq.w	8007a50 <TIM_SlaveTimer_SetConfig+0x1d0>
 80078f2:	2b50      	cmp	r3, #80	; 0x50
 80078f4:	d802      	bhi.n	80078fc <TIM_SlaveTimer_SetConfig+0x7c>
 80078f6:	2b40      	cmp	r3, #64	; 0x40
 80078f8:	d065      	beq.n	80079c6 <TIM_SlaveTimer_SetConfig+0x146>
    break;
 80078fa:	e1ac      	b.n	8007c56 <TIM_SlaveTimer_SetConfig+0x3d6>
  switch (sSlaveConfig->InputTrigger)
 80078fc:	2b60      	cmp	r3, #96	; 0x60
 80078fe:	f000 80ed 	beq.w	8007adc <TIM_SlaveTimer_SetConfig+0x25c>
 8007902:	2b70      	cmp	r3, #112	; 0x70
 8007904:	d000      	beq.n	8007908 <TIM_SlaveTimer_SetConfig+0x88>
    break;
 8007906:	e1a6      	b.n	8007c56 <TIM_SlaveTimer_SetConfig+0x3d6>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a96      	ldr	r2, [pc, #600]	; (8007b68 <TIM_SlaveTimer_SetConfig+0x2e8>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d013      	beq.n	800793a <TIM_SlaveTimer_SetConfig+0xba>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800791a:	d00e      	beq.n	800793a <TIM_SlaveTimer_SetConfig+0xba>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a92      	ldr	r2, [pc, #584]	; (8007b6c <TIM_SlaveTimer_SetConfig+0x2ec>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d009      	beq.n	800793a <TIM_SlaveTimer_SetConfig+0xba>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a91      	ldr	r2, [pc, #580]	; (8007b70 <TIM_SlaveTimer_SetConfig+0x2f0>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d004      	beq.n	800793a <TIM_SlaveTimer_SetConfig+0xba>
 8007930:	f241 3141 	movw	r1, #4929	; 0x1341
 8007934:	488f      	ldr	r0, [pc, #572]	; (8007b74 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8007936:	f7fa fc49 	bl	80021cc <assert_failed>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d013      	beq.n	800796a <TIM_SlaveTimer_SetConfig+0xea>
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800794a:	d00e      	beq.n	800796a <TIM_SlaveTimer_SetConfig+0xea>
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007954:	d009      	beq.n	800796a <TIM_SlaveTimer_SetConfig+0xea>
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800795e:	d004      	beq.n	800796a <TIM_SlaveTimer_SetConfig+0xea>
 8007960:	f241 3142 	movw	r1, #4930	; 0x1342
 8007964:	4883      	ldr	r0, [pc, #524]	; (8007b74 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8007966:	f7fa fc31 	bl	80021cc <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007972:	d014      	beq.n	800799e <TIM_SlaveTimer_SetConfig+0x11e>
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d010      	beq.n	800799e <TIM_SlaveTimer_SetConfig+0x11e>
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00c      	beq.n	800799e <TIM_SlaveTimer_SetConfig+0x11e>
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	2b02      	cmp	r3, #2
 800798a:	d008      	beq.n	800799e <TIM_SlaveTimer_SetConfig+0x11e>
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	2b0a      	cmp	r3, #10
 8007992:	d004      	beq.n	800799e <TIM_SlaveTimer_SetConfig+0x11e>
 8007994:	f241 3143 	movw	r1, #4931	; 0x1343
 8007998:	4876      	ldr	r0, [pc, #472]	; (8007b74 <TIM_SlaveTimer_SetConfig+0x2f4>)
 800799a:	f7fa fc17 	bl	80021cc <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	691b      	ldr	r3, [r3, #16]
 80079a2:	2b0f      	cmp	r3, #15
 80079a4:	d904      	bls.n	80079b0 <TIM_SlaveTimer_SetConfig+0x130>
 80079a6:	f241 3144 	movw	r1, #4932	; 0x1344
 80079aa:	4872      	ldr	r0, [pc, #456]	; (8007b74 <TIM_SlaveTimer_SetConfig+0x2f4>)
 80079ac:	f7fa fc0e 	bl	80021cc <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6818      	ldr	r0, [r3, #0]
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	68d9      	ldr	r1, [r3, #12]
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	689a      	ldr	r2, [r3, #8]
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	f000 faf7 	bl	8007fb2 <TIM_ETR_SetConfig>
    break;
 80079c4:	e147      	b.n	8007c56 <TIM_SlaveTimer_SetConfig+0x3d6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a67      	ldr	r2, [pc, #412]	; (8007b68 <TIM_SlaveTimer_SetConfig+0x2e8>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d013      	beq.n	80079f8 <TIM_SlaveTimer_SetConfig+0x178>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079d8:	d00e      	beq.n	80079f8 <TIM_SlaveTimer_SetConfig+0x178>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a63      	ldr	r2, [pc, #396]	; (8007b6c <TIM_SlaveTimer_SetConfig+0x2ec>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d009      	beq.n	80079f8 <TIM_SlaveTimer_SetConfig+0x178>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a61      	ldr	r2, [pc, #388]	; (8007b70 <TIM_SlaveTimer_SetConfig+0x2f0>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d004      	beq.n	80079f8 <TIM_SlaveTimer_SetConfig+0x178>
 80079ee:	f241 3150 	movw	r1, #4944	; 0x1350
 80079f2:	4860      	ldr	r0, [pc, #384]	; (8007b74 <TIM_SlaveTimer_SetConfig+0x2f4>)
 80079f4:	f7fa fbea 	bl	80021cc <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	691b      	ldr	r3, [r3, #16]
 80079fc:	2b0f      	cmp	r3, #15
 80079fe:	d904      	bls.n	8007a0a <TIM_SlaveTimer_SetConfig+0x18a>
 8007a00:	f241 3151 	movw	r1, #4945	; 0x1351
 8007a04:	485b      	ldr	r0, [pc, #364]	; (8007b74 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8007a06:	f7fa fbe1 	bl	80021cc <assert_failed>
      tmpccer = htim->Instance->CCER;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	6a1b      	ldr	r3, [r3, #32]
 8007a10:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	6812      	ldr	r2, [r2, #0]
 8007a1a:	6a12      	ldr	r2, [r2, #32]
 8007a1c:	f022 0201 	bic.w	r2, r2, #1
 8007a20:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	699b      	ldr	r3, [r3, #24]
 8007a28:	613b      	str	r3, [r7, #16]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a30:	613b      	str	r3, [r7, #16]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	011b      	lsls	r3, r3, #4
 8007a38:	693a      	ldr	r2, [r7, #16]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCMR1 = tmpccmr1;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	693a      	ldr	r2, [r7, #16]
 8007a44:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	621a      	str	r2, [r3, #32]
    break;
 8007a4e:	e102      	b.n	8007c56 <TIM_SlaveTimer_SetConfig+0x3d6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a44      	ldr	r2, [pc, #272]	; (8007b68 <TIM_SlaveTimer_SetConfig+0x2e8>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d013      	beq.n	8007a82 <TIM_SlaveTimer_SetConfig+0x202>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a62:	d00e      	beq.n	8007a82 <TIM_SlaveTimer_SetConfig+0x202>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a40      	ldr	r2, [pc, #256]	; (8007b6c <TIM_SlaveTimer_SetConfig+0x2ec>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d009      	beq.n	8007a82 <TIM_SlaveTimer_SetConfig+0x202>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a3f      	ldr	r2, [pc, #252]	; (8007b70 <TIM_SlaveTimer_SetConfig+0x2f0>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d004      	beq.n	8007a82 <TIM_SlaveTimer_SetConfig+0x202>
 8007a78:	f241 3166 	movw	r1, #4966	; 0x1366
 8007a7c:	483d      	ldr	r0, [pc, #244]	; (8007b74 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8007a7e:	f7fa fba5 	bl	80021cc <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a8a:	d014      	beq.n	8007ab6 <TIM_SlaveTimer_SetConfig+0x236>
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d010      	beq.n	8007ab6 <TIM_SlaveTimer_SetConfig+0x236>
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00c      	beq.n	8007ab6 <TIM_SlaveTimer_SetConfig+0x236>
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	2b02      	cmp	r3, #2
 8007aa2:	d008      	beq.n	8007ab6 <TIM_SlaveTimer_SetConfig+0x236>
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	2b0a      	cmp	r3, #10
 8007aaa:	d004      	beq.n	8007ab6 <TIM_SlaveTimer_SetConfig+0x236>
 8007aac:	f241 3167 	movw	r1, #4967	; 0x1367
 8007ab0:	4830      	ldr	r0, [pc, #192]	; (8007b74 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8007ab2:	f7fa fb8b 	bl	80021cc <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	2b0f      	cmp	r3, #15
 8007abc:	d904      	bls.n	8007ac8 <TIM_SlaveTimer_SetConfig+0x248>
 8007abe:	f241 3168 	movw	r1, #4968	; 0x1368
 8007ac2:	482c      	ldr	r0, [pc, #176]	; (8007b74 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8007ac4:	f7fa fb82 	bl	80021cc <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6818      	ldr	r0, [r3, #0]
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	6899      	ldr	r1, [r3, #8]
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	f000 f929 	bl	8007d2c <TIM_TI1_ConfigInputStage>
    break;
 8007ada:	e0bc      	b.n	8007c56 <TIM_SlaveTimer_SetConfig+0x3d6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a21      	ldr	r2, [pc, #132]	; (8007b68 <TIM_SlaveTimer_SetConfig+0x2e8>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d013      	beq.n	8007b0e <TIM_SlaveTimer_SetConfig+0x28e>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aee:	d00e      	beq.n	8007b0e <TIM_SlaveTimer_SetConfig+0x28e>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a1d      	ldr	r2, [pc, #116]	; (8007b6c <TIM_SlaveTimer_SetConfig+0x2ec>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d009      	beq.n	8007b0e <TIM_SlaveTimer_SetConfig+0x28e>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a1c      	ldr	r2, [pc, #112]	; (8007b70 <TIM_SlaveTimer_SetConfig+0x2f0>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d004      	beq.n	8007b0e <TIM_SlaveTimer_SetConfig+0x28e>
 8007b04:	f241 3174 	movw	r1, #4980	; 0x1374
 8007b08:	481a      	ldr	r0, [pc, #104]	; (8007b74 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8007b0a:	f7fa fb5f 	bl	80021cc <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b16:	d014      	beq.n	8007b42 <TIM_SlaveTimer_SetConfig+0x2c2>
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d010      	beq.n	8007b42 <TIM_SlaveTimer_SetConfig+0x2c2>
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00c      	beq.n	8007b42 <TIM_SlaveTimer_SetConfig+0x2c2>
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	2b02      	cmp	r3, #2
 8007b2e:	d008      	beq.n	8007b42 <TIM_SlaveTimer_SetConfig+0x2c2>
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	2b0a      	cmp	r3, #10
 8007b36:	d004      	beq.n	8007b42 <TIM_SlaveTimer_SetConfig+0x2c2>
 8007b38:	f241 3175 	movw	r1, #4981	; 0x1375
 8007b3c:	480d      	ldr	r0, [pc, #52]	; (8007b74 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8007b3e:	f7fa fb45 	bl	80021cc <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	2b0f      	cmp	r3, #15
 8007b48:	d904      	bls.n	8007b54 <TIM_SlaveTimer_SetConfig+0x2d4>
 8007b4a:	f241 3176 	movw	r1, #4982	; 0x1376
 8007b4e:	4809      	ldr	r0, [pc, #36]	; (8007b74 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8007b50:	f7fa fb3c 	bl	80021cc <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6818      	ldr	r0, [r3, #0]
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	6899      	ldr	r1, [r3, #8]
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	461a      	mov	r2, r3
 8007b62:	f000 f955 	bl	8007e10 <TIM_TI2_ConfigInputStage>
    break;
 8007b66:	e076      	b.n	8007c56 <TIM_SlaveTimer_SetConfig+0x3d6>
 8007b68:	40012c00 	.word	0x40012c00
 8007b6c:	40000400 	.word	0x40000400
 8007b70:	40000800 	.word	0x40000800
 8007b74:	08009ac0 	.word	0x08009ac0
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a38      	ldr	r2, [pc, #224]	; (8007c60 <TIM_SlaveTimer_SetConfig+0x3e0>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d062      	beq.n	8007c48 <TIM_SlaveTimer_SetConfig+0x3c8>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b8a:	d05d      	beq.n	8007c48 <TIM_SlaveTimer_SetConfig+0x3c8>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a34      	ldr	r2, [pc, #208]	; (8007c64 <TIM_SlaveTimer_SetConfig+0x3e4>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d058      	beq.n	8007c48 <TIM_SlaveTimer_SetConfig+0x3c8>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a33      	ldr	r2, [pc, #204]	; (8007c68 <TIM_SlaveTimer_SetConfig+0x3e8>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d053      	beq.n	8007c48 <TIM_SlaveTimer_SetConfig+0x3c8>
 8007ba0:	f241 3182 	movw	r1, #4994	; 0x1382
 8007ba4:	4831      	ldr	r0, [pc, #196]	; (8007c6c <TIM_SlaveTimer_SetConfig+0x3ec>)
 8007ba6:	f7fa fb11 	bl	80021cc <assert_failed>
    break;
 8007baa:	e04d      	b.n	8007c48 <TIM_SlaveTimer_SetConfig+0x3c8>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a2b      	ldr	r2, [pc, #172]	; (8007c60 <TIM_SlaveTimer_SetConfig+0x3e0>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d04a      	beq.n	8007c4c <TIM_SlaveTimer_SetConfig+0x3cc>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bbe:	d045      	beq.n	8007c4c <TIM_SlaveTimer_SetConfig+0x3cc>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a27      	ldr	r2, [pc, #156]	; (8007c64 <TIM_SlaveTimer_SetConfig+0x3e4>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d040      	beq.n	8007c4c <TIM_SlaveTimer_SetConfig+0x3cc>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a26      	ldr	r2, [pc, #152]	; (8007c68 <TIM_SlaveTimer_SetConfig+0x3e8>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d03b      	beq.n	8007c4c <TIM_SlaveTimer_SetConfig+0x3cc>
 8007bd4:	f241 3189 	movw	r1, #5001	; 0x1389
 8007bd8:	4824      	ldr	r0, [pc, #144]	; (8007c6c <TIM_SlaveTimer_SetConfig+0x3ec>)
 8007bda:	f7fa faf7 	bl	80021cc <assert_failed>
    break;
 8007bde:	e035      	b.n	8007c4c <TIM_SlaveTimer_SetConfig+0x3cc>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a1e      	ldr	r2, [pc, #120]	; (8007c60 <TIM_SlaveTimer_SetConfig+0x3e0>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d032      	beq.n	8007c50 <TIM_SlaveTimer_SetConfig+0x3d0>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bf2:	d02d      	beq.n	8007c50 <TIM_SlaveTimer_SetConfig+0x3d0>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a1a      	ldr	r2, [pc, #104]	; (8007c64 <TIM_SlaveTimer_SetConfig+0x3e4>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d028      	beq.n	8007c50 <TIM_SlaveTimer_SetConfig+0x3d0>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a19      	ldr	r2, [pc, #100]	; (8007c68 <TIM_SlaveTimer_SetConfig+0x3e8>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d023      	beq.n	8007c50 <TIM_SlaveTimer_SetConfig+0x3d0>
 8007c08:	f241 3190 	movw	r1, #5008	; 0x1390
 8007c0c:	4817      	ldr	r0, [pc, #92]	; (8007c6c <TIM_SlaveTimer_SetConfig+0x3ec>)
 8007c0e:	f7fa fadd 	bl	80021cc <assert_failed>
    break;
 8007c12:	e01d      	b.n	8007c50 <TIM_SlaveTimer_SetConfig+0x3d0>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a11      	ldr	r2, [pc, #68]	; (8007c60 <TIM_SlaveTimer_SetConfig+0x3e0>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d01a      	beq.n	8007c54 <TIM_SlaveTimer_SetConfig+0x3d4>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c26:	d015      	beq.n	8007c54 <TIM_SlaveTimer_SetConfig+0x3d4>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a0d      	ldr	r2, [pc, #52]	; (8007c64 <TIM_SlaveTimer_SetConfig+0x3e4>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d010      	beq.n	8007c54 <TIM_SlaveTimer_SetConfig+0x3d4>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a0c      	ldr	r2, [pc, #48]	; (8007c68 <TIM_SlaveTimer_SetConfig+0x3e8>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d00b      	beq.n	8007c54 <TIM_SlaveTimer_SetConfig+0x3d4>
 8007c3c:	f241 3197 	movw	r1, #5015	; 0x1397
 8007c40:	480a      	ldr	r0, [pc, #40]	; (8007c6c <TIM_SlaveTimer_SetConfig+0x3ec>)
 8007c42:	f7fa fac3 	bl	80021cc <assert_failed>
    break;
 8007c46:	e005      	b.n	8007c54 <TIM_SlaveTimer_SetConfig+0x3d4>
    break;
 8007c48:	bf00      	nop
 8007c4a:	e004      	b.n	8007c56 <TIM_SlaveTimer_SetConfig+0x3d6>
    break;
 8007c4c:	bf00      	nop
 8007c4e:	e002      	b.n	8007c56 <TIM_SlaveTimer_SetConfig+0x3d6>
    break;
 8007c50:	bf00      	nop
 8007c52:	e000      	b.n	8007c56 <TIM_SlaveTimer_SetConfig+0x3d6>
    break;
 8007c54:	bf00      	nop
  }
}
 8007c56:	bf00      	nop
 8007c58:	3718      	adds	r7, #24
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	40012c00 	.word	0x40012c00
 8007c64:	40000400 	.word	0x40000400
 8007c68:	40000800 	.word	0x40000800
 8007c6c:	08009ac0 	.word	0x08009ac0

08007c70 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b087      	sub	sp, #28
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	607a      	str	r2, [r7, #4]
 8007c7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8007c82:	2300      	movs	r3, #0
 8007c84:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6a1b      	ldr	r3, [r3, #32]
 8007c8a:	f023 0201 	bic.w	r2, r3, #1
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	699b      	ldr	r3, [r3, #24]
 8007c96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6a1b      	ldr	r3, [r3, #32]
 8007c9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	4a1f      	ldr	r2, [pc, #124]	; (8007d20 <TIM_TI1_SetConfig+0xb0>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d00b      	beq.n	8007cbe <TIM_TI1_SetConfig+0x4e>
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cac:	d007      	beq.n	8007cbe <TIM_TI1_SetConfig+0x4e>
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	4a1c      	ldr	r2, [pc, #112]	; (8007d24 <TIM_TI1_SetConfig+0xb4>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d003      	beq.n	8007cbe <TIM_TI1_SetConfig+0x4e>
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	4a1b      	ldr	r2, [pc, #108]	; (8007d28 <TIM_TI1_SetConfig+0xb8>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d101      	bne.n	8007cc2 <TIM_TI1_SetConfig+0x52>
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e000      	b.n	8007cc4 <TIM_TI1_SetConfig+0x54>
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d008      	beq.n	8007cda <TIM_TI1_SetConfig+0x6a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	f023 0303 	bic.w	r3, r3, #3
 8007cce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007cd0:	697a      	ldr	r2, [r7, #20]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	617b      	str	r3, [r7, #20]
 8007cd8:	e003      	b.n	8007ce2 <TIM_TI1_SetConfig+0x72>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	f043 0301 	orr.w	r3, r3, #1
 8007ce0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ce8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	011b      	lsls	r3, r3, #4
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	697a      	ldr	r2, [r7, #20]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	f023 030a 	bic.w	r3, r3, #10
 8007cfc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	f003 030a 	and.w	r3, r3, #10
 8007d04:	693a      	ldr	r2, [r7, #16]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	697a      	ldr	r2, [r7, #20]
 8007d0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	693a      	ldr	r2, [r7, #16]
 8007d14:	621a      	str	r2, [r3, #32]
}
 8007d16:	bf00      	nop
 8007d18:	371c      	adds	r7, #28
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bc80      	pop	{r7}
 8007d1e:	4770      	bx	lr
 8007d20:	40012c00 	.word	0x40012c00
 8007d24:	40000400 	.word	0x40000400
 8007d28:	40000800 	.word	0x40000800

08007d2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b087      	sub	sp, #28
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6a1b      	ldr	r3, [r3, #32]
 8007d44:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6a1b      	ldr	r3, [r3, #32]
 8007d4a:	f023 0201 	bic.w	r2, r3, #1
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	699b      	ldr	r3, [r3, #24]
 8007d56:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	011b      	lsls	r3, r3, #4
 8007d64:	697a      	ldr	r2, [r7, #20]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	f023 030a 	bic.w	r3, r3, #10
 8007d70:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8007d72:	693a      	ldr	r2, [r7, #16]
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	697a      	ldr	r2, [r7, #20]
 8007d7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	693a      	ldr	r2, [r7, #16]
 8007d84:	621a      	str	r2, [r3, #32]
}
 8007d86:	bf00      	nop
 8007d88:	371c      	adds	r7, #28
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bc80      	pop	{r7}
 8007d8e:	4770      	bx	lr

08007d90 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b087      	sub	sp, #28
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
 8007d9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8007da2:	2300      	movs	r3, #0
 8007da4:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6a1b      	ldr	r3, [r3, #32]
 8007daa:	f023 0210 	bic.w	r2, r3, #16
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	699b      	ldr	r3, [r3, #24]
 8007db6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6a1b      	ldr	r3, [r3, #32]
 8007dbc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	021b      	lsls	r3, r3, #8
 8007dca:	697a      	ldr	r2, [r7, #20]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007dd6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	031b      	lsls	r3, r3, #12
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	697a      	ldr	r2, [r7, #20]
 8007de0:	4313      	orrs	r3, r2
 8007de2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007dea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	011b      	lsls	r3, r3, #4
 8007df0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007df4:	693a      	ldr	r2, [r7, #16]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	697a      	ldr	r2, [r7, #20]
 8007dfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	693a      	ldr	r2, [r7, #16]
 8007e04:	621a      	str	r2, [r3, #32]
}
 8007e06:	bf00      	nop
 8007e08:	371c      	adds	r7, #28
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bc80      	pop	{r7}
 8007e0e:	4770      	bx	lr

08007e10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b087      	sub	sp, #28
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8007e20:	2300      	movs	r3, #0
 8007e22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6a1b      	ldr	r3, [r3, #32]
 8007e28:	f023 0210 	bic.w	r2, r3, #16
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	699b      	ldr	r3, [r3, #24]
 8007e34:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6a1b      	ldr	r3, [r3, #32]
 8007e3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e42:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	031b      	lsls	r3, r3, #12
 8007e48:	697a      	ldr	r2, [r7, #20]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e54:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	011b      	lsls	r3, r3, #4
 8007e5a:	693a      	ldr	r2, [r7, #16]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	693a      	ldr	r2, [r7, #16]
 8007e6a:	621a      	str	r2, [r3, #32]
}
 8007e6c:	bf00      	nop
 8007e6e:	371c      	adds	r7, #28
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bc80      	pop	{r7}
 8007e74:	4770      	bx	lr

08007e76 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be 
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007e76:	b480      	push	{r7}
 8007e78:	b087      	sub	sp, #28
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	60f8      	str	r0, [r7, #12]
 8007e7e:	60b9      	str	r1, [r7, #8]
 8007e80:	607a      	str	r2, [r7, #4]
 8007e82:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8007e84:	2300      	movs	r3, #0
 8007e86:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6a1b      	ldr	r3, [r3, #32]
 8007e90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	69db      	ldr	r3, [r3, #28]
 8007e9c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6a1b      	ldr	r3, [r3, #32]
 8007ea2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	f023 0303 	bic.w	r3, r3, #3
 8007eaa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007eac:	697a      	ldr	r2, [r7, #20]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007eba:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	011b      	lsls	r3, r3, #4
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	697a      	ldr	r2, [r7, #20]
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007ece:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	021b      	lsls	r3, r3, #8
 8007ed4:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007ed8:	693a      	ldr	r2, [r7, #16]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	697a      	ldr	r2, [r7, #20]
 8007ee2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	693a      	ldr	r2, [r7, #16]
 8007ee8:	621a      	str	r2, [r3, #32]
}
 8007eea:	bf00      	nop
 8007eec:	371c      	adds	r7, #28
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bc80      	pop	{r7}
 8007ef2:	4770      	bx	lr

08007ef4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b087      	sub	sp, #28
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
 8007f00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8007f02:	2300      	movs	r3, #0
 8007f04:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8007f06:	2300      	movs	r3, #0
 8007f08:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	6a1b      	ldr	r3, [r3, #32]
 8007f0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	69db      	ldr	r3, [r3, #28]
 8007f1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6a1b      	ldr	r3, [r3, #32]
 8007f20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f28:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	021b      	lsls	r3, r3, #8
 8007f2e:	697a      	ldr	r2, [r7, #20]
 8007f30:	4313      	orrs	r3, r2
 8007f32:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f3a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	031b      	lsls	r3, r3, #12
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	697a      	ldr	r2, [r7, #20]
 8007f44:	4313      	orrs	r3, r2
 8007f46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f4e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	031b      	lsls	r3, r3, #12
 8007f54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f58:	693a      	ldr	r2, [r7, #16]
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	697a      	ldr	r2, [r7, #20]
 8007f62:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	621a      	str	r2, [r3, #32]
}
 8007f6a:	bf00      	nop
 8007f6c:	371c      	adds	r7, #28
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bc80      	pop	{r7}
 8007f72:	4770      	bx	lr

08007f74 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8007f80:	2300      	movs	r3, #0
 8007f82:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f90:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8007f92:	887b      	ldrh	r3, [r7, #2]
 8007f94:	f043 0307 	orr.w	r3, r3, #7
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	609a      	str	r2, [r3, #8]
}
 8007fa8:	bf00      	nop
 8007faa:	3714      	adds	r7, #20
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bc80      	pop	{r7}
 8007fb0:	4770      	bx	lr

08007fb2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007fb2:	b480      	push	{r7}
 8007fb4:	b087      	sub	sp, #28
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	60f8      	str	r0, [r7, #12]
 8007fba:	60b9      	str	r1, [r7, #8]
 8007fbc:	607a      	str	r2, [r7, #4]
 8007fbe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007fd0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	021a      	lsls	r2, r3, #8
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	431a      	orrs	r2, r3
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	697a      	ldr	r2, [r7, #20]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	697a      	ldr	r2, [r7, #20]
 8007fe8:	609a      	str	r2, [r3, #8]
}
 8007fea:	bf00      	nop
 8007fec:	371c      	adds	r7, #28
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bc80      	pop	{r7}
 8007ff2:	4770      	bx	lr

08007ff4 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b086      	sub	sp, #24
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8008000:	2300      	movs	r3, #0
 8008002:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	4a20      	ldr	r2, [pc, #128]	; (8008088 <TIM_CCxChannelCmd+0x94>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d010      	beq.n	800802e <TIM_CCxChannelCmd+0x3a>
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008012:	d00c      	beq.n	800802e <TIM_CCxChannelCmd+0x3a>
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	4a1d      	ldr	r2, [pc, #116]	; (800808c <TIM_CCxChannelCmd+0x98>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d008      	beq.n	800802e <TIM_CCxChannelCmd+0x3a>
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	4a1c      	ldr	r2, [pc, #112]	; (8008090 <TIM_CCxChannelCmd+0x9c>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d004      	beq.n	800802e <TIM_CCxChannelCmd+0x3a>
 8008024:	f241 41f7 	movw	r1, #5367	; 0x14f7
 8008028:	481a      	ldr	r0, [pc, #104]	; (8008094 <TIM_CCxChannelCmd+0xa0>)
 800802a:	f7fa f8cf 	bl	80021cc <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d010      	beq.n	8008056 <TIM_CCxChannelCmd+0x62>
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	2b04      	cmp	r3, #4
 8008038:	d00d      	beq.n	8008056 <TIM_CCxChannelCmd+0x62>
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	2b08      	cmp	r3, #8
 800803e:	d00a      	beq.n	8008056 <TIM_CCxChannelCmd+0x62>
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	2b0c      	cmp	r3, #12
 8008044:	d007      	beq.n	8008056 <TIM_CCxChannelCmd+0x62>
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	2b18      	cmp	r3, #24
 800804a:	d004      	beq.n	8008056 <TIM_CCxChannelCmd+0x62>
 800804c:	f241 41f8 	movw	r1, #5368	; 0x14f8
 8008050:	4810      	ldr	r0, [pc, #64]	; (8008094 <TIM_CCxChannelCmd+0xa0>)
 8008052:	f7fa f8bb 	bl	80021cc <assert_failed>

  tmp = TIM_CCER_CC1E << Channel;
 8008056:	2201      	movs	r2, #1
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	fa02 f303 	lsl.w	r3, r2, r3
 800805e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6a1a      	ldr	r2, [r3, #32]
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	43db      	mvns	r3, r3
 8008068:	401a      	ands	r2, r3
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6a1a      	ldr	r2, [r3, #32]
 8008072:	6879      	ldr	r1, [r7, #4]
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	fa01 f303 	lsl.w	r3, r1, r3
 800807a:	431a      	orrs	r2, r3
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	621a      	str	r2, [r3, #32]
}
 8008080:	bf00      	nop
 8008082:	3718      	adds	r7, #24
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	40012c00 	.word	0x40012c00
 800808c:	40000400 	.word	0x40000400
 8008090:	40000800 	.word	0x40000800
 8008094:	08009ac0 	.word	0x08009ac0

08008098 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 80080a2:	2300      	movs	r3, #0
 80080a4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a5f      	ldr	r2, [pc, #380]	; (8008228 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d004      	beq.n	80080ba <HAL_TIMEx_ConfigBreakDeadTime+0x22>
 80080b0:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 80080b4:	485d      	ldr	r0, [pc, #372]	; (800822c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80080b6:	f7fa f889 	bl	80021cc <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080c2:	d008      	beq.n	80080d6 <HAL_TIMEx_ConfigBreakDeadTime+0x3e>
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d004      	beq.n	80080d6 <HAL_TIMEx_ConfigBreakDeadTime+0x3e>
 80080cc:	f240 6109 	movw	r1, #1545	; 0x609
 80080d0:	4856      	ldr	r0, [pc, #344]	; (800822c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80080d2:	f7fa f87b 	bl	80021cc <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080de:	d008      	beq.n	80080f2 <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d004      	beq.n	80080f2 <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
 80080e8:	f240 610a 	movw	r1, #1546	; 0x60a
 80080ec:	484f      	ldr	r0, [pc, #316]	; (800822c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80080ee:	f7fa f86d 	bl	80021cc <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d013      	beq.n	8008122 <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008102:	d00e      	beq.n	8008122 <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800810c:	d009      	beq.n	8008122 <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008116:	d004      	beq.n	8008122 <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 8008118:	f240 610b 	movw	r1, #1547	; 0x60b
 800811c:	4843      	ldr	r0, [pc, #268]	; (800822c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800811e:	f7fa f855 	bl	80021cc <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	68db      	ldr	r3, [r3, #12]
 8008126:	2bff      	cmp	r3, #255	; 0xff
 8008128:	d904      	bls.n	8008134 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>
 800812a:	f240 610c 	movw	r1, #1548	; 0x60c
 800812e:	483f      	ldr	r0, [pc, #252]	; (800822c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8008130:	f7fa f84c 	bl	80021cc <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800813c:	d008      	beq.n	8008150 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d004      	beq.n	8008150 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8008146:	f240 610d 	movw	r1, #1549	; 0x60d
 800814a:	4838      	ldr	r0, [pc, #224]	; (800822c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800814c:	f7fa f83e 	bl	80021cc <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	695b      	ldr	r3, [r3, #20]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d009      	beq.n	800816c <HAL_TIMEx_ConfigBreakDeadTime+0xd4>
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	695b      	ldr	r3, [r3, #20]
 800815c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008160:	d004      	beq.n	800816c <HAL_TIMEx_ConfigBreakDeadTime+0xd4>
 8008162:	f240 610e 	movw	r1, #1550	; 0x60e
 8008166:	4831      	ldr	r0, [pc, #196]	; (800822c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8008168:	f7fa f830 	bl	80021cc <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	699b      	ldr	r3, [r3, #24]
 8008170:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008174:	d008      	beq.n	8008188 <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	699b      	ldr	r3, [r3, #24]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d004      	beq.n	8008188 <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 800817e:	f240 610f 	movw	r1, #1551	; 0x60f
 8008182:	482a      	ldr	r0, [pc, #168]	; (800822c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8008184:	f7fa f822 	bl	80021cc <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800818e:	2b01      	cmp	r3, #1
 8008190:	d101      	bne.n	8008196 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
 8008192:	2302      	movs	r3, #2
 8008194:	e044      	b.n	8008220 <HAL_TIMEx_ConfigBreakDeadTime+0x188>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2201      	movs	r2, #1
 800819a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	4313      	orrs	r3, r2
 80081aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	691b      	ldr	r3, [r3, #16]
 80081e0:	4313      	orrs	r3, r2
 80081e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	695b      	ldr	r3, [r3, #20]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	699b      	ldr	r3, [r3, #24]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	699b      	ldr	r3, [r3, #24]
 800820a:	4313      	orrs	r3, r2
 800820c:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	68fa      	ldr	r2, [r7, #12]
 8008214:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800821e:	2300      	movs	r3, #0
}
 8008220:	4618      	mov	r0, r3
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	40012c00 	.word	0x40012c00
 800822c:	08009b00 	.word	0x08009b00

08008230 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a43      	ldr	r2, [pc, #268]	; (800834c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d013      	beq.n	800826c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800824c:	d00e      	beq.n	800826c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a3f      	ldr	r2, [pc, #252]	; (8008350 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d009      	beq.n	800826c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a3d      	ldr	r2, [pc, #244]	; (8008354 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d004      	beq.n	800826c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8008262:	f44f 61c7 	mov.w	r1, #1592	; 0x638
 8008266:	483c      	ldr	r0, [pc, #240]	; (8008358 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008268:	f7f9 ffb0 	bl	80021cc <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d020      	beq.n	80082b6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2b10      	cmp	r3, #16
 800827a:	d01c      	beq.n	80082b6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2b20      	cmp	r3, #32
 8008282:	d018      	beq.n	80082b6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2b30      	cmp	r3, #48	; 0x30
 800828a:	d014      	beq.n	80082b6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2b40      	cmp	r3, #64	; 0x40
 8008292:	d010      	beq.n	80082b6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2b50      	cmp	r3, #80	; 0x50
 800829a:	d00c      	beq.n	80082b6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2b60      	cmp	r3, #96	; 0x60
 80082a2:	d008      	beq.n	80082b6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2b70      	cmp	r3, #112	; 0x70
 80082aa:	d004      	beq.n	80082b6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80082ac:	f240 6139 	movw	r1, #1593	; 0x639
 80082b0:	4829      	ldr	r0, [pc, #164]	; (8008358 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80082b2:	f7f9 ff8b 	bl	80021cc <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	2b80      	cmp	r3, #128	; 0x80
 80082bc:	d008      	beq.n	80082d0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d004      	beq.n	80082d0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 80082c6:	f240 613a 	movw	r1, #1594	; 0x63a
 80082ca:	4823      	ldr	r0, [pc, #140]	; (8008358 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80082cc:	f7f9 ff7e 	bl	80021cc <assert_failed>

  __HAL_LOCK(htim);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d101      	bne.n	80082de <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80082da:	2302      	movs	r3, #2
 80082dc:	e032      	b.n	8008344 <HAL_TIMEx_MasterConfigSynchronization+0x114>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2201      	movs	r2, #1
 80082e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2202      	movs	r2, #2
 80082ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	6812      	ldr	r2, [r2, #0]
 80082f6:	6852      	ldr	r2, [r2, #4]
 80082f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80082fc:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	6812      	ldr	r2, [r2, #0]
 8008306:	6851      	ldr	r1, [r2, #4]
 8008308:	683a      	ldr	r2, [r7, #0]
 800830a:	6812      	ldr	r2, [r2, #0]
 800830c:	430a      	orrs	r2, r1
 800830e:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	6812      	ldr	r2, [r2, #0]
 8008318:	6892      	ldr	r2, [r2, #8]
 800831a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800831e:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	6812      	ldr	r2, [r2, #0]
 8008328:	6891      	ldr	r1, [r2, #8]
 800832a:	683a      	ldr	r2, [r7, #0]
 800832c:	6852      	ldr	r2, [r2, #4]
 800832e:	430a      	orrs	r2, r1
 8008330:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2201      	movs	r2, #1
 8008336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	3708      	adds	r7, #8
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}
 800834c:	40012c00 	.word	0x40012c00
 8008350:	40000400 	.word	0x40000400
 8008354:	40000800 	.word	0x40000800
 8008358:	08009b00 	.word	0x08009b00

0800835c <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8008364:	bf00      	nop
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	bc80      	pop	{r7}
 800836c:	4770      	bx	lr

0800836e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800836e:	b480      	push	{r7}
 8008370:	b083      	sub	sp, #12
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008376:	bf00      	nop
 8008378:	370c      	adds	r7, #12
 800837a:	46bd      	mov	sp, r7
 800837c:	bc80      	pop	{r7}
 800837e:	4770      	bx	lr

08008380 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d101      	bne.n	8008392 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	e092      	b.n	80084b8 <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	699b      	ldr	r3, [r3, #24]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d02c      	beq.n	80083f4 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a48      	ldr	r2, [pc, #288]	; (80084c0 <HAL_UART_Init+0x140>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d00e      	beq.n	80083c2 <HAL_UART_Init+0x42>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a46      	ldr	r2, [pc, #280]	; (80084c4 <HAL_UART_Init+0x144>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d009      	beq.n	80083c2 <HAL_UART_Init+0x42>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a45      	ldr	r2, [pc, #276]	; (80084c8 <HAL_UART_Init+0x148>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d004      	beq.n	80083c2 <HAL_UART_Init+0x42>
 80083b8:	f240 110f 	movw	r1, #271	; 0x10f
 80083bc:	4843      	ldr	r0, [pc, #268]	; (80084cc <HAL_UART_Init+0x14c>)
 80083be:	f7f9 ff05 	bl	80021cc <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	699b      	ldr	r3, [r3, #24]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d028      	beq.n	800841c <HAL_UART_Init+0x9c>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083d2:	d023      	beq.n	800841c <HAL_UART_Init+0x9c>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	699b      	ldr	r3, [r3, #24]
 80083d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083dc:	d01e      	beq.n	800841c <HAL_UART_Init+0x9c>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	699b      	ldr	r3, [r3, #24]
 80083e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083e6:	d019      	beq.n	800841c <HAL_UART_Init+0x9c>
 80083e8:	f44f 7188 	mov.w	r1, #272	; 0x110
 80083ec:	4837      	ldr	r0, [pc, #220]	; (80084cc <HAL_UART_Init+0x14c>)
 80083ee:	f7f9 feed 	bl	80021cc <assert_failed>
 80083f2:	e013      	b.n	800841c <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a31      	ldr	r2, [pc, #196]	; (80084c0 <HAL_UART_Init+0x140>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d00e      	beq.n	800841c <HAL_UART_Init+0x9c>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a30      	ldr	r2, [pc, #192]	; (80084c4 <HAL_UART_Init+0x144>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d009      	beq.n	800841c <HAL_UART_Init+0x9c>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a2e      	ldr	r2, [pc, #184]	; (80084c8 <HAL_UART_Init+0x148>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d004      	beq.n	800841c <HAL_UART_Init+0x9c>
 8008412:	f44f 718a 	mov.w	r1, #276	; 0x114
 8008416:	482d      	ldr	r0, [pc, #180]	; (80084cc <HAL_UART_Init+0x14c>)
 8008418:	f7f9 fed8 	bl	80021cc <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d009      	beq.n	8008438 <HAL_UART_Init+0xb8>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800842c:	d004      	beq.n	8008438 <HAL_UART_Init+0xb8>
 800842e:	f44f 718b 	mov.w	r1, #278	; 0x116
 8008432:	4826      	ldr	r0, [pc, #152]	; (80084cc <HAL_UART_Init+0x14c>)
 8008434:	f7f9 feca 	bl	80021cc <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800843e:	b2db      	uxtb	r3, r3
 8008440:	2b00      	cmp	r3, #0
 8008442:	d106      	bne.n	8008452 <HAL_UART_Init+0xd2>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f7fa fa83 	bl	8002958 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2224      	movs	r2, #36	; 0x24
 8008456:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	6812      	ldr	r2, [r2, #0]
 8008462:	68d2      	ldr	r2, [r2, #12]
 8008464:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008468:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fb92 	bl	8008b94 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	6812      	ldr	r2, [r2, #0]
 8008478:	6912      	ldr	r2, [r2, #16]
 800847a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800847e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	6812      	ldr	r2, [r2, #0]
 8008488:	6952      	ldr	r2, [r2, #20]
 800848a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800848e:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	6812      	ldr	r2, [r2, #0]
 8008498:	68d2      	ldr	r2, [r2, #12]
 800849a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800849e:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2220      	movs	r2, #32
 80084aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2220      	movs	r2, #32
 80084b2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3708      	adds	r7, #8
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	40013800 	.word	0x40013800
 80084c4:	40004400 	.word	0x40004400
 80084c8:	40004800 	.word	0x40004800
 80084cc:	08009b44 	.word	0x08009b44

080084d0 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b088      	sub	sp, #32
 80084d4:	af02      	add	r7, sp, #8
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	603b      	str	r3, [r7, #0]
 80084dc:	4613      	mov	r3, r2
 80084de:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80084e0:	2300      	movs	r3, #0
 80084e2:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	2b20      	cmp	r3, #32
 80084ee:	f040 8082 	bne.w	80085f6 <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL) || (Size == 0U))
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d002      	beq.n	80084fe <HAL_UART_Transmit+0x2e>
 80084f8:	88fb      	ldrh	r3, [r7, #6]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d101      	bne.n	8008502 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	e07a      	b.n	80085f8 <HAL_UART_Transmit+0x128>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008508:	2b01      	cmp	r3, #1
 800850a:	d101      	bne.n	8008510 <HAL_UART_Transmit+0x40>
 800850c:	2302      	movs	r3, #2
 800850e:	e073      	b.n	80085f8 <HAL_UART_Transmit+0x128>
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2201      	movs	r2, #1
 8008514:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2200      	movs	r2, #0
 800851c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2221      	movs	r2, #33	; 0x21
 8008522:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008526:	f7fa faf1 	bl	8002b0c <HAL_GetTick>
 800852a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	88fa      	ldrh	r2, [r7, #6]
 8008530:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	88fa      	ldrh	r2, [r7, #6]
 8008536:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8008538:	e041      	b.n	80085be <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800853e:	b29b      	uxth	r3, r3
 8008540:	3b01      	subs	r3, #1
 8008542:	b29a      	uxth	r2, r3
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008550:	d121      	bne.n	8008596 <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	9300      	str	r3, [sp, #0]
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	2200      	movs	r2, #0
 800855a:	2180      	movs	r1, #128	; 0x80
 800855c:	68f8      	ldr	r0, [r7, #12]
 800855e:	f000 f9b1 	bl	80088c4 <UART_WaitOnFlagUntilTimeout>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d001      	beq.n	800856c <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8008568:	2303      	movs	r3, #3
 800856a:	e045      	b.n	80085f8 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	693a      	ldr	r2, [r7, #16]
 8008576:	8812      	ldrh	r2, [r2, #0]
 8008578:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800857c:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	691b      	ldr	r3, [r3, #16]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d103      	bne.n	800858e <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	3302      	adds	r3, #2
 800858a:	60bb      	str	r3, [r7, #8]
 800858c:	e017      	b.n	80085be <HAL_UART_Transmit+0xee>
        }
        else
        {
          pData +=1U;
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	3301      	adds	r3, #1
 8008592:	60bb      	str	r3, [r7, #8]
 8008594:	e013      	b.n	80085be <HAL_UART_Transmit+0xee>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	9300      	str	r3, [sp, #0]
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	2200      	movs	r2, #0
 800859e:	2180      	movs	r1, #128	; 0x80
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f000 f98f 	bl	80088c4 <UART_WaitOnFlagUntilTimeout>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d001      	beq.n	80085b0 <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 80085ac:	2303      	movs	r3, #3
 80085ae:	e023      	b.n	80085f8 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	1c59      	adds	r1, r3, #1
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0U)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d1b8      	bne.n	800853a <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	9300      	str	r3, [sp, #0]
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	2200      	movs	r2, #0
 80085d0:	2140      	movs	r1, #64	; 0x40
 80085d2:	68f8      	ldr	r0, [r7, #12]
 80085d4:	f000 f976 	bl	80088c4 <UART_WaitOnFlagUntilTimeout>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80085de:	2303      	movs	r3, #3
 80085e0:	e00a      	b.n	80085f8 <HAL_UART_Transmit+0x128>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2220      	movs	r2, #32
 80085e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2200      	movs	r2, #0
 80085ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80085f2:	2300      	movs	r3, #0
 80085f4:	e000      	b.n	80085f8 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 80085f6:	2302      	movs	r3, #2
  }
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3718      	adds	r7, #24
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <HAL_UART_Receive_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	4613      	mov	r3, r2
 800860c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008614:	b2db      	uxtb	r3, r3
 8008616:	2b20      	cmp	r3, #32
 8008618:	d140      	bne.n	800869c <HAL_UART_Receive_IT+0x9c>
  {
    if((pData == NULL) || (Size == 0U))
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d002      	beq.n	8008626 <HAL_UART_Receive_IT+0x26>
 8008620:	88fb      	ldrh	r3, [r7, #6]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d101      	bne.n	800862a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008626:	2301      	movs	r3, #1
 8008628:	e039      	b.n	800869e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008630:	2b01      	cmp	r3, #1
 8008632:	d101      	bne.n	8008638 <HAL_UART_Receive_IT+0x38>
 8008634:	2302      	movs	r3, #2
 8008636:	e032      	b.n	800869e <HAL_UART_Receive_IT+0x9e>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	68ba      	ldr	r2, [r7, #8]
 8008644:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	88fa      	ldrh	r2, [r7, #6]
 800864a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	88fa      	ldrh	r2, [r7, #6]
 8008650:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2200      	movs	r2, #0
 8008656:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2222      	movs	r2, #34	; 0x22
 800865c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2200      	movs	r2, #0
 8008664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	6812      	ldr	r2, [r2, #0]
 8008670:	68d2      	ldr	r2, [r2, #12]
 8008672:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008676:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	68fa      	ldr	r2, [r7, #12]
 800867e:	6812      	ldr	r2, [r2, #0]
 8008680:	6952      	ldr	r2, [r2, #20]
 8008682:	f042 0201 	orr.w	r2, r2, #1
 8008686:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	6812      	ldr	r2, [r2, #0]
 8008690:	68d2      	ldr	r2, [r2, #12]
 8008692:	f042 0220 	orr.w	r2, r2, #32
 8008696:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008698:	2300      	movs	r3, #0
 800869a:	e000      	b.n	800869e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800869c:	2302      	movs	r3, #2
  }
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3714      	adds	r7, #20
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bc80      	pop	{r7}
 80086a6:	4770      	bx	lr

080086a8 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b088      	sub	sp, #32
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	695b      	ldr	r3, [r3, #20]
 80086c6:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 80086c8:	2300      	movs	r3, #0
 80086ca:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 80086cc:	2300      	movs	r3, #0
 80086ce:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80086d0:	69fb      	ldr	r3, [r7, #28]
 80086d2:	f003 030f 	and.w	r3, r3, #15
 80086d6:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d10d      	bne.n	80086fa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	f003 0320 	and.w	r3, r3, #32
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d008      	beq.n	80086fa <HAL_UART_IRQHandler+0x52>
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	f003 0320 	and.w	r3, r3, #32
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d003      	beq.n	80086fa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 f9cd 	bl	8008a92 <UART_Receive_IT>
      return;
 80086f8:	e0cc      	b.n	8008894 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	f000 80ab 	beq.w	8008858 <HAL_UART_IRQHandler+0x1b0>
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	f003 0301 	and.w	r3, r3, #1
 8008708:	2b00      	cmp	r3, #0
 800870a:	d105      	bne.n	8008718 <HAL_UART_IRQHandler+0x70>
 800870c:	69bb      	ldr	r3, [r7, #24]
 800870e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008712:	2b00      	cmp	r3, #0
 8008714:	f000 80a0 	beq.w	8008858 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	f003 0301 	and.w	r3, r3, #1
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00a      	beq.n	8008738 <HAL_UART_IRQHandler+0x90>
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008728:	2b00      	cmp	r3, #0
 800872a:	d005      	beq.n	8008738 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008730:	f043 0201 	orr.w	r2, r3, #1
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	f003 0304 	and.w	r3, r3, #4
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00a      	beq.n	8008758 <HAL_UART_IRQHandler+0xb0>
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	f003 0301 	and.w	r3, r3, #1
 8008748:	2b00      	cmp	r3, #0
 800874a:	d005      	beq.n	8008758 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008750:	f043 0202 	orr.w	r2, r3, #2
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	f003 0302 	and.w	r3, r3, #2
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00a      	beq.n	8008778 <HAL_UART_IRQHandler+0xd0>
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	f003 0301 	and.w	r3, r3, #1
 8008768:	2b00      	cmp	r3, #0
 800876a:	d005      	beq.n	8008778 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008770:	f043 0204 	orr.w	r2, r3, #4
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	f003 0308 	and.w	r3, r3, #8
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00a      	beq.n	8008798 <HAL_UART_IRQHandler+0xf0>
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	f003 0301 	and.w	r3, r3, #1
 8008788:	2b00      	cmp	r3, #0
 800878a:	d005      	beq.n	8008798 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008790:	f043 0208 	orr.w	r2, r3, #8
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800879c:	2b00      	cmp	r3, #0
 800879e:	d078      	beq.n	8008892 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	f003 0320 	and.w	r3, r3, #32
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d007      	beq.n	80087ba <HAL_UART_IRQHandler+0x112>
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	f003 0320 	and.w	r3, r3, #32
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d002      	beq.n	80087ba <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 f96c 	bl	8008a92 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	695b      	ldr	r3, [r3, #20]
 80087c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	bf14      	ite	ne
 80087c8:	2301      	movne	r3, #1
 80087ca:	2300      	moveq	r3, #0
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087d4:	f003 0308 	and.w	r3, r3, #8
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d102      	bne.n	80087e2 <HAL_UART_IRQHandler+0x13a>
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d031      	beq.n	8008846 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 f8b8 	bl	8008958 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	695b      	ldr	r3, [r3, #20]
 80087ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d023      	beq.n	800883e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	6812      	ldr	r2, [r2, #0]
 80087fe:	6952      	ldr	r2, [r2, #20]
 8008800:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008804:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800880a:	2b00      	cmp	r3, #0
 800880c:	d013      	beq.n	8008836 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008812:	4a22      	ldr	r2, [pc, #136]	; (800889c <HAL_UART_IRQHandler+0x1f4>)
 8008814:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800881a:	4618      	mov	r0, r3
 800881c:	f7fb fcda 	bl	80041d4 <HAL_DMA_Abort_IT>
 8008820:	4603      	mov	r3, r0
 8008822:	2b00      	cmp	r3, #0
 8008824:	d016      	beq.n	8008854 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800882a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008830:	4610      	mov	r0, r2
 8008832:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008834:	e00e      	b.n	8008854 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 f83b 	bl	80088b2 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800883c:	e00a      	b.n	8008854 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 f837 	bl	80088b2 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008844:	e006      	b.n	8008854 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 f833 	bl	80088b2 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008852:	e01e      	b.n	8008892 <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008854:	bf00      	nop
    return;
 8008856:	e01c      	b.n	8008892 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800885e:	2b00      	cmp	r3, #0
 8008860:	d008      	beq.n	8008874 <HAL_UART_IRQHandler+0x1cc>
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008868:	2b00      	cmp	r3, #0
 800886a:	d003      	beq.n	8008874 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 f8a4 	bl	80089ba <UART_Transmit_IT>
    return;
 8008872:	e00f      	b.n	8008894 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800887a:	2b00      	cmp	r3, #0
 800887c:	d00a      	beq.n	8008894 <HAL_UART_IRQHandler+0x1ec>
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008884:	2b00      	cmp	r3, #0
 8008886:	d005      	beq.n	8008894 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 f8ea 	bl	8008a62 <UART_EndTransmit_IT>
    return;
 800888e:	bf00      	nop
 8008890:	e000      	b.n	8008894 <HAL_UART_IRQHandler+0x1ec>
    return;
 8008892:	bf00      	nop
  }
}
 8008894:	3720      	adds	r7, #32
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	08008993 	.word	0x08008993

080088a0 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 80088a8:	bf00      	nop
 80088aa:	370c      	adds	r7, #12
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bc80      	pop	{r7}
 80088b0:	4770      	bx	lr

080088b2 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80088b2:	b480      	push	{r7}
 80088b4:	b083      	sub	sp, #12
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 80088ba:	bf00      	nop
 80088bc:	370c      	adds	r7, #12
 80088be:	46bd      	mov	sp, r7
 80088c0:	bc80      	pop	{r7}
 80088c2:	4770      	bx	lr

080088c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	603b      	str	r3, [r7, #0]
 80088d0:	4613      	mov	r3, r2
 80088d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80088d4:	e02c      	b.n	8008930 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80088d6:	69bb      	ldr	r3, [r7, #24]
 80088d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088dc:	d028      	beq.n	8008930 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d007      	beq.n	80088f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80088e4:	f7fa f912 	bl	8002b0c <HAL_GetTick>
 80088e8:	4602      	mov	r2, r0
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	1ad2      	subs	r2, r2, r3
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d91d      	bls.n	8008930 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	6812      	ldr	r2, [r2, #0]
 80088fc:	68d2      	ldr	r2, [r2, #12]
 80088fe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008902:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	6812      	ldr	r2, [r2, #0]
 800890c:	6952      	ldr	r2, [r2, #20]
 800890e:	f022 0201 	bic.w	r2, r2, #1
 8008912:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2220      	movs	r2, #32
 8008918:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2220      	movs	r2, #32
 8008920:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2200      	movs	r2, #0
 8008928:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 800892c:	2303      	movs	r3, #3
 800892e:	e00f      	b.n	8008950 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	401a      	ands	r2, r3
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	429a      	cmp	r2, r3
 800893e:	bf0c      	ite	eq
 8008940:	2301      	moveq	r3, #1
 8008942:	2300      	movne	r3, #0
 8008944:	b2db      	uxtb	r3, r3
 8008946:	461a      	mov	r2, r3
 8008948:	79fb      	ldrb	r3, [r7, #7]
 800894a:	429a      	cmp	r2, r3
 800894c:	d0c3      	beq.n	80088d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 800894e:	2300      	movs	r3, #0
}
 8008950:	4618      	mov	r0, r3
 8008952:	3710      	adds	r7, #16
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	6812      	ldr	r2, [r2, #0]
 8008968:	68d2      	ldr	r2, [r2, #12]
 800896a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800896e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	6812      	ldr	r2, [r2, #0]
 8008978:	6952      	ldr	r2, [r2, #20]
 800897a:	f022 0201 	bic.w	r2, r2, #1
 800897e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2220      	movs	r2, #32
 8008984:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008988:	bf00      	nop
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	bc80      	pop	{r7}
 8008990:	4770      	bx	lr

08008992 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008992:	b580      	push	{r7, lr}
 8008994:	b084      	sub	sp, #16
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2200      	movs	r2, #0
 80089a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2200      	movs	r2, #0
 80089aa:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 80089ac:	68f8      	ldr	r0, [r7, #12]
 80089ae:	f7ff ff80 	bl	80088b2 <HAL_UART_ErrorCallback>
}
 80089b2:	bf00      	nop
 80089b4:	3710      	adds	r7, #16
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80089ba:	b480      	push	{r7}
 80089bc:	b085      	sub	sp, #20
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	2b21      	cmp	r3, #33	; 0x21
 80089cc:	d143      	bne.n	8008a56 <UART_Transmit_IT+0x9c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089d6:	d119      	bne.n	8008a0c <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6a1b      	ldr	r3, [r3, #32]
 80089dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	68fa      	ldr	r2, [r7, #12]
 80089e4:	8812      	ldrh	r2, [r2, #0]
 80089e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089ea:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	691b      	ldr	r3, [r3, #16]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d105      	bne.n	8008a00 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6a1b      	ldr	r3, [r3, #32]
 80089f8:	1c9a      	adds	r2, r3, #2
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	621a      	str	r2, [r3, #32]
 80089fe:	e00e      	b.n	8008a1e <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6a1b      	ldr	r3, [r3, #32]
 8008a04:	1c5a      	adds	r2, r3, #1
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	621a      	str	r2, [r3, #32]
 8008a0a:	e008      	b.n	8008a1e <UART_Transmit_IT+0x64>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6a1b      	ldr	r3, [r3, #32]
 8008a14:	1c58      	adds	r0, r3, #1
 8008a16:	6879      	ldr	r1, [r7, #4]
 8008a18:	6208      	str	r0, [r1, #32]
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0U)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	3b01      	subs	r3, #1
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10f      	bne.n	8008a52 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	6812      	ldr	r2, [r2, #0]
 8008a3a:	68d2      	ldr	r2, [r2, #12]
 8008a3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a40:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	6812      	ldr	r2, [r2, #0]
 8008a4a:	68d2      	ldr	r2, [r2, #12]
 8008a4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a50:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008a52:	2300      	movs	r3, #0
 8008a54:	e000      	b.n	8008a58 <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008a56:	2302      	movs	r3, #2
  }
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3714      	adds	r7, #20
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bc80      	pop	{r7}
 8008a60:	4770      	bx	lr

08008a62 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a62:	b580      	push	{r7, lr}
 8008a64:	b082      	sub	sp, #8
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	6812      	ldr	r2, [r2, #0]
 8008a72:	68d2      	ldr	r2, [r2, #12]
 8008a74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a78:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2220      	movs	r2, #32
 8008a7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f7ff ff0c 	bl	80088a0 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}

08008a92 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b084      	sub	sp, #16
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	2b22      	cmp	r3, #34	; 0x22
 8008aa4:	d171      	bne.n	8008b8a <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008aae:	d123      	bne.n	8008af8 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab4:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	691b      	ldr	r3, [r3, #16]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d10e      	bne.n	8008adc <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aca:	b29a      	uxth	r2, r3
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ad4:	1c9a      	adds	r2, r3, #2
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	629a      	str	r2, [r3, #40]	; 0x28
 8008ada:	e029      	b.n	8008b30 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	b29a      	uxth	r2, r3
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008af0:	1c5a      	adds	r2, r3, #1
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	629a      	str	r2, [r3, #40]	; 0x28
 8008af6:	e01b      	b.n	8008b30 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	691b      	ldr	r3, [r3, #16]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d10a      	bne.n	8008b16 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b04:	1c59      	adds	r1, r3, #1
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	6291      	str	r1, [r2, #40]	; 0x28
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	6812      	ldr	r2, [r2, #0]
 8008b0e:	6852      	ldr	r2, [r2, #4]
 8008b10:	b2d2      	uxtb	r2, r2
 8008b12:	701a      	strb	r2, [r3, #0]
 8008b14:	e00c      	b.n	8008b30 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b1a:	1c59      	adds	r1, r3, #1
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	6291      	str	r1, [r2, #40]	; 0x28
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	6812      	ldr	r2, [r2, #0]
 8008b24:	6852      	ldr	r2, [r2, #4]
 8008b26:	b2d2      	uxtb	r2, r2
 8008b28:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008b2c:	b2d2      	uxtb	r2, r2
 8008b2e:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	3b01      	subs	r3, #1
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d120      	bne.n	8008b86 <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	6812      	ldr	r2, [r2, #0]
 8008b4c:	68d2      	ldr	r2, [r2, #12]
 8008b4e:	f022 0220 	bic.w	r2, r2, #32
 8008b52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	6812      	ldr	r2, [r2, #0]
 8008b5c:	68d2      	ldr	r2, [r2, #12]
 8008b5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b62:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	6812      	ldr	r2, [r2, #0]
 8008b6c:	6952      	ldr	r2, [r2, #20]
 8008b6e:	f022 0201 	bic.w	r2, r2, #1
 8008b72:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2220      	movs	r2, #32
 8008b78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f7f9 f8cd 	bl	8001d1c <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8008b82:	2300      	movs	r3, #0
 8008b84:	e002      	b.n	8008b8c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008b86:	2300      	movs	r3, #0
 8008b88:	e000      	b.n	8008b8c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008b8a:	2302      	movs	r3, #2
  }
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3710      	adds	r7, #16
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b96:	b085      	sub	sp, #20
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	4aa2      	ldr	r2, [pc, #648]	; (8008e30 <UART_SetConfig+0x29c>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d904      	bls.n	8008bb4 <UART_SetConfig+0x20>
 8008baa:	f640 11a7 	movw	r1, #2471	; 0x9a7
 8008bae:	48a1      	ldr	r0, [pc, #644]	; (8008e34 <UART_SetConfig+0x2a0>)
 8008bb0:	f7f9 fb0c 	bl	80021cc <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d009      	beq.n	8008bd0 <UART_SetConfig+0x3c>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bc4:	d004      	beq.n	8008bd0 <UART_SetConfig+0x3c>
 8008bc6:	f640 11a8 	movw	r1, #2472	; 0x9a8
 8008bca:	489a      	ldr	r0, [pc, #616]	; (8008e34 <UART_SetConfig+0x2a0>)
 8008bcc:	f7f9 fafe 	bl	80021cc <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	691b      	ldr	r3, [r3, #16]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d00e      	beq.n	8008bf6 <UART_SetConfig+0x62>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008be0:	d009      	beq.n	8008bf6 <UART_SetConfig+0x62>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	691b      	ldr	r3, [r3, #16]
 8008be6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008bea:	d004      	beq.n	8008bf6 <UART_SetConfig+0x62>
 8008bec:	f640 11a9 	movw	r1, #2473	; 0x9a9
 8008bf0:	4890      	ldr	r0, [pc, #576]	; (8008e34 <UART_SetConfig+0x2a0>)
 8008bf2:	f7f9 faeb 	bl	80021cc <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	695a      	ldr	r2, [r3, #20]
 8008bfa:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8008bfe:	4013      	ands	r3, r2
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d103      	bne.n	8008c0c <UART_SetConfig+0x78>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	695b      	ldr	r3, [r3, #20]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d104      	bne.n	8008c16 <UART_SetConfig+0x82>
 8008c0c:	f640 11aa 	movw	r1, #2474	; 0x9aa
 8008c10:	4888      	ldr	r0, [pc, #544]	; (8008e34 <UART_SetConfig+0x2a0>)
 8008c12:	f7f9 fadb 	bl	80021cc <assert_failed>

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	6812      	ldr	r2, [r2, #0]
 8008c1e:	6912      	ldr	r2, [r2, #16]
 8008c20:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	68d2      	ldr	r2, [r2, #12]
 8008c28:	430a      	orrs	r2, r1
 8008c2a:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	689a      	ldr	r2, [r3, #8]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	691b      	ldr	r3, [r3, #16]
 8008c34:	431a      	orrs	r2, r3
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	695b      	ldr	r3, [r3, #20]
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	68fa      	ldr	r2, [r7, #12]
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008c50:	f023 030c 	bic.w	r3, r3, #12
 8008c54:	68f9      	ldr	r1, [r7, #12]
 8008c56:	430b      	orrs	r3, r1
 8008c58:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	6812      	ldr	r2, [r2, #0]
 8008c62:	6952      	ldr	r2, [r2, #20]
 8008c64:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	6992      	ldr	r2, [r2, #24]
 8008c6c:	430a      	orrs	r2, r1
 8008c6e:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a70      	ldr	r2, [pc, #448]	; (8008e38 <UART_SetConfig+0x2a4>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d16b      	bne.n	8008d52 <UART_SetConfig+0x1be>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681c      	ldr	r4, [r3, #0]
 8008c7e:	f7fc fc89 	bl	8005594 <HAL_RCC_GetPCLK2Freq>
 8008c82:	4602      	mov	r2, r0
 8008c84:	4613      	mov	r3, r2
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	4413      	add	r3, r2
 8008c8a:	009a      	lsls	r2, r3, #2
 8008c8c:	441a      	add	r2, r3
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c98:	4a68      	ldr	r2, [pc, #416]	; (8008e3c <UART_SetConfig+0x2a8>)
 8008c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c9e:	095b      	lsrs	r3, r3, #5
 8008ca0:	011d      	lsls	r5, r3, #4
 8008ca2:	f7fc fc77 	bl	8005594 <HAL_RCC_GetPCLK2Freq>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	4613      	mov	r3, r2
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	4413      	add	r3, r2
 8008cae:	009a      	lsls	r2, r3, #2
 8008cb0:	441a      	add	r2, r3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	fbb2 f6f3 	udiv	r6, r2, r3
 8008cbc:	f7fc fc6a 	bl	8005594 <HAL_RCC_GetPCLK2Freq>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	4413      	add	r3, r2
 8008cc8:	009a      	lsls	r2, r3, #2
 8008cca:	441a      	add	r2, r3
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cd6:	4a59      	ldr	r2, [pc, #356]	; (8008e3c <UART_SetConfig+0x2a8>)
 8008cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8008cdc:	095b      	lsrs	r3, r3, #5
 8008cde:	2264      	movs	r2, #100	; 0x64
 8008ce0:	fb02 f303 	mul.w	r3, r2, r3
 8008ce4:	1af3      	subs	r3, r6, r3
 8008ce6:	011b      	lsls	r3, r3, #4
 8008ce8:	3332      	adds	r3, #50	; 0x32
 8008cea:	4a54      	ldr	r2, [pc, #336]	; (8008e3c <UART_SetConfig+0x2a8>)
 8008cec:	fba2 2303 	umull	r2, r3, r2, r3
 8008cf0:	095b      	lsrs	r3, r3, #5
 8008cf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008cf6:	441d      	add	r5, r3
 8008cf8:	f7fc fc4c 	bl	8005594 <HAL_RCC_GetPCLK2Freq>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	4613      	mov	r3, r2
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	4413      	add	r3, r2
 8008d04:	009a      	lsls	r2, r3, #2
 8008d06:	441a      	add	r2, r3
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008d12:	f7fc fc3f 	bl	8005594 <HAL_RCC_GetPCLK2Freq>
 8008d16:	4602      	mov	r2, r0
 8008d18:	4613      	mov	r3, r2
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	4413      	add	r3, r2
 8008d1e:	009a      	lsls	r2, r3, #2
 8008d20:	441a      	add	r2, r3
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d2c:	4a43      	ldr	r2, [pc, #268]	; (8008e3c <UART_SetConfig+0x2a8>)
 8008d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8008d32:	095b      	lsrs	r3, r3, #5
 8008d34:	2264      	movs	r2, #100	; 0x64
 8008d36:	fb02 f303 	mul.w	r3, r2, r3
 8008d3a:	1af3      	subs	r3, r6, r3
 8008d3c:	011b      	lsls	r3, r3, #4
 8008d3e:	3332      	adds	r3, #50	; 0x32
 8008d40:	4a3e      	ldr	r2, [pc, #248]	; (8008e3c <UART_SetConfig+0x2a8>)
 8008d42:	fba2 2303 	umull	r2, r3, r2, r3
 8008d46:	095b      	lsrs	r3, r3, #5
 8008d48:	f003 030f 	and.w	r3, r3, #15
 8008d4c:	442b      	add	r3, r5
 8008d4e:	60a3      	str	r3, [r4, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8008d50:	e06a      	b.n	8008e28 <UART_SetConfig+0x294>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681c      	ldr	r4, [r3, #0]
 8008d56:	f7fc fc09 	bl	800556c <HAL_RCC_GetPCLK1Freq>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	4613      	mov	r3, r2
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	4413      	add	r3, r2
 8008d62:	009a      	lsls	r2, r3, #2
 8008d64:	441a      	add	r2, r3
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d70:	4a32      	ldr	r2, [pc, #200]	; (8008e3c <UART_SetConfig+0x2a8>)
 8008d72:	fba2 2303 	umull	r2, r3, r2, r3
 8008d76:	095b      	lsrs	r3, r3, #5
 8008d78:	011d      	lsls	r5, r3, #4
 8008d7a:	f7fc fbf7 	bl	800556c <HAL_RCC_GetPCLK1Freq>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	4613      	mov	r3, r2
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	4413      	add	r3, r2
 8008d86:	009a      	lsls	r2, r3, #2
 8008d88:	441a      	add	r2, r3
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	fbb2 f6f3 	udiv	r6, r2, r3
 8008d94:	f7fc fbea 	bl	800556c <HAL_RCC_GetPCLK1Freq>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	4413      	add	r3, r2
 8008da0:	009a      	lsls	r2, r3, #2
 8008da2:	441a      	add	r2, r3
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dae:	4a23      	ldr	r2, [pc, #140]	; (8008e3c <UART_SetConfig+0x2a8>)
 8008db0:	fba2 2303 	umull	r2, r3, r2, r3
 8008db4:	095b      	lsrs	r3, r3, #5
 8008db6:	2264      	movs	r2, #100	; 0x64
 8008db8:	fb02 f303 	mul.w	r3, r2, r3
 8008dbc:	1af3      	subs	r3, r6, r3
 8008dbe:	011b      	lsls	r3, r3, #4
 8008dc0:	3332      	adds	r3, #50	; 0x32
 8008dc2:	4a1e      	ldr	r2, [pc, #120]	; (8008e3c <UART_SetConfig+0x2a8>)
 8008dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8008dc8:	095b      	lsrs	r3, r3, #5
 8008dca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008dce:	441d      	add	r5, r3
 8008dd0:	f7fc fbcc 	bl	800556c <HAL_RCC_GetPCLK1Freq>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	4413      	add	r3, r2
 8008ddc:	009a      	lsls	r2, r3, #2
 8008dde:	441a      	add	r2, r3
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	fbb2 f6f3 	udiv	r6, r2, r3
 8008dea:	f7fc fbbf 	bl	800556c <HAL_RCC_GetPCLK1Freq>
 8008dee:	4602      	mov	r2, r0
 8008df0:	4613      	mov	r3, r2
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	4413      	add	r3, r2
 8008df6:	009a      	lsls	r2, r3, #2
 8008df8:	441a      	add	r2, r3
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e04:	4a0d      	ldr	r2, [pc, #52]	; (8008e3c <UART_SetConfig+0x2a8>)
 8008e06:	fba2 2303 	umull	r2, r3, r2, r3
 8008e0a:	095b      	lsrs	r3, r3, #5
 8008e0c:	2264      	movs	r2, #100	; 0x64
 8008e0e:	fb02 f303 	mul.w	r3, r2, r3
 8008e12:	1af3      	subs	r3, r6, r3
 8008e14:	011b      	lsls	r3, r3, #4
 8008e16:	3332      	adds	r3, #50	; 0x32
 8008e18:	4a08      	ldr	r2, [pc, #32]	; (8008e3c <UART_SetConfig+0x2a8>)
 8008e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e1e:	095b      	lsrs	r3, r3, #5
 8008e20:	f003 030f 	and.w	r3, r3, #15
 8008e24:	442b      	add	r3, r5
 8008e26:	60a3      	str	r3, [r4, #8]
}
 8008e28:	bf00      	nop
 8008e2a:	3714      	adds	r7, #20
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e30:	0044aa20 	.word	0x0044aa20
 8008e34:	08009b44 	.word	0x08009b44
 8008e38:	40013800 	.word	0x40013800
 8008e3c:	51eb851f 	.word	0x51eb851f

08008e40 <__libc_init_array>:
 8008e40:	b570      	push	{r4, r5, r6, lr}
 8008e42:	2500      	movs	r5, #0
 8008e44:	4e0c      	ldr	r6, [pc, #48]	; (8008e78 <__libc_init_array+0x38>)
 8008e46:	4c0d      	ldr	r4, [pc, #52]	; (8008e7c <__libc_init_array+0x3c>)
 8008e48:	1ba4      	subs	r4, r4, r6
 8008e4a:	10a4      	asrs	r4, r4, #2
 8008e4c:	42a5      	cmp	r5, r4
 8008e4e:	d109      	bne.n	8008e64 <__libc_init_array+0x24>
 8008e50:	f000 fc64 	bl	800971c <_init>
 8008e54:	2500      	movs	r5, #0
 8008e56:	4e0a      	ldr	r6, [pc, #40]	; (8008e80 <__libc_init_array+0x40>)
 8008e58:	4c0a      	ldr	r4, [pc, #40]	; (8008e84 <__libc_init_array+0x44>)
 8008e5a:	1ba4      	subs	r4, r4, r6
 8008e5c:	10a4      	asrs	r4, r4, #2
 8008e5e:	42a5      	cmp	r5, r4
 8008e60:	d105      	bne.n	8008e6e <__libc_init_array+0x2e>
 8008e62:	bd70      	pop	{r4, r5, r6, pc}
 8008e64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008e68:	4798      	blx	r3
 8008e6a:	3501      	adds	r5, #1
 8008e6c:	e7ee      	b.n	8008e4c <__libc_init_array+0xc>
 8008e6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008e72:	4798      	blx	r3
 8008e74:	3501      	adds	r5, #1
 8008e76:	e7f2      	b.n	8008e5e <__libc_init_array+0x1e>
 8008e78:	08009bd0 	.word	0x08009bd0
 8008e7c:	08009bd0 	.word	0x08009bd0
 8008e80:	08009bd0 	.word	0x08009bd0
 8008e84:	08009bd4 	.word	0x08009bd4

08008e88 <sniprintf>:
 8008e88:	b40c      	push	{r2, r3}
 8008e8a:	b530      	push	{r4, r5, lr}
 8008e8c:	4b17      	ldr	r3, [pc, #92]	; (8008eec <sniprintf+0x64>)
 8008e8e:	1e0c      	subs	r4, r1, #0
 8008e90:	b09d      	sub	sp, #116	; 0x74
 8008e92:	681d      	ldr	r5, [r3, #0]
 8008e94:	da08      	bge.n	8008ea8 <sniprintf+0x20>
 8008e96:	238b      	movs	r3, #139	; 0x8b
 8008e98:	f04f 30ff 	mov.w	r0, #4294967295
 8008e9c:	602b      	str	r3, [r5, #0]
 8008e9e:	b01d      	add	sp, #116	; 0x74
 8008ea0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ea4:	b002      	add	sp, #8
 8008ea6:	4770      	bx	lr
 8008ea8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008eac:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008eb0:	bf0c      	ite	eq
 8008eb2:	4623      	moveq	r3, r4
 8008eb4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008eb8:	9304      	str	r3, [sp, #16]
 8008eba:	9307      	str	r3, [sp, #28]
 8008ebc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008ec0:	9002      	str	r0, [sp, #8]
 8008ec2:	9006      	str	r0, [sp, #24]
 8008ec4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008ec8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008eca:	ab21      	add	r3, sp, #132	; 0x84
 8008ecc:	a902      	add	r1, sp, #8
 8008ece:	4628      	mov	r0, r5
 8008ed0:	9301      	str	r3, [sp, #4]
 8008ed2:	f000 f869 	bl	8008fa8 <_svfiprintf_r>
 8008ed6:	1c43      	adds	r3, r0, #1
 8008ed8:	bfbc      	itt	lt
 8008eda:	238b      	movlt	r3, #139	; 0x8b
 8008edc:	602b      	strlt	r3, [r5, #0]
 8008ede:	2c00      	cmp	r4, #0
 8008ee0:	d0dd      	beq.n	8008e9e <sniprintf+0x16>
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	9b02      	ldr	r3, [sp, #8]
 8008ee6:	701a      	strb	r2, [r3, #0]
 8008ee8:	e7d9      	b.n	8008e9e <sniprintf+0x16>
 8008eea:	bf00      	nop
 8008eec:	20000010 	.word	0x20000010

08008ef0 <__ssputs_r>:
 8008ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ef4:	688e      	ldr	r6, [r1, #8]
 8008ef6:	4682      	mov	sl, r0
 8008ef8:	429e      	cmp	r6, r3
 8008efa:	460c      	mov	r4, r1
 8008efc:	4691      	mov	r9, r2
 8008efe:	4698      	mov	r8, r3
 8008f00:	d835      	bhi.n	8008f6e <__ssputs_r+0x7e>
 8008f02:	898a      	ldrh	r2, [r1, #12]
 8008f04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f08:	d031      	beq.n	8008f6e <__ssputs_r+0x7e>
 8008f0a:	2302      	movs	r3, #2
 8008f0c:	6825      	ldr	r5, [r4, #0]
 8008f0e:	6909      	ldr	r1, [r1, #16]
 8008f10:	1a6f      	subs	r7, r5, r1
 8008f12:	6965      	ldr	r5, [r4, #20]
 8008f14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f18:	fb95 f5f3 	sdiv	r5, r5, r3
 8008f1c:	f108 0301 	add.w	r3, r8, #1
 8008f20:	443b      	add	r3, r7
 8008f22:	429d      	cmp	r5, r3
 8008f24:	bf38      	it	cc
 8008f26:	461d      	movcc	r5, r3
 8008f28:	0553      	lsls	r3, r2, #21
 8008f2a:	d531      	bpl.n	8008f90 <__ssputs_r+0xa0>
 8008f2c:	4629      	mov	r1, r5
 8008f2e:	f000 fb47 	bl	80095c0 <_malloc_r>
 8008f32:	4606      	mov	r6, r0
 8008f34:	b950      	cbnz	r0, 8008f4c <__ssputs_r+0x5c>
 8008f36:	230c      	movs	r3, #12
 8008f38:	f8ca 3000 	str.w	r3, [sl]
 8008f3c:	89a3      	ldrh	r3, [r4, #12]
 8008f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f46:	81a3      	strh	r3, [r4, #12]
 8008f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f4c:	463a      	mov	r2, r7
 8008f4e:	6921      	ldr	r1, [r4, #16]
 8008f50:	f000 fac4 	bl	80094dc <memcpy>
 8008f54:	89a3      	ldrh	r3, [r4, #12]
 8008f56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f5e:	81a3      	strh	r3, [r4, #12]
 8008f60:	6126      	str	r6, [r4, #16]
 8008f62:	443e      	add	r6, r7
 8008f64:	6026      	str	r6, [r4, #0]
 8008f66:	4646      	mov	r6, r8
 8008f68:	6165      	str	r5, [r4, #20]
 8008f6a:	1bed      	subs	r5, r5, r7
 8008f6c:	60a5      	str	r5, [r4, #8]
 8008f6e:	4546      	cmp	r6, r8
 8008f70:	bf28      	it	cs
 8008f72:	4646      	movcs	r6, r8
 8008f74:	4649      	mov	r1, r9
 8008f76:	4632      	mov	r2, r6
 8008f78:	6820      	ldr	r0, [r4, #0]
 8008f7a:	f000 faba 	bl	80094f2 <memmove>
 8008f7e:	68a3      	ldr	r3, [r4, #8]
 8008f80:	2000      	movs	r0, #0
 8008f82:	1b9b      	subs	r3, r3, r6
 8008f84:	60a3      	str	r3, [r4, #8]
 8008f86:	6823      	ldr	r3, [r4, #0]
 8008f88:	441e      	add	r6, r3
 8008f8a:	6026      	str	r6, [r4, #0]
 8008f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f90:	462a      	mov	r2, r5
 8008f92:	f000 fb73 	bl	800967c <_realloc_r>
 8008f96:	4606      	mov	r6, r0
 8008f98:	2800      	cmp	r0, #0
 8008f9a:	d1e1      	bne.n	8008f60 <__ssputs_r+0x70>
 8008f9c:	6921      	ldr	r1, [r4, #16]
 8008f9e:	4650      	mov	r0, sl
 8008fa0:	f000 fac2 	bl	8009528 <_free_r>
 8008fa4:	e7c7      	b.n	8008f36 <__ssputs_r+0x46>
	...

08008fa8 <_svfiprintf_r>:
 8008fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fac:	b09d      	sub	sp, #116	; 0x74
 8008fae:	9303      	str	r3, [sp, #12]
 8008fb0:	898b      	ldrh	r3, [r1, #12]
 8008fb2:	4680      	mov	r8, r0
 8008fb4:	061c      	lsls	r4, r3, #24
 8008fb6:	460d      	mov	r5, r1
 8008fb8:	4616      	mov	r6, r2
 8008fba:	d50f      	bpl.n	8008fdc <_svfiprintf_r+0x34>
 8008fbc:	690b      	ldr	r3, [r1, #16]
 8008fbe:	b96b      	cbnz	r3, 8008fdc <_svfiprintf_r+0x34>
 8008fc0:	2140      	movs	r1, #64	; 0x40
 8008fc2:	f000 fafd 	bl	80095c0 <_malloc_r>
 8008fc6:	6028      	str	r0, [r5, #0]
 8008fc8:	6128      	str	r0, [r5, #16]
 8008fca:	b928      	cbnz	r0, 8008fd8 <_svfiprintf_r+0x30>
 8008fcc:	230c      	movs	r3, #12
 8008fce:	f8c8 3000 	str.w	r3, [r8]
 8008fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd6:	e0c4      	b.n	8009162 <_svfiprintf_r+0x1ba>
 8008fd8:	2340      	movs	r3, #64	; 0x40
 8008fda:	616b      	str	r3, [r5, #20]
 8008fdc:	2300      	movs	r3, #0
 8008fde:	9309      	str	r3, [sp, #36]	; 0x24
 8008fe0:	2320      	movs	r3, #32
 8008fe2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fe6:	2330      	movs	r3, #48	; 0x30
 8008fe8:	f04f 0b01 	mov.w	fp, #1
 8008fec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ff0:	4637      	mov	r7, r6
 8008ff2:	463c      	mov	r4, r7
 8008ff4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d13c      	bne.n	8009076 <_svfiprintf_r+0xce>
 8008ffc:	ebb7 0a06 	subs.w	sl, r7, r6
 8009000:	d00b      	beq.n	800901a <_svfiprintf_r+0x72>
 8009002:	4653      	mov	r3, sl
 8009004:	4632      	mov	r2, r6
 8009006:	4629      	mov	r1, r5
 8009008:	4640      	mov	r0, r8
 800900a:	f7ff ff71 	bl	8008ef0 <__ssputs_r>
 800900e:	3001      	adds	r0, #1
 8009010:	f000 80a2 	beq.w	8009158 <_svfiprintf_r+0x1b0>
 8009014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009016:	4453      	add	r3, sl
 8009018:	9309      	str	r3, [sp, #36]	; 0x24
 800901a:	783b      	ldrb	r3, [r7, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	f000 809b 	beq.w	8009158 <_svfiprintf_r+0x1b0>
 8009022:	2300      	movs	r3, #0
 8009024:	f04f 32ff 	mov.w	r2, #4294967295
 8009028:	9304      	str	r3, [sp, #16]
 800902a:	9307      	str	r3, [sp, #28]
 800902c:	9205      	str	r2, [sp, #20]
 800902e:	9306      	str	r3, [sp, #24]
 8009030:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009034:	931a      	str	r3, [sp, #104]	; 0x68
 8009036:	2205      	movs	r2, #5
 8009038:	7821      	ldrb	r1, [r4, #0]
 800903a:	4850      	ldr	r0, [pc, #320]	; (800917c <_svfiprintf_r+0x1d4>)
 800903c:	f000 fa40 	bl	80094c0 <memchr>
 8009040:	1c67      	adds	r7, r4, #1
 8009042:	9b04      	ldr	r3, [sp, #16]
 8009044:	b9d8      	cbnz	r0, 800907e <_svfiprintf_r+0xd6>
 8009046:	06d9      	lsls	r1, r3, #27
 8009048:	bf44      	itt	mi
 800904a:	2220      	movmi	r2, #32
 800904c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009050:	071a      	lsls	r2, r3, #28
 8009052:	bf44      	itt	mi
 8009054:	222b      	movmi	r2, #43	; 0x2b
 8009056:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800905a:	7822      	ldrb	r2, [r4, #0]
 800905c:	2a2a      	cmp	r2, #42	; 0x2a
 800905e:	d016      	beq.n	800908e <_svfiprintf_r+0xe6>
 8009060:	2100      	movs	r1, #0
 8009062:	200a      	movs	r0, #10
 8009064:	9a07      	ldr	r2, [sp, #28]
 8009066:	4627      	mov	r7, r4
 8009068:	783b      	ldrb	r3, [r7, #0]
 800906a:	3401      	adds	r4, #1
 800906c:	3b30      	subs	r3, #48	; 0x30
 800906e:	2b09      	cmp	r3, #9
 8009070:	d950      	bls.n	8009114 <_svfiprintf_r+0x16c>
 8009072:	b1c9      	cbz	r1, 80090a8 <_svfiprintf_r+0x100>
 8009074:	e011      	b.n	800909a <_svfiprintf_r+0xf2>
 8009076:	2b25      	cmp	r3, #37	; 0x25
 8009078:	d0c0      	beq.n	8008ffc <_svfiprintf_r+0x54>
 800907a:	4627      	mov	r7, r4
 800907c:	e7b9      	b.n	8008ff2 <_svfiprintf_r+0x4a>
 800907e:	4a3f      	ldr	r2, [pc, #252]	; (800917c <_svfiprintf_r+0x1d4>)
 8009080:	463c      	mov	r4, r7
 8009082:	1a80      	subs	r0, r0, r2
 8009084:	fa0b f000 	lsl.w	r0, fp, r0
 8009088:	4318      	orrs	r0, r3
 800908a:	9004      	str	r0, [sp, #16]
 800908c:	e7d3      	b.n	8009036 <_svfiprintf_r+0x8e>
 800908e:	9a03      	ldr	r2, [sp, #12]
 8009090:	1d11      	adds	r1, r2, #4
 8009092:	6812      	ldr	r2, [r2, #0]
 8009094:	9103      	str	r1, [sp, #12]
 8009096:	2a00      	cmp	r2, #0
 8009098:	db01      	blt.n	800909e <_svfiprintf_r+0xf6>
 800909a:	9207      	str	r2, [sp, #28]
 800909c:	e004      	b.n	80090a8 <_svfiprintf_r+0x100>
 800909e:	4252      	negs	r2, r2
 80090a0:	f043 0302 	orr.w	r3, r3, #2
 80090a4:	9207      	str	r2, [sp, #28]
 80090a6:	9304      	str	r3, [sp, #16]
 80090a8:	783b      	ldrb	r3, [r7, #0]
 80090aa:	2b2e      	cmp	r3, #46	; 0x2e
 80090ac:	d10d      	bne.n	80090ca <_svfiprintf_r+0x122>
 80090ae:	787b      	ldrb	r3, [r7, #1]
 80090b0:	1c79      	adds	r1, r7, #1
 80090b2:	2b2a      	cmp	r3, #42	; 0x2a
 80090b4:	d132      	bne.n	800911c <_svfiprintf_r+0x174>
 80090b6:	9b03      	ldr	r3, [sp, #12]
 80090b8:	3702      	adds	r7, #2
 80090ba:	1d1a      	adds	r2, r3, #4
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	9203      	str	r2, [sp, #12]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	bfb8      	it	lt
 80090c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80090c8:	9305      	str	r3, [sp, #20]
 80090ca:	4c2d      	ldr	r4, [pc, #180]	; (8009180 <_svfiprintf_r+0x1d8>)
 80090cc:	2203      	movs	r2, #3
 80090ce:	7839      	ldrb	r1, [r7, #0]
 80090d0:	4620      	mov	r0, r4
 80090d2:	f000 f9f5 	bl	80094c0 <memchr>
 80090d6:	b138      	cbz	r0, 80090e8 <_svfiprintf_r+0x140>
 80090d8:	2340      	movs	r3, #64	; 0x40
 80090da:	1b00      	subs	r0, r0, r4
 80090dc:	fa03 f000 	lsl.w	r0, r3, r0
 80090e0:	9b04      	ldr	r3, [sp, #16]
 80090e2:	3701      	adds	r7, #1
 80090e4:	4303      	orrs	r3, r0
 80090e6:	9304      	str	r3, [sp, #16]
 80090e8:	7839      	ldrb	r1, [r7, #0]
 80090ea:	2206      	movs	r2, #6
 80090ec:	4825      	ldr	r0, [pc, #148]	; (8009184 <_svfiprintf_r+0x1dc>)
 80090ee:	1c7e      	adds	r6, r7, #1
 80090f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090f4:	f000 f9e4 	bl	80094c0 <memchr>
 80090f8:	2800      	cmp	r0, #0
 80090fa:	d035      	beq.n	8009168 <_svfiprintf_r+0x1c0>
 80090fc:	4b22      	ldr	r3, [pc, #136]	; (8009188 <_svfiprintf_r+0x1e0>)
 80090fe:	b9fb      	cbnz	r3, 8009140 <_svfiprintf_r+0x198>
 8009100:	9b03      	ldr	r3, [sp, #12]
 8009102:	3307      	adds	r3, #7
 8009104:	f023 0307 	bic.w	r3, r3, #7
 8009108:	3308      	adds	r3, #8
 800910a:	9303      	str	r3, [sp, #12]
 800910c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800910e:	444b      	add	r3, r9
 8009110:	9309      	str	r3, [sp, #36]	; 0x24
 8009112:	e76d      	b.n	8008ff0 <_svfiprintf_r+0x48>
 8009114:	fb00 3202 	mla	r2, r0, r2, r3
 8009118:	2101      	movs	r1, #1
 800911a:	e7a4      	b.n	8009066 <_svfiprintf_r+0xbe>
 800911c:	2300      	movs	r3, #0
 800911e:	240a      	movs	r4, #10
 8009120:	4618      	mov	r0, r3
 8009122:	9305      	str	r3, [sp, #20]
 8009124:	460f      	mov	r7, r1
 8009126:	783a      	ldrb	r2, [r7, #0]
 8009128:	3101      	adds	r1, #1
 800912a:	3a30      	subs	r2, #48	; 0x30
 800912c:	2a09      	cmp	r2, #9
 800912e:	d903      	bls.n	8009138 <_svfiprintf_r+0x190>
 8009130:	2b00      	cmp	r3, #0
 8009132:	d0ca      	beq.n	80090ca <_svfiprintf_r+0x122>
 8009134:	9005      	str	r0, [sp, #20]
 8009136:	e7c8      	b.n	80090ca <_svfiprintf_r+0x122>
 8009138:	fb04 2000 	mla	r0, r4, r0, r2
 800913c:	2301      	movs	r3, #1
 800913e:	e7f1      	b.n	8009124 <_svfiprintf_r+0x17c>
 8009140:	ab03      	add	r3, sp, #12
 8009142:	9300      	str	r3, [sp, #0]
 8009144:	462a      	mov	r2, r5
 8009146:	4b11      	ldr	r3, [pc, #68]	; (800918c <_svfiprintf_r+0x1e4>)
 8009148:	a904      	add	r1, sp, #16
 800914a:	4640      	mov	r0, r8
 800914c:	f3af 8000 	nop.w
 8009150:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009154:	4681      	mov	r9, r0
 8009156:	d1d9      	bne.n	800910c <_svfiprintf_r+0x164>
 8009158:	89ab      	ldrh	r3, [r5, #12]
 800915a:	065b      	lsls	r3, r3, #25
 800915c:	f53f af39 	bmi.w	8008fd2 <_svfiprintf_r+0x2a>
 8009160:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009162:	b01d      	add	sp, #116	; 0x74
 8009164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009168:	ab03      	add	r3, sp, #12
 800916a:	9300      	str	r3, [sp, #0]
 800916c:	462a      	mov	r2, r5
 800916e:	4b07      	ldr	r3, [pc, #28]	; (800918c <_svfiprintf_r+0x1e4>)
 8009170:	a904      	add	r1, sp, #16
 8009172:	4640      	mov	r0, r8
 8009174:	f000 f884 	bl	8009280 <_printf_i>
 8009178:	e7ea      	b.n	8009150 <_svfiprintf_r+0x1a8>
 800917a:	bf00      	nop
 800917c:	08009b9c 	.word	0x08009b9c
 8009180:	08009ba2 	.word	0x08009ba2
 8009184:	08009ba6 	.word	0x08009ba6
 8009188:	00000000 	.word	0x00000000
 800918c:	08008ef1 	.word	0x08008ef1

08009190 <_printf_common>:
 8009190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009194:	4691      	mov	r9, r2
 8009196:	461f      	mov	r7, r3
 8009198:	688a      	ldr	r2, [r1, #8]
 800919a:	690b      	ldr	r3, [r1, #16]
 800919c:	4606      	mov	r6, r0
 800919e:	4293      	cmp	r3, r2
 80091a0:	bfb8      	it	lt
 80091a2:	4613      	movlt	r3, r2
 80091a4:	f8c9 3000 	str.w	r3, [r9]
 80091a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80091ac:	460c      	mov	r4, r1
 80091ae:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80091b2:	b112      	cbz	r2, 80091ba <_printf_common+0x2a>
 80091b4:	3301      	adds	r3, #1
 80091b6:	f8c9 3000 	str.w	r3, [r9]
 80091ba:	6823      	ldr	r3, [r4, #0]
 80091bc:	0699      	lsls	r1, r3, #26
 80091be:	bf42      	ittt	mi
 80091c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80091c4:	3302      	addmi	r3, #2
 80091c6:	f8c9 3000 	strmi.w	r3, [r9]
 80091ca:	6825      	ldr	r5, [r4, #0]
 80091cc:	f015 0506 	ands.w	r5, r5, #6
 80091d0:	d107      	bne.n	80091e2 <_printf_common+0x52>
 80091d2:	f104 0a19 	add.w	sl, r4, #25
 80091d6:	68e3      	ldr	r3, [r4, #12]
 80091d8:	f8d9 2000 	ldr.w	r2, [r9]
 80091dc:	1a9b      	subs	r3, r3, r2
 80091de:	429d      	cmp	r5, r3
 80091e0:	db2a      	blt.n	8009238 <_printf_common+0xa8>
 80091e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80091e6:	6822      	ldr	r2, [r4, #0]
 80091e8:	3300      	adds	r3, #0
 80091ea:	bf18      	it	ne
 80091ec:	2301      	movne	r3, #1
 80091ee:	0692      	lsls	r2, r2, #26
 80091f0:	d42f      	bmi.n	8009252 <_printf_common+0xc2>
 80091f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091f6:	4639      	mov	r1, r7
 80091f8:	4630      	mov	r0, r6
 80091fa:	47c0      	blx	r8
 80091fc:	3001      	adds	r0, #1
 80091fe:	d022      	beq.n	8009246 <_printf_common+0xb6>
 8009200:	6823      	ldr	r3, [r4, #0]
 8009202:	68e5      	ldr	r5, [r4, #12]
 8009204:	f003 0306 	and.w	r3, r3, #6
 8009208:	2b04      	cmp	r3, #4
 800920a:	bf18      	it	ne
 800920c:	2500      	movne	r5, #0
 800920e:	f8d9 2000 	ldr.w	r2, [r9]
 8009212:	f04f 0900 	mov.w	r9, #0
 8009216:	bf08      	it	eq
 8009218:	1aad      	subeq	r5, r5, r2
 800921a:	68a3      	ldr	r3, [r4, #8]
 800921c:	6922      	ldr	r2, [r4, #16]
 800921e:	bf08      	it	eq
 8009220:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009224:	4293      	cmp	r3, r2
 8009226:	bfc4      	itt	gt
 8009228:	1a9b      	subgt	r3, r3, r2
 800922a:	18ed      	addgt	r5, r5, r3
 800922c:	341a      	adds	r4, #26
 800922e:	454d      	cmp	r5, r9
 8009230:	d11b      	bne.n	800926a <_printf_common+0xda>
 8009232:	2000      	movs	r0, #0
 8009234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009238:	2301      	movs	r3, #1
 800923a:	4652      	mov	r2, sl
 800923c:	4639      	mov	r1, r7
 800923e:	4630      	mov	r0, r6
 8009240:	47c0      	blx	r8
 8009242:	3001      	adds	r0, #1
 8009244:	d103      	bne.n	800924e <_printf_common+0xbe>
 8009246:	f04f 30ff 	mov.w	r0, #4294967295
 800924a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800924e:	3501      	adds	r5, #1
 8009250:	e7c1      	b.n	80091d6 <_printf_common+0x46>
 8009252:	2030      	movs	r0, #48	; 0x30
 8009254:	18e1      	adds	r1, r4, r3
 8009256:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800925a:	1c5a      	adds	r2, r3, #1
 800925c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009260:	4422      	add	r2, r4
 8009262:	3302      	adds	r3, #2
 8009264:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009268:	e7c3      	b.n	80091f2 <_printf_common+0x62>
 800926a:	2301      	movs	r3, #1
 800926c:	4622      	mov	r2, r4
 800926e:	4639      	mov	r1, r7
 8009270:	4630      	mov	r0, r6
 8009272:	47c0      	blx	r8
 8009274:	3001      	adds	r0, #1
 8009276:	d0e6      	beq.n	8009246 <_printf_common+0xb6>
 8009278:	f109 0901 	add.w	r9, r9, #1
 800927c:	e7d7      	b.n	800922e <_printf_common+0x9e>
	...

08009280 <_printf_i>:
 8009280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009284:	4617      	mov	r7, r2
 8009286:	7e0a      	ldrb	r2, [r1, #24]
 8009288:	b085      	sub	sp, #20
 800928a:	2a6e      	cmp	r2, #110	; 0x6e
 800928c:	4698      	mov	r8, r3
 800928e:	4606      	mov	r6, r0
 8009290:	460c      	mov	r4, r1
 8009292:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009294:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8009298:	f000 80bc 	beq.w	8009414 <_printf_i+0x194>
 800929c:	d81a      	bhi.n	80092d4 <_printf_i+0x54>
 800929e:	2a63      	cmp	r2, #99	; 0x63
 80092a0:	d02e      	beq.n	8009300 <_printf_i+0x80>
 80092a2:	d80a      	bhi.n	80092ba <_printf_i+0x3a>
 80092a4:	2a00      	cmp	r2, #0
 80092a6:	f000 80c8 	beq.w	800943a <_printf_i+0x1ba>
 80092aa:	2a58      	cmp	r2, #88	; 0x58
 80092ac:	f000 808a 	beq.w	80093c4 <_printf_i+0x144>
 80092b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092b4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80092b8:	e02a      	b.n	8009310 <_printf_i+0x90>
 80092ba:	2a64      	cmp	r2, #100	; 0x64
 80092bc:	d001      	beq.n	80092c2 <_printf_i+0x42>
 80092be:	2a69      	cmp	r2, #105	; 0x69
 80092c0:	d1f6      	bne.n	80092b0 <_printf_i+0x30>
 80092c2:	6821      	ldr	r1, [r4, #0]
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80092ca:	d023      	beq.n	8009314 <_printf_i+0x94>
 80092cc:	1d11      	adds	r1, r2, #4
 80092ce:	6019      	str	r1, [r3, #0]
 80092d0:	6813      	ldr	r3, [r2, #0]
 80092d2:	e027      	b.n	8009324 <_printf_i+0xa4>
 80092d4:	2a73      	cmp	r2, #115	; 0x73
 80092d6:	f000 80b4 	beq.w	8009442 <_printf_i+0x1c2>
 80092da:	d808      	bhi.n	80092ee <_printf_i+0x6e>
 80092dc:	2a6f      	cmp	r2, #111	; 0x6f
 80092de:	d02a      	beq.n	8009336 <_printf_i+0xb6>
 80092e0:	2a70      	cmp	r2, #112	; 0x70
 80092e2:	d1e5      	bne.n	80092b0 <_printf_i+0x30>
 80092e4:	680a      	ldr	r2, [r1, #0]
 80092e6:	f042 0220 	orr.w	r2, r2, #32
 80092ea:	600a      	str	r2, [r1, #0]
 80092ec:	e003      	b.n	80092f6 <_printf_i+0x76>
 80092ee:	2a75      	cmp	r2, #117	; 0x75
 80092f0:	d021      	beq.n	8009336 <_printf_i+0xb6>
 80092f2:	2a78      	cmp	r2, #120	; 0x78
 80092f4:	d1dc      	bne.n	80092b0 <_printf_i+0x30>
 80092f6:	2278      	movs	r2, #120	; 0x78
 80092f8:	496f      	ldr	r1, [pc, #444]	; (80094b8 <_printf_i+0x238>)
 80092fa:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80092fe:	e064      	b.n	80093ca <_printf_i+0x14a>
 8009300:	681a      	ldr	r2, [r3, #0]
 8009302:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8009306:	1d11      	adds	r1, r2, #4
 8009308:	6019      	str	r1, [r3, #0]
 800930a:	6813      	ldr	r3, [r2, #0]
 800930c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009310:	2301      	movs	r3, #1
 8009312:	e0a3      	b.n	800945c <_printf_i+0x1dc>
 8009314:	f011 0f40 	tst.w	r1, #64	; 0x40
 8009318:	f102 0104 	add.w	r1, r2, #4
 800931c:	6019      	str	r1, [r3, #0]
 800931e:	d0d7      	beq.n	80092d0 <_printf_i+0x50>
 8009320:	f9b2 3000 	ldrsh.w	r3, [r2]
 8009324:	2b00      	cmp	r3, #0
 8009326:	da03      	bge.n	8009330 <_printf_i+0xb0>
 8009328:	222d      	movs	r2, #45	; 0x2d
 800932a:	425b      	negs	r3, r3
 800932c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009330:	4962      	ldr	r1, [pc, #392]	; (80094bc <_printf_i+0x23c>)
 8009332:	220a      	movs	r2, #10
 8009334:	e017      	b.n	8009366 <_printf_i+0xe6>
 8009336:	6820      	ldr	r0, [r4, #0]
 8009338:	6819      	ldr	r1, [r3, #0]
 800933a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800933e:	d003      	beq.n	8009348 <_printf_i+0xc8>
 8009340:	1d08      	adds	r0, r1, #4
 8009342:	6018      	str	r0, [r3, #0]
 8009344:	680b      	ldr	r3, [r1, #0]
 8009346:	e006      	b.n	8009356 <_printf_i+0xd6>
 8009348:	f010 0f40 	tst.w	r0, #64	; 0x40
 800934c:	f101 0004 	add.w	r0, r1, #4
 8009350:	6018      	str	r0, [r3, #0]
 8009352:	d0f7      	beq.n	8009344 <_printf_i+0xc4>
 8009354:	880b      	ldrh	r3, [r1, #0]
 8009356:	2a6f      	cmp	r2, #111	; 0x6f
 8009358:	bf14      	ite	ne
 800935a:	220a      	movne	r2, #10
 800935c:	2208      	moveq	r2, #8
 800935e:	4957      	ldr	r1, [pc, #348]	; (80094bc <_printf_i+0x23c>)
 8009360:	2000      	movs	r0, #0
 8009362:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8009366:	6865      	ldr	r5, [r4, #4]
 8009368:	2d00      	cmp	r5, #0
 800936a:	60a5      	str	r5, [r4, #8]
 800936c:	f2c0 809c 	blt.w	80094a8 <_printf_i+0x228>
 8009370:	6820      	ldr	r0, [r4, #0]
 8009372:	f020 0004 	bic.w	r0, r0, #4
 8009376:	6020      	str	r0, [r4, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d13f      	bne.n	80093fc <_printf_i+0x17c>
 800937c:	2d00      	cmp	r5, #0
 800937e:	f040 8095 	bne.w	80094ac <_printf_i+0x22c>
 8009382:	4675      	mov	r5, lr
 8009384:	2a08      	cmp	r2, #8
 8009386:	d10b      	bne.n	80093a0 <_printf_i+0x120>
 8009388:	6823      	ldr	r3, [r4, #0]
 800938a:	07da      	lsls	r2, r3, #31
 800938c:	d508      	bpl.n	80093a0 <_printf_i+0x120>
 800938e:	6923      	ldr	r3, [r4, #16]
 8009390:	6862      	ldr	r2, [r4, #4]
 8009392:	429a      	cmp	r2, r3
 8009394:	bfde      	ittt	le
 8009396:	2330      	movle	r3, #48	; 0x30
 8009398:	f805 3c01 	strble.w	r3, [r5, #-1]
 800939c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80093a0:	ebae 0305 	sub.w	r3, lr, r5
 80093a4:	6123      	str	r3, [r4, #16]
 80093a6:	f8cd 8000 	str.w	r8, [sp]
 80093aa:	463b      	mov	r3, r7
 80093ac:	aa03      	add	r2, sp, #12
 80093ae:	4621      	mov	r1, r4
 80093b0:	4630      	mov	r0, r6
 80093b2:	f7ff feed 	bl	8009190 <_printf_common>
 80093b6:	3001      	adds	r0, #1
 80093b8:	d155      	bne.n	8009466 <_printf_i+0x1e6>
 80093ba:	f04f 30ff 	mov.w	r0, #4294967295
 80093be:	b005      	add	sp, #20
 80093c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093c4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80093c8:	493c      	ldr	r1, [pc, #240]	; (80094bc <_printf_i+0x23c>)
 80093ca:	6822      	ldr	r2, [r4, #0]
 80093cc:	6818      	ldr	r0, [r3, #0]
 80093ce:	f012 0f80 	tst.w	r2, #128	; 0x80
 80093d2:	f100 0504 	add.w	r5, r0, #4
 80093d6:	601d      	str	r5, [r3, #0]
 80093d8:	d001      	beq.n	80093de <_printf_i+0x15e>
 80093da:	6803      	ldr	r3, [r0, #0]
 80093dc:	e002      	b.n	80093e4 <_printf_i+0x164>
 80093de:	0655      	lsls	r5, r2, #25
 80093e0:	d5fb      	bpl.n	80093da <_printf_i+0x15a>
 80093e2:	8803      	ldrh	r3, [r0, #0]
 80093e4:	07d0      	lsls	r0, r2, #31
 80093e6:	bf44      	itt	mi
 80093e8:	f042 0220 	orrmi.w	r2, r2, #32
 80093ec:	6022      	strmi	r2, [r4, #0]
 80093ee:	b91b      	cbnz	r3, 80093f8 <_printf_i+0x178>
 80093f0:	6822      	ldr	r2, [r4, #0]
 80093f2:	f022 0220 	bic.w	r2, r2, #32
 80093f6:	6022      	str	r2, [r4, #0]
 80093f8:	2210      	movs	r2, #16
 80093fa:	e7b1      	b.n	8009360 <_printf_i+0xe0>
 80093fc:	4675      	mov	r5, lr
 80093fe:	fbb3 f0f2 	udiv	r0, r3, r2
 8009402:	fb02 3310 	mls	r3, r2, r0, r3
 8009406:	5ccb      	ldrb	r3, [r1, r3]
 8009408:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800940c:	4603      	mov	r3, r0
 800940e:	2800      	cmp	r0, #0
 8009410:	d1f5      	bne.n	80093fe <_printf_i+0x17e>
 8009412:	e7b7      	b.n	8009384 <_printf_i+0x104>
 8009414:	6808      	ldr	r0, [r1, #0]
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	f010 0f80 	tst.w	r0, #128	; 0x80
 800941c:	6949      	ldr	r1, [r1, #20]
 800941e:	d004      	beq.n	800942a <_printf_i+0x1aa>
 8009420:	1d10      	adds	r0, r2, #4
 8009422:	6018      	str	r0, [r3, #0]
 8009424:	6813      	ldr	r3, [r2, #0]
 8009426:	6019      	str	r1, [r3, #0]
 8009428:	e007      	b.n	800943a <_printf_i+0x1ba>
 800942a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800942e:	f102 0004 	add.w	r0, r2, #4
 8009432:	6018      	str	r0, [r3, #0]
 8009434:	6813      	ldr	r3, [r2, #0]
 8009436:	d0f6      	beq.n	8009426 <_printf_i+0x1a6>
 8009438:	8019      	strh	r1, [r3, #0]
 800943a:	2300      	movs	r3, #0
 800943c:	4675      	mov	r5, lr
 800943e:	6123      	str	r3, [r4, #16]
 8009440:	e7b1      	b.n	80093a6 <_printf_i+0x126>
 8009442:	681a      	ldr	r2, [r3, #0]
 8009444:	1d11      	adds	r1, r2, #4
 8009446:	6019      	str	r1, [r3, #0]
 8009448:	6815      	ldr	r5, [r2, #0]
 800944a:	2100      	movs	r1, #0
 800944c:	6862      	ldr	r2, [r4, #4]
 800944e:	4628      	mov	r0, r5
 8009450:	f000 f836 	bl	80094c0 <memchr>
 8009454:	b108      	cbz	r0, 800945a <_printf_i+0x1da>
 8009456:	1b40      	subs	r0, r0, r5
 8009458:	6060      	str	r0, [r4, #4]
 800945a:	6863      	ldr	r3, [r4, #4]
 800945c:	6123      	str	r3, [r4, #16]
 800945e:	2300      	movs	r3, #0
 8009460:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009464:	e79f      	b.n	80093a6 <_printf_i+0x126>
 8009466:	6923      	ldr	r3, [r4, #16]
 8009468:	462a      	mov	r2, r5
 800946a:	4639      	mov	r1, r7
 800946c:	4630      	mov	r0, r6
 800946e:	47c0      	blx	r8
 8009470:	3001      	adds	r0, #1
 8009472:	d0a2      	beq.n	80093ba <_printf_i+0x13a>
 8009474:	6823      	ldr	r3, [r4, #0]
 8009476:	079b      	lsls	r3, r3, #30
 8009478:	d507      	bpl.n	800948a <_printf_i+0x20a>
 800947a:	2500      	movs	r5, #0
 800947c:	f104 0919 	add.w	r9, r4, #25
 8009480:	68e3      	ldr	r3, [r4, #12]
 8009482:	9a03      	ldr	r2, [sp, #12]
 8009484:	1a9b      	subs	r3, r3, r2
 8009486:	429d      	cmp	r5, r3
 8009488:	db05      	blt.n	8009496 <_printf_i+0x216>
 800948a:	68e0      	ldr	r0, [r4, #12]
 800948c:	9b03      	ldr	r3, [sp, #12]
 800948e:	4298      	cmp	r0, r3
 8009490:	bfb8      	it	lt
 8009492:	4618      	movlt	r0, r3
 8009494:	e793      	b.n	80093be <_printf_i+0x13e>
 8009496:	2301      	movs	r3, #1
 8009498:	464a      	mov	r2, r9
 800949a:	4639      	mov	r1, r7
 800949c:	4630      	mov	r0, r6
 800949e:	47c0      	blx	r8
 80094a0:	3001      	adds	r0, #1
 80094a2:	d08a      	beq.n	80093ba <_printf_i+0x13a>
 80094a4:	3501      	adds	r5, #1
 80094a6:	e7eb      	b.n	8009480 <_printf_i+0x200>
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d1a7      	bne.n	80093fc <_printf_i+0x17c>
 80094ac:	780b      	ldrb	r3, [r1, #0]
 80094ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094b6:	e765      	b.n	8009384 <_printf_i+0x104>
 80094b8:	08009bbe 	.word	0x08009bbe
 80094bc:	08009bad 	.word	0x08009bad

080094c0 <memchr>:
 80094c0:	b510      	push	{r4, lr}
 80094c2:	b2c9      	uxtb	r1, r1
 80094c4:	4402      	add	r2, r0
 80094c6:	4290      	cmp	r0, r2
 80094c8:	4603      	mov	r3, r0
 80094ca:	d101      	bne.n	80094d0 <memchr+0x10>
 80094cc:	2000      	movs	r0, #0
 80094ce:	bd10      	pop	{r4, pc}
 80094d0:	781c      	ldrb	r4, [r3, #0]
 80094d2:	3001      	adds	r0, #1
 80094d4:	428c      	cmp	r4, r1
 80094d6:	d1f6      	bne.n	80094c6 <memchr+0x6>
 80094d8:	4618      	mov	r0, r3
 80094da:	bd10      	pop	{r4, pc}

080094dc <memcpy>:
 80094dc:	b510      	push	{r4, lr}
 80094de:	1e43      	subs	r3, r0, #1
 80094e0:	440a      	add	r2, r1
 80094e2:	4291      	cmp	r1, r2
 80094e4:	d100      	bne.n	80094e8 <memcpy+0xc>
 80094e6:	bd10      	pop	{r4, pc}
 80094e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094f0:	e7f7      	b.n	80094e2 <memcpy+0x6>

080094f2 <memmove>:
 80094f2:	4288      	cmp	r0, r1
 80094f4:	b510      	push	{r4, lr}
 80094f6:	eb01 0302 	add.w	r3, r1, r2
 80094fa:	d803      	bhi.n	8009504 <memmove+0x12>
 80094fc:	1e42      	subs	r2, r0, #1
 80094fe:	4299      	cmp	r1, r3
 8009500:	d10c      	bne.n	800951c <memmove+0x2a>
 8009502:	bd10      	pop	{r4, pc}
 8009504:	4298      	cmp	r0, r3
 8009506:	d2f9      	bcs.n	80094fc <memmove+0xa>
 8009508:	1881      	adds	r1, r0, r2
 800950a:	1ad2      	subs	r2, r2, r3
 800950c:	42d3      	cmn	r3, r2
 800950e:	d100      	bne.n	8009512 <memmove+0x20>
 8009510:	bd10      	pop	{r4, pc}
 8009512:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009516:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800951a:	e7f7      	b.n	800950c <memmove+0x1a>
 800951c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009520:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009524:	e7eb      	b.n	80094fe <memmove+0xc>
	...

08009528 <_free_r>:
 8009528:	b538      	push	{r3, r4, r5, lr}
 800952a:	4605      	mov	r5, r0
 800952c:	2900      	cmp	r1, #0
 800952e:	d043      	beq.n	80095b8 <_free_r+0x90>
 8009530:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009534:	1f0c      	subs	r4, r1, #4
 8009536:	2b00      	cmp	r3, #0
 8009538:	bfb8      	it	lt
 800953a:	18e4      	addlt	r4, r4, r3
 800953c:	f000 f8d4 	bl	80096e8 <__malloc_lock>
 8009540:	4a1e      	ldr	r2, [pc, #120]	; (80095bc <_free_r+0x94>)
 8009542:	6813      	ldr	r3, [r2, #0]
 8009544:	4610      	mov	r0, r2
 8009546:	b933      	cbnz	r3, 8009556 <_free_r+0x2e>
 8009548:	6063      	str	r3, [r4, #4]
 800954a:	6014      	str	r4, [r2, #0]
 800954c:	4628      	mov	r0, r5
 800954e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009552:	f000 b8ca 	b.w	80096ea <__malloc_unlock>
 8009556:	42a3      	cmp	r3, r4
 8009558:	d90b      	bls.n	8009572 <_free_r+0x4a>
 800955a:	6821      	ldr	r1, [r4, #0]
 800955c:	1862      	adds	r2, r4, r1
 800955e:	4293      	cmp	r3, r2
 8009560:	bf01      	itttt	eq
 8009562:	681a      	ldreq	r2, [r3, #0]
 8009564:	685b      	ldreq	r3, [r3, #4]
 8009566:	1852      	addeq	r2, r2, r1
 8009568:	6022      	streq	r2, [r4, #0]
 800956a:	6063      	str	r3, [r4, #4]
 800956c:	6004      	str	r4, [r0, #0]
 800956e:	e7ed      	b.n	800954c <_free_r+0x24>
 8009570:	4613      	mov	r3, r2
 8009572:	685a      	ldr	r2, [r3, #4]
 8009574:	b10a      	cbz	r2, 800957a <_free_r+0x52>
 8009576:	42a2      	cmp	r2, r4
 8009578:	d9fa      	bls.n	8009570 <_free_r+0x48>
 800957a:	6819      	ldr	r1, [r3, #0]
 800957c:	1858      	adds	r0, r3, r1
 800957e:	42a0      	cmp	r0, r4
 8009580:	d10b      	bne.n	800959a <_free_r+0x72>
 8009582:	6820      	ldr	r0, [r4, #0]
 8009584:	4401      	add	r1, r0
 8009586:	1858      	adds	r0, r3, r1
 8009588:	4282      	cmp	r2, r0
 800958a:	6019      	str	r1, [r3, #0]
 800958c:	d1de      	bne.n	800954c <_free_r+0x24>
 800958e:	6810      	ldr	r0, [r2, #0]
 8009590:	6852      	ldr	r2, [r2, #4]
 8009592:	4401      	add	r1, r0
 8009594:	6019      	str	r1, [r3, #0]
 8009596:	605a      	str	r2, [r3, #4]
 8009598:	e7d8      	b.n	800954c <_free_r+0x24>
 800959a:	d902      	bls.n	80095a2 <_free_r+0x7a>
 800959c:	230c      	movs	r3, #12
 800959e:	602b      	str	r3, [r5, #0]
 80095a0:	e7d4      	b.n	800954c <_free_r+0x24>
 80095a2:	6820      	ldr	r0, [r4, #0]
 80095a4:	1821      	adds	r1, r4, r0
 80095a6:	428a      	cmp	r2, r1
 80095a8:	bf01      	itttt	eq
 80095aa:	6811      	ldreq	r1, [r2, #0]
 80095ac:	6852      	ldreq	r2, [r2, #4]
 80095ae:	1809      	addeq	r1, r1, r0
 80095b0:	6021      	streq	r1, [r4, #0]
 80095b2:	6062      	str	r2, [r4, #4]
 80095b4:	605c      	str	r4, [r3, #4]
 80095b6:	e7c9      	b.n	800954c <_free_r+0x24>
 80095b8:	bd38      	pop	{r3, r4, r5, pc}
 80095ba:	bf00      	nop
 80095bc:	200000e4 	.word	0x200000e4

080095c0 <_malloc_r>:
 80095c0:	b570      	push	{r4, r5, r6, lr}
 80095c2:	1ccd      	adds	r5, r1, #3
 80095c4:	f025 0503 	bic.w	r5, r5, #3
 80095c8:	3508      	adds	r5, #8
 80095ca:	2d0c      	cmp	r5, #12
 80095cc:	bf38      	it	cc
 80095ce:	250c      	movcc	r5, #12
 80095d0:	2d00      	cmp	r5, #0
 80095d2:	4606      	mov	r6, r0
 80095d4:	db01      	blt.n	80095da <_malloc_r+0x1a>
 80095d6:	42a9      	cmp	r1, r5
 80095d8:	d903      	bls.n	80095e2 <_malloc_r+0x22>
 80095da:	230c      	movs	r3, #12
 80095dc:	6033      	str	r3, [r6, #0]
 80095de:	2000      	movs	r0, #0
 80095e0:	bd70      	pop	{r4, r5, r6, pc}
 80095e2:	f000 f881 	bl	80096e8 <__malloc_lock>
 80095e6:	4a23      	ldr	r2, [pc, #140]	; (8009674 <_malloc_r+0xb4>)
 80095e8:	6814      	ldr	r4, [r2, #0]
 80095ea:	4621      	mov	r1, r4
 80095ec:	b991      	cbnz	r1, 8009614 <_malloc_r+0x54>
 80095ee:	4c22      	ldr	r4, [pc, #136]	; (8009678 <_malloc_r+0xb8>)
 80095f0:	6823      	ldr	r3, [r4, #0]
 80095f2:	b91b      	cbnz	r3, 80095fc <_malloc_r+0x3c>
 80095f4:	4630      	mov	r0, r6
 80095f6:	f000 f867 	bl	80096c8 <_sbrk_r>
 80095fa:	6020      	str	r0, [r4, #0]
 80095fc:	4629      	mov	r1, r5
 80095fe:	4630      	mov	r0, r6
 8009600:	f000 f862 	bl	80096c8 <_sbrk_r>
 8009604:	1c43      	adds	r3, r0, #1
 8009606:	d126      	bne.n	8009656 <_malloc_r+0x96>
 8009608:	230c      	movs	r3, #12
 800960a:	4630      	mov	r0, r6
 800960c:	6033      	str	r3, [r6, #0]
 800960e:	f000 f86c 	bl	80096ea <__malloc_unlock>
 8009612:	e7e4      	b.n	80095de <_malloc_r+0x1e>
 8009614:	680b      	ldr	r3, [r1, #0]
 8009616:	1b5b      	subs	r3, r3, r5
 8009618:	d41a      	bmi.n	8009650 <_malloc_r+0x90>
 800961a:	2b0b      	cmp	r3, #11
 800961c:	d90f      	bls.n	800963e <_malloc_r+0x7e>
 800961e:	600b      	str	r3, [r1, #0]
 8009620:	18cc      	adds	r4, r1, r3
 8009622:	50cd      	str	r5, [r1, r3]
 8009624:	4630      	mov	r0, r6
 8009626:	f000 f860 	bl	80096ea <__malloc_unlock>
 800962a:	f104 000b 	add.w	r0, r4, #11
 800962e:	1d23      	adds	r3, r4, #4
 8009630:	f020 0007 	bic.w	r0, r0, #7
 8009634:	1ac3      	subs	r3, r0, r3
 8009636:	d01b      	beq.n	8009670 <_malloc_r+0xb0>
 8009638:	425a      	negs	r2, r3
 800963a:	50e2      	str	r2, [r4, r3]
 800963c:	bd70      	pop	{r4, r5, r6, pc}
 800963e:	428c      	cmp	r4, r1
 8009640:	bf0b      	itete	eq
 8009642:	6863      	ldreq	r3, [r4, #4]
 8009644:	684b      	ldrne	r3, [r1, #4]
 8009646:	6013      	streq	r3, [r2, #0]
 8009648:	6063      	strne	r3, [r4, #4]
 800964a:	bf18      	it	ne
 800964c:	460c      	movne	r4, r1
 800964e:	e7e9      	b.n	8009624 <_malloc_r+0x64>
 8009650:	460c      	mov	r4, r1
 8009652:	6849      	ldr	r1, [r1, #4]
 8009654:	e7ca      	b.n	80095ec <_malloc_r+0x2c>
 8009656:	1cc4      	adds	r4, r0, #3
 8009658:	f024 0403 	bic.w	r4, r4, #3
 800965c:	42a0      	cmp	r0, r4
 800965e:	d005      	beq.n	800966c <_malloc_r+0xac>
 8009660:	1a21      	subs	r1, r4, r0
 8009662:	4630      	mov	r0, r6
 8009664:	f000 f830 	bl	80096c8 <_sbrk_r>
 8009668:	3001      	adds	r0, #1
 800966a:	d0cd      	beq.n	8009608 <_malloc_r+0x48>
 800966c:	6025      	str	r5, [r4, #0]
 800966e:	e7d9      	b.n	8009624 <_malloc_r+0x64>
 8009670:	bd70      	pop	{r4, r5, r6, pc}
 8009672:	bf00      	nop
 8009674:	200000e4 	.word	0x200000e4
 8009678:	200000e8 	.word	0x200000e8

0800967c <_realloc_r>:
 800967c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800967e:	4607      	mov	r7, r0
 8009680:	4614      	mov	r4, r2
 8009682:	460e      	mov	r6, r1
 8009684:	b921      	cbnz	r1, 8009690 <_realloc_r+0x14>
 8009686:	4611      	mov	r1, r2
 8009688:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800968c:	f7ff bf98 	b.w	80095c0 <_malloc_r>
 8009690:	b922      	cbnz	r2, 800969c <_realloc_r+0x20>
 8009692:	f7ff ff49 	bl	8009528 <_free_r>
 8009696:	4625      	mov	r5, r4
 8009698:	4628      	mov	r0, r5
 800969a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800969c:	f000 f826 	bl	80096ec <_malloc_usable_size_r>
 80096a0:	4284      	cmp	r4, r0
 80096a2:	d90f      	bls.n	80096c4 <_realloc_r+0x48>
 80096a4:	4621      	mov	r1, r4
 80096a6:	4638      	mov	r0, r7
 80096a8:	f7ff ff8a 	bl	80095c0 <_malloc_r>
 80096ac:	4605      	mov	r5, r0
 80096ae:	2800      	cmp	r0, #0
 80096b0:	d0f2      	beq.n	8009698 <_realloc_r+0x1c>
 80096b2:	4631      	mov	r1, r6
 80096b4:	4622      	mov	r2, r4
 80096b6:	f7ff ff11 	bl	80094dc <memcpy>
 80096ba:	4631      	mov	r1, r6
 80096bc:	4638      	mov	r0, r7
 80096be:	f7ff ff33 	bl	8009528 <_free_r>
 80096c2:	e7e9      	b.n	8009698 <_realloc_r+0x1c>
 80096c4:	4635      	mov	r5, r6
 80096c6:	e7e7      	b.n	8009698 <_realloc_r+0x1c>

080096c8 <_sbrk_r>:
 80096c8:	b538      	push	{r3, r4, r5, lr}
 80096ca:	2300      	movs	r3, #0
 80096cc:	4c05      	ldr	r4, [pc, #20]	; (80096e4 <_sbrk_r+0x1c>)
 80096ce:	4605      	mov	r5, r0
 80096d0:	4608      	mov	r0, r1
 80096d2:	6023      	str	r3, [r4, #0]
 80096d4:	f000 f814 	bl	8009700 <_sbrk>
 80096d8:	1c43      	adds	r3, r0, #1
 80096da:	d102      	bne.n	80096e2 <_sbrk_r+0x1a>
 80096dc:	6823      	ldr	r3, [r4, #0]
 80096de:	b103      	cbz	r3, 80096e2 <_sbrk_r+0x1a>
 80096e0:	602b      	str	r3, [r5, #0]
 80096e2:	bd38      	pop	{r3, r4, r5, pc}
 80096e4:	2000037c 	.word	0x2000037c

080096e8 <__malloc_lock>:
 80096e8:	4770      	bx	lr

080096ea <__malloc_unlock>:
 80096ea:	4770      	bx	lr

080096ec <_malloc_usable_size_r>:
 80096ec:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80096f0:	2800      	cmp	r0, #0
 80096f2:	f1a0 0004 	sub.w	r0, r0, #4
 80096f6:	bfbc      	itt	lt
 80096f8:	580b      	ldrlt	r3, [r1, r0]
 80096fa:	18c0      	addlt	r0, r0, r3
 80096fc:	4770      	bx	lr
	...

08009700 <_sbrk>:
 8009700:	4b04      	ldr	r3, [pc, #16]	; (8009714 <_sbrk+0x14>)
 8009702:	4602      	mov	r2, r0
 8009704:	6819      	ldr	r1, [r3, #0]
 8009706:	b909      	cbnz	r1, 800970c <_sbrk+0xc>
 8009708:	4903      	ldr	r1, [pc, #12]	; (8009718 <_sbrk+0x18>)
 800970a:	6019      	str	r1, [r3, #0]
 800970c:	6818      	ldr	r0, [r3, #0]
 800970e:	4402      	add	r2, r0
 8009710:	601a      	str	r2, [r3, #0]
 8009712:	4770      	bx	lr
 8009714:	200000ec 	.word	0x200000ec
 8009718:	20000380 	.word	0x20000380

0800971c <_init>:
 800971c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800971e:	bf00      	nop
 8009720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009722:	bc08      	pop	{r3}
 8009724:	469e      	mov	lr, r3
 8009726:	4770      	bx	lr

08009728 <_fini>:
 8009728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800972a:	bf00      	nop
 800972c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800972e:	bc08      	pop	{r3}
 8009730:	469e      	mov	lr, r3
 8009732:	4770      	bx	lr
